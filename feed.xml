<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ben Blog</title>
    <description>一个小白的成长学习历程</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 12 Sep 2018 20:47:17 +0800</pubDate>
    <lastBuildDate>Wed, 12 Sep 2018 20:47:17 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>nginx与php-fpm 连接数</title>
        <description>&lt;h2 id=&quot;apache连接请求机制&quot;&gt;Apache连接请求机制&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-08-11-php-nginx-connect/1.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-08-11-php-nginx-connect/1.png&quot; alt=&quot;1.png&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apache的处理机制是每有一个请求就会去fork一个子进程来处理请求。&lt;br /&gt;
这样带来的缺点很明显：
当请求量大的时候，需要开启一样数量的进程，这样一来系统内存的消耗，二来cpu执行切换带来的上下文切换消耗非常大。&lt;/p&gt;

&lt;p&gt;Nginx是如何解决这些问题的呢？答案是使用I/O复用技术。
下面只是简单讲解什么是I/O复用，有兴趣的同学可以参考&lt;a href=&quot;/2018/08/04/computer-io.html&quot;&gt;I/O模型&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nginx使用的io复用技术&quot;&gt;Nginx使用的I/O复用技术&lt;/h2&gt;

&lt;h4 id=&quot;初级io复用&quot;&gt;初级I/O复用&lt;/h4&gt;

&lt;p&gt;采用非阻塞的模式，当一个连接过来时，我们不阻塞住，这样一个进程可以同时处理多个连接了。
比如一个进程接受了10000个连接，这个进程每次从头到尾的问一遍这10000个连接：“有I/O事件没？有的话就交给我处理，没有的话我一会再来问一遍。”
然后进程就一直从头到尾问这10000个连接，如果这1000个连接都没有I/O事件，就会造成CPU的空转，并且效率也很低，不好不好。&lt;/p&gt;

&lt;h4 id=&quot;升级io复用selectpoll&quot;&gt;升级I/O复用（select、poll）&lt;/h4&gt;

&lt;p&gt;我们能不能引入一个代理，这个代理可以同时观察许多I/O流事件呢？&lt;br /&gt;
当没有I/O事件的时候，这个进程处于阻塞状态。当连接有I/O流事件产生的时候，就会去唤醒进程去处理。&lt;/p&gt;

&lt;p&gt;但是唤醒之后，因为不知道是哪个连接产生的I/O流事件，于是进程就挨个去问：“请问是你有事要处理吗？”。&lt;/p&gt;

&lt;p&gt;ps: select与poll原理是一样的，只不过select只能观察1024个连接，poll可以观察无限个连接。&lt;/p&gt;

&lt;h4 id=&quot;超级升级io复用epoll&quot;&gt;超级升级I/O复用（epoll）&lt;/h4&gt;

&lt;p&gt;有了epoll，可以知道是哪个连接产生的I/O流事件。理论上1个进程就可以无限数量的连接，而且无需轮询，真正解决了c10k的问题。&lt;/p&gt;

&lt;p&gt;nginx就是采用基于epoll的异步非阻塞服务器程序。&lt;/p&gt;

&lt;h2 id=&quot;nginx与php-fprm的连接处理&quot;&gt;nginx与php-fprm的连接处理&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-08-11-php-nginx-connect/2.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-08-11-php-nginx-connect/2.png&quot; alt=&quot;2.png&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;nginx&quot;&gt;nginx&lt;/h4&gt;

&lt;p&gt;worker为epoll异步处理请求。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;worker_processes&lt;/td&gt;
      &lt;td&gt;worker数量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;worker_connections&lt;/td&gt;
      &lt;td&gt;每个worker能处理的最大并发连接请求&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;php-fpm&quot;&gt;php-fpm&lt;/h4&gt;

&lt;p&gt;worker为poll异步处理请求。众多的 worker 进程组成了进程池，等待 master 进程分配任务，而且每个 worker 进程只能同时处理单个任务，前一个处理结束，才能为下一个服务。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;pm&lt;/td&gt;
      &lt;td&gt;分为静态(static)和动态(dynamic)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pm.max_children&lt;/td&gt;
      &lt;td&gt;static模式下创建的子进程数(固定)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pm.start_servers&lt;/td&gt;
      &lt;td&gt;动态方式下的起始worker进程数量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pm.min_spare_servers&lt;/td&gt;
      &lt;td&gt;动态方式下服务器空闲时最小worker进程数量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pm.max_spare_servers&lt;/td&gt;
      &lt;td&gt;动态方式下服务器空闲时最大worker进程数量&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;超时设置&quot;&gt;超时设置&lt;/h2&gt;

&lt;h4 id=&quot;nginx-1&quot;&gt;nginx&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;fastcgi_connect_timeout&lt;/td&gt;
      &lt;td&gt;后端链接时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fastcgi_send_timeout&lt;/td&gt;
      &lt;td&gt;数据发送时间，两次成功发送时间差，不是整个发送时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fastcgi_read_timeout&lt;/td&gt;
      &lt;td&gt;数据接收时间，两次成功接收时间差，不是整个接收时间&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;php-fpm-1&quot;&gt;php-fpm&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;request_terminate_timeout&lt;/td&gt;
      &lt;td&gt;PHP脚本的最大执行时间&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;php&quot;&gt;php&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;max_execution_time&lt;/td&gt;
      &lt;td&gt;PHP脚本的最大执行时间&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ps:一些版本中php-fpm的配置会覆盖php.ini的配置，使php.ini的配置不起作用&lt;/p&gt;

&lt;h2 id=&quot;常见错误&quot;&gt;常见错误&lt;/h2&gt;

&lt;p&gt;1.502 Connection reset by peer&lt;/p&gt;

&lt;p&gt;php-fpm的worker进程执行php程序脚本时，超过了配置的最长执行时间，master进程将worker进程杀掉，直接返回502。&lt;/p&gt;

&lt;p&gt;2.502 Connection refused&lt;/p&gt;

&lt;p&gt;连接请求数(accpet之前)超出了端口所能监听的tcp连接的最大值(backlog的值)，进不了fpm等待accept的链接队列，直接返回502，这里可能会产生tcp重传。&lt;/p&gt;

&lt;p&gt;backlog的值是半连接和全连接的总和，他的存在也有短时间缓冲解耦nginx请求与fpm处理的作用，半连接指收到了syn请求，3次握手尚未建立，全连接指的是3次握手已经成功，不过尚未被accpet的请求，fpm里面有调节的参数，如果fpm的参数设置为-1，则默认走的是系统内核参数net.core.somaxconn的设置值，如果不设置可以在/proc/sys/net/core/somaxconn里查看，默认值是128，所以在连接请求较高的业务里要增大这个值。&lt;/p&gt;

&lt;p&gt;3.504 Connection timed out&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;php的worker进程池处理慢，无法尽快处理等待accept的链接队列，导致3次握手后的链接队列长时间没有被accept，nginx链接等待超时;&lt;/li&gt;
  &lt;li&gt;后端php-fpm执行脚本的时间太长，超过了nginx配置的超时机制，这个时候也是会报出504错误的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000007614502&quot;&gt;nginx、swoole高并发原理初探&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.2cto.com/net/201609/546064.html&quot;&gt;WebService之nginx+(php-fpm)结构模型剖析及优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 11 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/08/11/php-nginx-connect/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/11/php-nginx-connect/</guid>
        
        <category>php</category>
        
        
      </item>
    
      <item>
        <title>「转载」select、poll与epoll</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;转载自&lt;a href=&quot;https://cloud.tencent.com/developer/article/1005481&quot;&gt;大话 Select、Poll、Epoll&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;linux的socket-事件wakeup-callback机制&quot;&gt;Linux的socket 事件wakeup callback机制&lt;/h2&gt;

&lt;p&gt;言归正传，在介绍select、poll、epoll前，有必要说说linux(2.6+)内核的事件wakeup callback机制，这是IO多路复用机制存在的本质。Linux通过socket睡眠队列来管理所有等待socket的某个事件的process，同时通过wakeup机制来异步唤醒整个睡眠队列上等待事件的process，通知process相关事件发生。通常情况，socket的事件发生的时候，其会顺序遍历socket睡眠队列上的每个process节点，调用每个process节点挂载的callback函数。在遍历的过程中，如果遇到某个节点是排他的，那么就终止遍历，总体上会涉及两大逻辑：（1）睡眠等待逻辑；（2）唤醒逻辑。&lt;/p&gt;

&lt;p&gt;（1）睡眠等待逻辑：涉及select、poll、epoll_wait的阻塞等待逻辑&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[1]select、poll、epoll_wait陷入内核，判断监控的socket是否有关心的事件发生了，如果没，则为当前process构建一个wait_entry节点，然后插入到监控socket的sleep_list  &lt;br /&gt;
[2]进入循环的schedule直到关心的事件发生了  &lt;br /&gt;
[3]关心的事件发生后，将当前process的wait_entry节点从socket的sleep_list中删除。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（2）唤醒逻辑：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[1]socket的事件发生了，然后socket顺序遍历其睡眠队列，依次调用每个wait_entry节点的callback函数  &lt;br /&gt;
[2]直到完成队列的遍历或遇到某个wait_entry节点是排他的才停止。  &lt;br /&gt;
[3]一般情况下callback包含两个逻辑：1.wait_entry自定义的私有逻辑；2.唤醒的公共逻辑，主要用于将该wait_entry的process放入CPU的就绪队列，让CPU随后可以调度其执行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面就上面的两大逻辑，分别阐述select、poll、epoll的异同，为什么epoll能够比select、poll高效。&lt;/p&gt;

&lt;h2 id=&quot;select&quot;&gt;Select&lt;/h2&gt;

&lt;p&gt;在一个高性能的网络服务上，大多情况下一个服务进程(线程)process需要同时处理多个socket，我们需要公平对待所有socket，对于read而言，那个socket有数据可读，process就去读取该socket的数据来处理。于是对于read，一个朴素的需求就是关心的N个socket是否有数据”可读”，也就是我们期待”可读”事件的通知，而不是盲目地对每个socket调用recv/recvfrom来尝试接收数据。我们应该block在等待事件的发生上，这个事件简单点就是”关心的N个socket中一个或多个socket有数据可读了”，当block解除的时候，就意味着，我们一定可以找到一个或多个socket上有可读的数据。另一方面，根据上面的socket wakeup callback机制，我们不知道什么时候，哪个socket会有读事件发生，于是，process需要同时插入到这N个socket的sleep_list上等待任意一个socket可读事件发生而被唤醒，当时process被唤醒的时候，其callback里面应该有个逻辑去检查具体那些socket可读了。&lt;/p&gt;

&lt;p&gt;于是，select的多路复用逻辑就清晰了，select为每个socket引入一个poll逻辑，该poll逻辑用于收集socket发生的事件，对于可读事件来说，简单伪码如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;poll&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    //其他逻辑
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;recieve queque is not empty&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        sk_event |&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; POLL_IN；
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   //其他逻辑
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来就到select的逻辑了，下面是select的函数原型：5个参数，后面4个参数都是in/out类型(值可能会被修改返回)&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int nfds, fd_set &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;readfds, fd_set &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;writefds, fd_set &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;exceptfds, struct timeval &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当用户process调用select的时候，select会将需要监控的readfds集合拷贝到内核空间（假设监控的仅仅是socket可读），然后遍历自己监控的socket sk，挨个调用sk的poll逻辑以便检查该sk是否有可读事件，遍历完所有的sk后，如果没有任何一个sk可读，那么select会调用schedule_timeout进入schedule循环，使得process进入睡眠。如果在timeout时间内某个sk上有数据可读了，或者等待timeout了，则调用select的process会被唤醒，接下来select就是遍历监控的sk集合，挨个收集可读事件并返回给用户了，相应的伪码如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sk &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;readfds&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    sk_event.evt &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sk.poll&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    sk_event.sk &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sk&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    ret_event_for_process&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过上面的select逻辑过程分析，相信大家都意识到，select存在两个问题：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[1] 被监控的fds需要从用户空间拷贝到内核空间  &lt;br /&gt;
   为了减少数据拷贝带来的性能损坏，内核对被监控的fds集合大小做了限制，并且这个是通过宏控制的，大小不可改变(限制为1024)。  &lt;br /&gt;
[2] 被监控的fds集合中，只要有一个有数据可读，整个socket集合就会被遍历一次调用sk的poll函数收集可读事件  &lt;br /&gt;
   由于当初的需求是朴素，仅仅关心是否有数据可读这样一个事件，当事件通知来的时候，由于数据的到来是异步的，我们不知道事件来的时候，有多少个被监控的socket有数据可读了，于是，只能挨个遍历每个socket来收集可读事件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;到这里，我们有三个问题需要解决：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;被监控的fds集合限制为1024，1024太小了，我们希望能够有个比较大的可监控fds集合&lt;/li&gt;
  &lt;li&gt;fds集合需要从用户空间拷贝到内核空间的问题，我们希望不需要拷贝&lt;/li&gt;
  &lt;li&gt;当被监控的fds中某些有数据可读的时候，我们希望通知更加精细一点，就是我们希望能够从通知中得到有可读事件的fds列表，而不是需要遍历整个fds来收集。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通知中得到有可读事件的fds列表，而不是需要遍历整个fds来收集。&lt;/p&gt;

&lt;h2 id=&quot;poll&quot;&gt;poll&lt;/h2&gt;

&lt;p&gt;select遗留的三个问题中，问题(1)是用法限制问题，问题(2)和(3)则是性能问题。poll和select非常相似，poll并没着手解决性能问题，poll只是解决了select的问题(1)fds集合大小1024限制问题。下面是poll的函数原型，poll改变了fds集合的描述方式，使用了pollfd结构而不是select的fd_set结构，使得poll支持的fds集合限制远大于select的1024。poll虽然解决了fds集合大小1024的限制问题，但是，它并没改变大量描述符数组被整体复制于用户态和内核态的地址空间之间，以及个别描述符就绪触发整体描述符集合的遍历的低效问题。poll随着监控的socket集合的增加性能线性下降，poll不适合用于大并发场景。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int poll&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;struct pollfd &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;fds, nfds_t nfds, int &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;epoll&quot;&gt;epoll&lt;/h2&gt;

&lt;p&gt;select遗留的三个问题，问题(1)是比较好解决，poll简单两三下就解决掉了，但是poll的解决有点鸡肋。要解决问题(2)和(3)似乎比较棘手，要怎么解决呢？我们知道，在计算机行业中，有两种解决问题的思想：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[1] 计算机科学领域的任何问题, 都可以通过添加一个中间层来解决  &lt;br /&gt;
[2] 变集中(中央)处理为分散(分布式)处理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面，我们看看，epoll在解决select的遗留问题(2)和(3)的时候，怎么运用这两个思想的。&lt;/p&gt;

&lt;h4 id=&quot;fds集合拷贝问题的解决&quot;&gt;fds集合拷贝问题的解决&lt;/h4&gt;

&lt;p&gt;对于IO多路复用，有两件事是必须要做的(对于监控可读事件而言)：1. 准备好需要监控的fds集合；2. 探测并返回fds集合中哪些fd可读了。细看select或poll的函数原型，我们会发现，每次调用select或poll都在重复地准备(集中处理)整个需要监控的fds集合。然而对于频繁调用的select或poll而言，fds集合的变化频率要低得多，我们没必要每次都重新准备(集中处理)整个fds集合。&lt;/p&gt;

&lt;p&gt;于是，epoll引入了epoll_ctl系统调用，将高频调用的epoll_wait和低频的epoll_ctl隔离开。同时，epoll_ctl通过(EPOLL_CTL_ADD、EPOLL_CTL_MOD、EPOLL_CTL_DEL)三个操作来分散对需要监控的fds集合的修改，做到了有变化才变更，将select或poll高频、大块内存拷贝(集中处理)变成epoll_ctl的低频、小块内存的拷贝(分散处理)，避免了大量的内存拷贝。同时，对于高频epoll_wait的可读就绪的fd集合返回的拷贝问题，epoll通过内核与用户空间mmap(内存映射)同一块内存来解决。mmap将用户空间的一块地址和内核空间的一块地址同时映射到相同的一块物理内存地址（不管是用户空间还是内核空间都是虚拟地址，最终要通过地址映射映射到物理地址），使得这块物理内存对内核和对用户均可见，减少用户态和内核态之间的数据交换。&lt;/p&gt;

&lt;p&gt;另外，epoll通过epoll_ctl来对监控的fds集合来进行增、删、改，那么必须涉及到fd的快速查找问题，于是，一个低时间复杂度的增、删、改、查的数据结构来组织被监控的fds集合是必不可少的了。在linux 2.6.8之前的内核，epoll使用hash来组织fds集合，于是在创建epoll fd的时候，epoll需要初始化hash的大小。于是epoll_create(int size)有一个参数size，以便内核根据size的大小来分配hash的大小。在linux 2.6.8以后的内核中，epoll使用红黑树来组织监控的fds集合，于是epoll_create(int size)的参数size实际上已经没有意义了。&lt;/p&gt;

&lt;h4 id=&quot;按需遍历就绪的fds集合&quot;&gt;按需遍历就绪的fds集合&lt;/h4&gt;

&lt;p&gt;通过上面的socket的睡眠队列唤醒逻辑我们知道，socket唤醒睡眠在其睡眠队列的wait_entry(process)的时候会调用wait_entry的回调函数callback，并且，我们可以在callback中做任何事情。为了做到只遍历就绪的fd，我们需要有个地方来组织那些已经就绪的fd。为此，epoll引入了一个中间层，一个双向链表(ready_list)，一个单独的睡眠队列(single_epoll_wait_list)，并且，与select或poll不同的是，epoll的process不需要同时插入到多路复用的socket集合的所有睡眠队列中，相反process只是插入到中间层的epoll的单独睡眠队列中，process睡眠在epoll的单独队列上，等待事件的发生。同时，引入一个中间的wait_entry_sk，它与某个socket sk密切相关，wait_entry_sk睡眠在sk的睡眠队列上，其callback函数逻辑是将当前sk排入到epoll的ready_list中，并唤醒epoll的single_epoll_wait_list。而single_epoll_wait_list上睡眠的process的回调函数就明朗了：遍历ready_list上的所有sk，挨个调用sk的poll函数收集事件，然后唤醒process从epoll_wait返回。
于是，整个过来可以分为以下几个逻辑：&lt;/p&gt;

&lt;p&gt;（1）epoll_ctl EPOLL_CTL_ADD逻辑&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[1] 构建睡眠实体wait_entry_sk，将当前socket sk关联给wait_entry_sk，并设置wait_entry_sk的回调函数为epoll_callback_sk  &lt;br /&gt;
[2] 将wait_entry_sk排入当前socket sk的睡眠队列上&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;回调函数epoll_callback_sk的逻辑如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[1] 将之前关联的sk排入epoll的ready_list  &lt;br /&gt;
[2] 然后唤醒epoll的单独睡眠队列single_epoll_wait_list&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（2）epoll_wait逻辑&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[1] 构建睡眠实体wait_entry_proc，将当前process关联给wait_entry_proc，并设置回调函数为epoll_callback_proc  &lt;br /&gt;
[2] 判断epoll的ready_list是否为空，如果为空，则将wait_entry_proc排入epoll的single_epoll_wait_list中，随后进入schedule循环，这会导致调用
epoll_wait的process睡眠。  &lt;br /&gt;
[3] wait_entry_proc被事件唤醒或超时醒来，wait_entry_proc将被从single_epoll_wait_list移除掉，然后wait_entry_proc执行回调函数epoll_callback_proc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;回调函数epoll_callback_proc的逻辑如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[1] 遍历epoll的ready_list，挨个调用每个sk的poll逻辑收集发生的事件，对于监控可读事件而已，ready_list上的每个sk都是有数据可读的，这里的遍历必要的(不同于select/poll的遍历，它不管有没数据可读都需要遍历一些来判断，这样就做了很多无用功。)  &lt;br /&gt;
[2] 将每个sk收集到的事件，通过epoll_wait传入的events数组回传并唤醒相应的process。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（3）epoll唤醒逻辑&lt;/p&gt;

&lt;p&gt;整个epoll的协议栈唤醒逻辑如下(对于可读事件而言)：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[1] 协议数据包到达网卡并被排入socket sk的接收队列  &lt;br /&gt;
[2] 睡眠在sk的睡眠队列wait_entry被唤醒，wait_entry_sk的回调函数epoll_callback_sk被执行  &lt;br /&gt;
[3] epoll_callback_sk将当前sk插入epoll的ready_list中  &lt;br /&gt;
[4] 唤醒睡眠在epoll的单独睡眠队列single_epoll_wait_list的wait_entry，wait_entry_proc被唤醒执行回调函数epoll_callback_proc  &lt;br /&gt;
[5] 遍历epoll的ready_list，挨个调用每个sk的poll逻辑收集发生的事件  &lt;br /&gt;
[6] 将每个sk收集到的事件，通过epoll_wait传入的events数组回传并唤醒相应的process。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;epoll巧妙的引入一个中间层解决了大量监控socket的无效遍历问题。细心的同学会发现，epoll在中间层上为每个监控的socket准备了一个单独的回调函数epoll_callback_sk，而对于select/poll，所有的socket都公用一个相同的回调函数。正是这个单独的回调epoll_callback_sk使得每个socket都能单独处理自身，当自己就绪的时候将自身socket挂入epoll的ready_list。同时，epoll引入了一个睡眠队列single_epoll_wait_list，分割了两类睡眠等待。process不再睡眠在所有的socket的睡眠队列上，而是睡眠在epoll的睡眠队列上，在等待”任意一个socket可读就绪”事件。而中间wait_entry_sk则代替process睡眠在具体的socket上，当socket就绪的时候，它就可以处理自身了。&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/08/05/computer-select-poll-epoll/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/05/computer-select-poll-epoll/</guid>
        
        <category>计算机</category>
        
        <category>转载</category>
        
        
      </item>
    
      <item>
        <title>I/O模型</title>
        <description>&lt;p&gt;I/O发生过程涉及的对象：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;调用该IO的线程(thread)&lt;/li&gt;
  &lt;li&gt;系统内核(kernel)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I/O发生过程步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;等待数据准备&lt;/li&gt;
  &lt;li&gt;将数据从内核拷贝到用户的进程空间。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;阻塞型ioblocking-io&quot;&gt;阻塞型I/O（blocking I/O）&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-08-04-computer-io/1.jpg&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-08-04-computer-io/1.jpg&quot; alt=&quot;1.jpg&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;用户thread在整个过程当中，都需要等待kernel返回数据，所以整个过程都是被block的。&lt;/p&gt;

&lt;h4 id=&quot;非阻塞型ionon-blocking-io&quot;&gt;非阻塞型I/O（non-blocking I/O）&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-08-04-computer-io/2.jpg&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-08-04-computer-io/2.jpg&quot; alt=&quot;2.jpg&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;等待数据阶段，如果请求的数据没准备好，kernel会返回失败，用户thread是采用轮询方式进行的，所以在这个阶段不会被block。&lt;br /&gt;
拷贝数据阶段，当kernel返回成功，则发送拷贝数据请求，等待kennel把数据从内核拷贝到用户空间，所以这个阶段是被block的。&lt;/p&gt;

&lt;h4 id=&quot;io复用io-multiplexing&quot;&gt;I/O复用（IO multiplexing）&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-08-04-computer-io/3.jpg&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-08-04-computer-io/3.jpg&quot; alt=&quot;3.jpg&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们常用的select、epoll都是使用这种模型。&lt;br /&gt;
等待数据阶段，用户调用了select，并等待select返回结果，这个阶段是被block的。&lt;br /&gt;
读取数据阶段，当select返回了可读结果，则发送拷贝数据请求，等待kennel把数据从内核拷贝到用户空间，这个阶段也是被block的。&lt;/p&gt;

&lt;p&gt;这么看来其实I/O复用还不如阻塞I/O，虽然整个过程同样都是被block的，但需要发送两次系统请求，性能会有所下降。&lt;br /&gt;
用select的优势在于它可以同时处理多个connection。（多说一句。所以，如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。&lt;/p&gt;

&lt;h4 id=&quot;异步ioasynchronous-io&quot;&gt;异步I/O（asynchronous I/O）&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-08-04-computer-io/4.jpg&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-08-04-computer-io/4.jpg&quot; alt=&quot;4.jpg&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;等待数据阶段，用户发送请求之后kernel会立即返回结果，之后用户进程就可以去处理其他事情了，这个阶段不会被block。  &lt;br /&gt;
拷贝数据阶段，用户也不需要感知，kernel在数据准备好之后，会立刻被数据拷贝到用户进程空间，然后给用户进程发信号去读取，这个阶段也不会被block。&lt;/p&gt;

&lt;h4 id=&quot;信号驱动io-signal-driven-io&quot;&gt;信号驱动I/O (signal-driven I/O）&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-08-04-computer-io/5.jpg&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-08-04-computer-io/5.jpg&quot; alt=&quot;5.jpg&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;对比&quot;&gt;对比&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-08-04-computer-io/.jpg&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-08-04-computer-io/6.jpg&quot; alt=&quot;6.jpg&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同步和异步&lt;br /&gt;
其实只要判断在整个过程中，用户能不能去处理其他事情，如果能，就是异步，不能，就是同步。&lt;/p&gt;

&lt;p&gt;阻塞与非阻塞  &lt;br /&gt;
如果需要等待kernel返回结果，这个进程就会被block。所以主要判断用户是否需要等待kernel返回结果。&lt;br /&gt;
从这个点看，其实非阻塞I/O并不能完全算是非阻塞，毕竟拷贝数据阶段也是被block的。&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/08/04/computer-io/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/04/computer-io/</guid>
        
        <category>计算机</category>
        
        
      </item>
    
      <item>
        <title>进程与线程</title>
        <description>&lt;p&gt;先理解一下，什么是进程和线程：&lt;/p&gt;

&lt;p&gt;在现代操作系统中，进程支持多线程。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;进程是资源管理的最小单元；&lt;/li&gt;
  &lt;li&gt;线程是程序执行的最小单元。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;它们之间的关系如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-07-29-computer-thread/1.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-07-29-computer-thread/1.png&quot; alt=&quot;1.png&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;那么什么是程序执行的最小单位呢？&lt;/p&gt;

&lt;p&gt;线程作为调度和分配的基本单位（也被称为轻量级进程），这是因为他们共享进程的资源，所以没有太多的内存消耗。&lt;/p&gt;

&lt;p&gt;当多个程序同时在执行的时候，我们的cpu（当cpu数小于程序数）并不能同时处理，cpu将会按照自己的逻辑排优先级，每次分配一定数量的时间片（1时间片=10ms），执行完时间片时间，就必须挂起等待，轮到其他程序执行，以此类推，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-07-29-computer-thread/2.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-07-29-computer-thread/2.png&quot; alt=&quot;2.png&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当然cpu并不认识我们的程序，它只认进程里面的线程，所以是分配时间片给线程。&lt;/p&gt;

&lt;p&gt;我们上面所说的线程都是指内核级线程，即系统知道该线程的存在。  &lt;br /&gt;
还有一种是&lt;strong&gt;用户级线程&lt;/strong&gt;，由程序的线程库产生的，这种是系统不知道该线程存在的，所以可以认为是程序自己实现的虚拟线程。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-07-29-computer-thread/3.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-07-29-computer-thread/3.png&quot; alt=&quot;3.png&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;用户级线程与内核级线程的区别：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户级线程是共享进程资源的，切换不需要有上下文切换的消耗，这是因为内核级线程切换通常会跨进程，所以需要把资源存储到其他地方，等轮到它执行时，再把资源拿回来。&lt;/li&gt;
  &lt;li&gt;用户级线程如果其中一个处于阻塞，则派生它的内核级线程也会被阻塞，因为系统不知道这个线程存在。而内核级别线程不会有这个问题。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 29 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/07/29/computer-thread/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/29/computer-thread/</guid>
        
        <category>计算机</category>
        
        
      </item>
    
      <item>
        <title>「构建高性能web站点」服务器并发</title>
        <description>&lt;p&gt;&lt;strong&gt;吞吐率&lt;/strong&gt;&lt;br /&gt;
单位时间内服务器处理的请求数 reqs/s&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用户并发数&lt;/strong&gt;
服务器最大并发数是有一定的利益前提的，就是服务器和用户双方所能接受的最大利益下。&lt;br /&gt;
每个用户可以在同一时间发起不止一个请求（与浏览器、http版本有关），所以用户并发数 &amp;gt; 请求并发数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;请求等待时间&lt;/strong&gt;
分为以下两种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户平均请求等待时间。&lt;/li&gt;
  &lt;li&gt;服务器平均请求处理时间（等于吞吐率的倒数）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;线程与进程&lt;/strong&gt;
如果对线程与进程不熟悉，请参考&lt;a href=&quot;/2018/07/29/computer-thread.html&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 27 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/07/27/bhpws-service/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/27/bhpws-service/</guid>
        
        <category>web</category>
        
        
      </item>
    
      <item>
        <title>PerconaToolkit工具集合</title>
        <description>&lt;h3 id=&quot;pt-align&quot;&gt;pt-align&lt;/h3&gt;

&lt;p&gt;将其它工具的输出按列对齐。&lt;/p&gt;

&lt;h3 id=&quot;pt-archiver&quot;&gt;pt-archiver&lt;/h3&gt;

&lt;p&gt;将数据归档到另一张表或者文件。&lt;/p&gt;

&lt;h3 id=&quot;pt-config-diff&quot;&gt;pt-config-diff&lt;/h3&gt;

&lt;p&gt;对比数据库配置、环境变量差异&lt;/p&gt;

&lt;h3 id=&quot;pt-deadlock-logger&quot;&gt;pt-deadlock-logger&lt;/h3&gt;

&lt;p&gt;记录死锁日志，并保存到文件或者数据表&lt;/p&gt;

&lt;h3 id=&quot;pt-diskstats&quot;&gt;pt-diskstats&lt;/h3&gt;

&lt;p&gt;功能和iostat类似，给出磁盘的I/O统计信息&lt;/p&gt;

&lt;h3 id=&quot;pt-duplicate-key-checker&quot;&gt;pt-duplicate-key-checker&lt;/h3&gt;

&lt;p&gt;检测表中重复多余的索引或者主键&lt;/p&gt;

&lt;h3 id=&quot;pt-fifo-split&quot;&gt;pt-fifo-split&lt;/h3&gt;

&lt;p&gt;文件分割&lt;/p&gt;

&lt;h3 id=&quot;pt-find&quot;&gt;pt-find&lt;/h3&gt;

&lt;p&gt;按条件查找、排序数据库表&lt;/p&gt;

&lt;h3 id=&quot;pt-fingerprint&quot;&gt;pt-fingerprint&lt;/h3&gt;

&lt;p&gt;将sql转为绑定形式&lt;/p&gt;

&lt;h3 id=&quot;pt-fk-error-logger&quot;&gt;pt-fk-error-logger&lt;/h3&gt;

&lt;p&gt;记录外键错误&lt;/p&gt;

&lt;h3 id=&quot;pt-heartbeat&quot;&gt;pt-heartbeat&lt;/h3&gt;

&lt;p&gt;监控备库延迟&lt;/p&gt;

&lt;h3 id=&quot;pt-index-usage&quot;&gt;pt-index-usage&lt;/h3&gt;

&lt;p&gt;能够从日志当中分析索引的使用情况&lt;/p&gt;

&lt;h3 id=&quot;pt-kill&quot;&gt;pt-kill&lt;/h3&gt;

&lt;p&gt;杀死mysql会话&lt;/p&gt;

&lt;h3 id=&quot;pt-summary&quot;&gt;pt-summary&lt;/h3&gt;

&lt;p&gt;查看系统摘要报告&lt;/p&gt;

&lt;p&gt;打印出来的信息包括：CPU、内存、硬盘、网卡等信息，还包括文件系统、磁盘调度和队列大小、LVM、RAID、网络链接信息、netstat 的统计，以及前10的负载占用信息和vmstat信息。&lt;/p&gt;

&lt;h3 id=&quot;pt-online-schema-change&quot;&gt;pt-online-schema-change&lt;/h3&gt;

&lt;p&gt;可以在执行ALTER语句中，不堵塞数据库表格的写操作。&lt;/p&gt;

&lt;h3 id=&quot;pt-pmp&quot;&gt;pt-pmp&lt;/h3&gt;

&lt;p&gt;获取MySQL的堆栈信息&lt;/p&gt;

&lt;h3 id=&quot;pt-query-digest&quot;&gt;pt-query-digest&lt;/h3&gt;

&lt;p&gt;分析mysql慢查询的一个工具，它可以分析binlog、General log、slowlog，也可以通过SHOWPROCESSLIST或者通过tcpdump抓取的MySQL协议数据来进行分析。&lt;/p&gt;

&lt;h3 id=&quot;pt-show-grants&quot;&gt;pt-show-grants&lt;/h3&gt;

&lt;p&gt;格式化打印输出MySQL上的赋权，以便你可以有效地复制、比较以及版本控制。&lt;/p&gt;

&lt;h3 id=&quot;pt-slave-delay&quot;&gt;pt-slave-delay&lt;/h3&gt;

&lt;p&gt;让主库的操作延迟写入到从库&lt;/p&gt;

&lt;h3 id=&quot;pt-slave-find&quot;&gt;pt-slave-find&lt;/h3&gt;

&lt;p&gt;查找和打印MySQL从库的复制层次树&lt;/p&gt;

&lt;h3 id=&quot;pt-slave-restart&quot;&gt;pt-slave-restart&lt;/h3&gt;

&lt;p&gt;监控一个或者多个MySQL复制slave的错误，然后当复制停止时试图重启。&lt;/p&gt;

&lt;h3 id=&quot;pt-stalk&quot;&gt;pt-stalk&lt;/h3&gt;

&lt;p&gt;mysql 性能瓶颈是值得关注的，但往往出现问题的时候，总是持续那么一点时间，没能抓住事故现场，从而无法分析.pt-stalk 是一款当条件触发时,记录相关系统信息的mysql监控工具.这款工具帮助我们设定自己的条件与阀值，当触发条件时可以提供邮件报警，采集回来的信息会存储在文件里，诸如 ps/netstat/vmstat/iostat/processlist/innodbstat 全部一览无余. 就算在认为mysql性能没什么问题时，也可以跑起这款工具，以防不测&lt;/p&gt;

&lt;h3 id=&quot;pt-table-checksum&quot;&gt;pt-table-checksum&lt;/h3&gt;

&lt;p&gt;检查主从数据是否一致&lt;/p&gt;

&lt;h3 id=&quot;pt-table-sync&quot;&gt;pt-table-sync&lt;/h3&gt;

&lt;p&gt;同步两张表之间的数据差异&lt;/p&gt;

&lt;h3 id=&quot;pt-table-usage&quot;&gt;pt-table-usage&lt;/h3&gt;

&lt;p&gt;分析日志中查询并分析表使用情况&lt;/p&gt;

&lt;h3 id=&quot;pt-upgrade&quot;&gt;pt-upgrade&lt;/h3&gt;

&lt;p&gt;验证不同服务器上的查询结果是否相同&lt;/p&gt;

&lt;h3 id=&quot;pt-variable-advisor&quot;&gt;pt-variable-advisor&lt;/h3&gt;

&lt;p&gt;分析mysql参数，并且给出参数设置建议的一款PT工具&lt;/p&gt;

&lt;h3 id=&quot;pt-visual-explain&quot;&gt;pt-visual-explain&lt;/h3&gt;

&lt;p&gt;格式化explain输出结果为树结构&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/07/14/perconaToolkit/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/14/perconaToolkit/</guid>
        
        <category>MYSQL</category>
        
        
      </item>
    
      <item>
        <title>【构建高性能web站点】网络传输</title>
        <description>&lt;h2 id=&quot;osi七层网络协议四层协议&quot;&gt;OSI七层网络协议&amp;amp;四层协议&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-07-14-bhpws-network/2.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每层功能如下表所示：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;层&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;功能&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;典型设备&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;典型协议、标准和应用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;应用层&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;用户接口、应用程序&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;网关&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TELNET, FTP, HTTP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;表示层&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;数据的表示、压缩和加密&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;网关&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ASCLL、PICT、TIFF、JPEG、 MIDI、MPEG&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;会话层&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;会话的建立和结束&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;网关&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;RPC、SQL、NFS 、X WINDOWS、ASP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;传输层&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;端到端控制&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;网关&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TCP、UDP、SPX&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;网络层&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;路由，寻址&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;路由器&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;IP、IPX、APPLETALK、ICMP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;数据链路层&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;保证误差错的数据链路data link&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;交换机、网桥、网卡&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;802.2、802.3ATM、HDLC、FRAME RELAY&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;物理层&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;传输比特流&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;集线器、中继器&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;V.35、EIA/TIA-232&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;tcp网络传输过程&quot;&gt;TCP网络传输过程&lt;/h2&gt;

&lt;p&gt;以火车货物类比如下图：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-07-14-bhpws-network/1.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-07-14-bhpws-network/1.png&quot; alt=&quot;1.png&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;drawio源文件&lt;a href=&quot;/assets/img/posts/2018-07-14-bhpws-network/drawio1&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;数据封装/解封装如下图：&lt;/p&gt;

&lt;script src=&quot;/assets/js/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    http应用层-&amp;gt;&amp;gt; 传输层: http应用层协议
    传输层-&amp;gt;&amp;gt; 网络层:分段
    网络层-&amp;gt;&amp;gt; 数据链路层:IP报文
    Note right of 传输层: 分成TCP分段并被打上&lt;br /&gt;标签，称为头(header)&lt;br /&gt;，指定接收方哪一进程&lt;br /&gt;接收此消息，并包含能&lt;br /&gt;够让接收方重组数据的&lt;br /&gt;信息。
    Note right of 网络层:将整个TCP分段封装成&lt;br /&gt;IP报文(添上IP头标签)。&lt;br /&gt;包括源和目的IP地址，&lt;br /&gt;以及发送报文到目的地&lt;br /&gt;址所需信息。
    Note right of 数据链路层:封装帧头(源和目的物&lt;br /&gt;理地址)和帧尾(差错纠&lt;br /&gt;正信息)
    数据链路层-&amp;gt;&amp;gt; 网络层:移除协议头
    网络层-&amp;gt;&amp;gt; 传输层:移除协议头
    传输层-&amp;gt;&amp;gt; http应用层:移除协议头
&lt;/div&gt;

&lt;h2 id=&quot;带宽&quot;&gt;带宽&lt;/h2&gt;

&lt;p&gt;首先了解数据发送过程，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/img/posts/2018-07-14-bhpws-network/3.png&quot;&gt;&lt;img src=&quot;/assets/img/posts/2018-07-14-bhpws-network/3.png&quot; alt=&quot;1.png&quot; title=&quot;点击查看原图&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;drawio源文件&lt;a href=&quot;/assets/img/posts/2018-07-14-bhpws-network/drawio2&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;约定
比特(bit)单位缩写为b，字节(byte)缩写位B。  &lt;br /&gt;
1B = 8b  &lt;br /&gt;
1KB = 2^10B = 1024B ~ 1000B  &lt;br /&gt;
1MB = 2^10KB = 1024KB ~ 1000KB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们常说的100M带宽，就是100Mbit/s，或者100Mbps  &lt;br /&gt;
铜线中的电信号传播速度约为2.3&lt;em&gt;10^8m/s, 光纤中的光信号约为2.0×10^8m/s（因为光纤传播光信号是利用了光的全反射原理，所以传播距离要大于光纤长度，不过我们计算还是以光纤长度来计算，这也导致了数值小于实际光传播速度3&lt;/em&gt;10^8m/s）&lt;/p&gt;

&lt;h4 id=&quot;独享共享&quot;&gt;独享&amp;amp;共享&lt;/h4&gt;

&lt;p&gt;用个例子来解释，假设交换机出口带宽为100M，主机独享10M，表示该主机任何时刻都是以10Mbps在发送数据，这也导致了交换机必须保证其他主机数据发送速度不能超过90M。如果主机共享10M，则表示该主机发送数据的最大值可以达到10Mbps,但如果该交换机有同时50台共享10M带宽的主机，并且同时在发送数据，则那个时刻只能有2Mbps速度。&lt;/p&gt;

&lt;h2 id=&quot;响应时间&quot;&gt;响应时间&lt;/h2&gt;

&lt;p&gt;响应时间 = 发送时间(数据量比特数b/带宽) + 传播时间(传播距离/传播速度) + 处理时间(节点数据转发处理\队列排队的时间)
下载速度 = 数据量字节数B/响应时间&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;主机1 - 交换机1/路由器1 - 节点1 - 节点2 - ... - 节点n - 路由器2/交换机2 - 主机2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;traceroute&lt;/code&gt;我们可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。当然每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。&lt;/p&gt;

&lt;h4 id=&quot;实例计算下载速度&quot;&gt;实例计算下载速度&lt;/h4&gt;

&lt;p&gt;以西安用户下载服务器在北京的100M文件为例&lt;/p&gt;

&lt;p&gt;前提:这里忽略处理时间，且假设中间只有1个节点（国家主干网）&lt;/p&gt;

&lt;p&gt;[发送时间]主机1(网卡1000Mbps) 800Mbit/1000Mbps = 0.8s  &lt;br /&gt;
[发送时间]交换机1(10Mbps独享带宽) 800Mbit/10Mbps = 80s  &lt;br /&gt;
[发送时间]国家骨干网（40Gbps共享带宽）800Mbit/40Gbps = 0.02s  &lt;br /&gt;
[发送时间]交换机2(1Mbps独享带宽) 800Mbit/1Mbps = 800s  &lt;br /&gt;
[发送时间]主机2(网卡100Mbps) 800Mbit/100Mbps = 8s  &lt;br /&gt;
[传输时间]北京-西安(1000km) 1000km/(2*10^8m/s) = 0.005s&lt;/p&gt;

&lt;p&gt;响应时间 = 800s + 0.005s = 800.005s&lt;/p&gt;

&lt;p&gt;下载速度 = 100MB / 800.005s = 124.999KB/s&lt;/p&gt;

&lt;h4 id=&quot;误差&quot;&gt;误差&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;100MB数据在传输过程中，并不是完全通过一个节点，才进入下一个节点,而是拆分成每个数据包。&lt;/li&gt;
  &lt;li&gt;节点不止1个，但如果这些节点带宽足够大，可忽略。&lt;/li&gt;
  &lt;li&gt;下载基于TCP协议，会有网络协议附加信息，所以实际传输的数据比100MB要大。&lt;/li&gt;
  &lt;li&gt;忽略了处理时间。&lt;/li&gt;
  &lt;li&gt;长距离传输需要设置中继器来加强信号，它的接收转发也需要时间。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 14 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/07/14/bhpws-network/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/14/bhpws-network/</guid>
        
        <category>web</category>
        
        
      </item>
    
      <item>
        <title>mysql系列教程 - B+Tree索引</title>
        <description>&lt;p&gt;了解B+树前，我们先了解下二叉查找树、平衡二叉查找树、B-Tree。&lt;/p&gt;

&lt;h3 id=&quot;二叉查找树&quot;&gt;二叉查找树&lt;/h3&gt;

&lt;p&gt;二叉查找树具有以下性质：左子树的键值小于根的键值，右子树的键值大于根的键值。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于它可以任意构造，所以也可以按照赢下方式构建二叉树。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/2.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们知道，二叉树查找一个节点所需的最大时间取决于树高，所以如果像上图所示进行查找，效率会非常低。所以，要提高查找效率，需要这颗树是平衡的，从而引出了&lt;strong&gt;平衡二叉树&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;平衡二叉树avl树&quot;&gt;平衡二叉树（AVL树）&lt;/h3&gt;

&lt;p&gt;平衡二叉树定义如下：首先符合二叉查找树的定义，其次必须满足任何节点的两个子树高最大差为1。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/3.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;平衡树查询速度的确很快，不过维护一颗平衡二叉树需要一定的开销，需要做1次或多次左旋和右旋来得到插入或者更新后树的平衡性，不过多用于内存结构对象中，所以开销相对较小。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/4.jpg&quot; alt=&quot;4.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-tree&quot;&gt;B-Tree&lt;/h3&gt;

&lt;p&gt;B-Tree是为磁盘等外存储设备设计的一种平衡查找树。因此在讲B-Tree之前先了解下磁盘的相关知识。&lt;/p&gt;

&lt;p&gt;系统从磁盘读取数据到内存时是以磁盘块（block）为基本单位的，位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么。&lt;/p&gt;

&lt;p&gt;InnoDB存储引擎中有页（Page）的概念，页是其磁盘管理的最小单位。InnoDB存储引擎中默认每个页的大小为16KB，可通过参数innodb_page_size将页的大小设置为4K、8K、16K，在MySQL中可通过如下命令查看页的大小：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'innodb_page_size'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而系统一个磁盘块的存储空间往往没有这么大，因此InnoDB每次申请磁盘空间时都会是若干地址连续磁盘块来达到页的大小16KB。InnoDB在把磁盘数据读入到磁盘时会以页为基本单位，在查询数据时如果一个页中的每条数据都能有助于定位数据记录的位置，这将会减少磁盘I/O次数，提高查询效率。&lt;/p&gt;

&lt;p&gt;B-Tree相对于平衡二叉树来说，减少了节点数，每层增加节点数，减少了树高，提高了查找效率。&lt;/p&gt;

&lt;p&gt;如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/5.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图中可以看到每个节点中不仅包含数据的key值，还有data值。由于每个节点存储一个页的数据，而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小，当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I/O次数，进而影响查询效率。&lt;/p&gt;

&lt;h3 id=&quot;btree&quot;&gt;B+Tree&lt;/h3&gt;

&lt;p&gt;B+Tree是在B-Tree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎就是用B+Tree实现其索引结构。&lt;/p&gt;

&lt;p&gt;在B+Tree中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。&lt;/p&gt;

&lt;p&gt;B+Tree相对于B-Tree有几点不同：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;非叶子节点只存储键值信息。&lt;/li&gt;
  &lt;li&gt;所有叶子节点之间都有一个链指针。&lt;/li&gt;
  &lt;li&gt;数据记录都存放在叶子节点中。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;结构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/6.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;聚集索引和辅助索引&quot;&gt;聚集索引和辅助索引&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;聚集索引&lt;/strong&gt;就是按照每张表的主键构造一颗B+树，同时叶子节点中存放的为整张表的行数据，也将聚集索引的叶子节点称为&lt;strong&gt;数据页&lt;/strong&gt;。一张表只能拥有一个聚集索引。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;辅助索引&lt;/strong&gt;的叶子节点并不包含行记录的全部数据，而是存储相应行数据的聚集索引键，即主键。当通过辅助索引来查询数据时，InnoDB存储引擎会遍历辅助索引找到主键，然后再通过主键在聚集索引中找到完整的行记录数据。&lt;/p&gt;

&lt;p&gt;如果是多列索引（联合索引、覆盖索引），它的内部的结果。从本质上来说，联合索引也是一棵B+树，不同的是联合索引的键值的数量不是1，而是大于等于2。接着来讨论两个整型列组成的联合索引，假设两个键值的名称分别为a、b，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/7.jpg&quot; alt=&quot;7.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图可以观察到多个键值的B+树情况，其实和单个键值的B+树并没有什么不同，键值都是排序的，通过叶子节点可以逻辑上顺序地读出所有数据，就上面的例子来说，即（1,1）、（1,2）、（2,1）、（2,4）、（3,1）、（3,2）。其数据按(a,b)的顺序进行了存放。&lt;/p&gt;

&lt;p&gt;对于查询“SELECT * FROM TABLE WHERE a=xxx and b=xxx”，显然是可以使用（a,b）这个联合索引的。对于单个的a列查询“SELECT * FROM TABLE WHERE a=xxx”也是可以使用这个（a,b）这个联合索引的。但对于b列的查询“SELECT * FROM TABLE WHERE b=xxx”则不可以使用这棵B+树索引。可以发现叶子节点上的b值为1、2、1、4、1、2，显然不是排序的，而B+树的特性就是数据是排序的才能使用二分查找法，因此对于b列的查询使用不到（a,b）的索引。&lt;/p&gt;

&lt;p&gt;联合索引的第二个好处是已经对第二个键值进行了排序处理。例如，在很多情况下应用程序都需要查询某个用户的购物情况，并按照时间进行排序，最后取出最近三次的购买记录，这时使用联合索引可以避免多一次的排序操作，因为索引本身在叶子节点已经排序了。&lt;/p&gt;

&lt;p&gt;对于覆盖索引，由于可以从辅助索引中得到查询的记录信息，而不需要再去聚集索引获取记录信息，因此可以减少IO操作。&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/30/mysql-innodb-index/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/30/mysql-innodb-index/</guid>
        
        <category>MYSQL</category>
        
        
      </item>
    
      <item>
        <title>mysql系列教程 - innodb锁</title>
        <description>&lt;h3 id=&quot;lock和latch&quot;&gt;lock和latch&lt;/h3&gt;

&lt;p&gt;锁分为两种类型 &lt;strong&gt;lock&lt;/strong&gt; 和 &lt;strong&gt;latch&lt;/strong&gt; ，它们之间的差异如下表所示：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;-&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;lock&lt;/th&gt;
      &lt;th&gt;latch&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对象&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;事务&lt;/td&gt;
      &lt;td&gt;线程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;保护&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;数据库内容&lt;/td&gt;
      &lt;td&gt;内存数据结构&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;持续时间&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;整个事务过程&lt;/td&gt;
      &lt;td&gt;临界资源&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;模式&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;行锁、表锁、意向锁&lt;/td&gt;
      &lt;td&gt;读写锁、互斥量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;死锁&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;通过waits-for graph、time out等机制进行死锁检测和处理&lt;/td&gt;
      &lt;td&gt;无死锁检测与处理机制。仅通过应用程序加锁的顺序保证无死锁情况发生&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;存在于&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Lock Manager 的哈希表中&lt;/td&gt;
      &lt;td&gt;每个数据结构的对象中&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;下面讲到的锁都是针对lock来讲。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;锁类型&quot;&gt;锁类型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;共享锁（S）&lt;/strong&gt; ：允许事务读一行数据。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;排他锁（x）&lt;/strong&gt; ：允许事务删除或更新一行数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下情况会加锁：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;锁类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;加锁情况&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;行S&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;读取行记录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;行X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;增删改行记录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;表S&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;全表扫描&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;表X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;修改表结构&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果事务T1已经获得行r的共享锁，那么事务T2可以立即获得行r的共享锁，这种就叫做&lt;strong&gt;锁兼容&lt;/strong&gt;。如果事务T3想获得行r的排他锁，就必须等待T1、T2释放它们的共享锁，这种就叫做&lt;strong&gt;锁不兼容&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;共享锁与排他锁的兼容性如下表所示：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;-&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;X&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;S&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;S&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;innodb支持多粒度锁定，即可以同时存在行锁和表锁。并支持另外一种锁方式，称为&lt;strong&gt;意向锁&lt;/strong&gt;。因为数据本身也分为以下几层&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;数据库 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 表 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 页 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 行
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以，如果如果对某一层加锁，就需要对其所有上层加意向锁，意向锁也分为意向共享锁（IS），意向排他锁（IX）。  &lt;br /&gt;
对行加共享锁前，会对表加意向共享锁；对行加排他锁前，会对表加意向排他锁。&lt;/p&gt;

&lt;p&gt;表级意向锁和表级锁的兼容性如下表所示：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;-&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;IS&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;IX&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;S&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;X&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;S&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;例如对记录r加X锁之前，必须对表1加上IX锁，如果已经有事务对表1进行了S表锁，由于不兼容，需要等待表锁操作完成。&lt;/p&gt;

&lt;h3 id=&quot;查看锁&quot;&gt;查看锁&lt;/h3&gt;

&lt;p&gt;innodb1.0版本之前，用户只能通过以下命令查看当前数据库锁的请求。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROCESSLIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INNODB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从innodb1.0版本开始，在INFORMATION_SCHEMA架构中添加了表INNODB_TRX、INNODB_LOCKS、INNODB_LOCK_WAITS。通过这3张表，用户可以更简单的监控当前事务并分析可能存在的锁问题。&lt;/p&gt;

&lt;p&gt;INNODB_TRX表由以下字段组成：&lt;/p&gt;

&lt;p&gt;| 字段 | 说明 |
| :- | :- |
| trx_id | InnoDB存储引擎内部唯一的事务ID
| trx_state | 当前事务的状态。
| trx_started | 事务的开始时间。
| trx_requested_lock_id | 等待事务的锁ID。如trx_state的状态为LOCK WAIT,那么该值代表当前的等待之前事务占用锁资源的ID.若trx_state不是LOCK WAIT,则该值为NULL。
| trx_wait_started | 事务等待开始的时间。
| trx_weight | 事务的权重，反映了一个事务修改和锁住的行数。在InnoDB存储引擎中，当发生死锁需要回滚时，InnoDB存储会选 
择该值最小的进行回滚。
| trx_mysql_thread_id | Mysql中的线程ID,SHOW PROCESSLIST显示的结果。
| trx_query | 事务运行的sql语句。&lt;/p&gt;

&lt;p&gt;实际例子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-23-mysql-innodb-lock/1.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过state可以观察到trx_id为730FEE的事务当前正在运行，而trx_id为731F4的事务处于LOCK WAIT状态，且运行的SQL语句是select * from parent lock in shar mode。该表只是显示了当前运行的innoDB事务，并不能准确的判断锁的一些情况。如果需要查看锁，还需要访问 INNODB_LOCKS。&lt;/p&gt;

&lt;p&gt;INNODB_LOCKS表由如下字段组成：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;字段&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;锁的ID。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_trx_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;事务ID。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_mode&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;锁的模式。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_type&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;锁的类型，表锁还是行锁。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_table&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;要加锁的表。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_index&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;锁的索引。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_space&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InnoDB存储引擎表空间的ID号。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_page&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;被锁住的页的数量。若是表锁，则该值为NULL。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_rec&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;被锁住的行的数量。若是表锁，则该值为NULL。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_data&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;被锁住的行的主键值。当是表锁，该值为NULL。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;按照上面的例子，继续查看表INNODB_LOCKS。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-23-mysql-innodb-lock/2.jpg&quot; alt=&quot;2.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用户可以清楚的看到当前锁的信息，trx_id为730FEE的事务想表parent加了一个X的行锁。ID为7311F4的事务想表parent申请了一个S的行锁。lock_data都是1，申请相同的资源，因此会有等待。这样可以解析INNODB_TRX为什么一个事务的trx_state是RUNNING另一个是LOCK WAITLE&lt;/p&gt;

&lt;p&gt;另外需要注意的是，发现lock_data并不是可信的值。例如当用户运行一个范围查找时，lock_data可能只返回第一行的主键值。与此同时，如果当前资源被锁住了。若锁住的页因为InnoDB存储引擎缓冲池的容量，导致页从缓冲池中被刷出，则查看INNODB_LOCKS表时，该值同样显示为NULL。即InnoDB存储引擎不会从磁盘进行再一次的查找&lt;/p&gt;

&lt;p&gt;在通过INNODB_LOCKS馋看了每张表上锁的情况后，用户可以判断由此引发的等待情况。当事务较小时，用户就可以人为地、直观地进行判断了。但是当事务量非常大，其中锁和等待也时常发生。这个时候就不容易判断。但是可以通过INNODB_LOCK_WAITS可以很直观的反应出当前事务的等待。&lt;/p&gt;

&lt;p&gt;INNODB_LOCK_WAIT表由以下字段组成：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;字段&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;requesting_trx_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;申请锁资源的事务ID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;requesting_lock_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;申请的锁的ID。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;blocking_trx_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;阻塞的事务的ID。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;blocking_lock_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;阻塞的事务的ID。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;按照上面的例子，运行如下查询：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-23-mysql-innodb-lock/3.jpg&quot; alt=&quot;3.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过上述的SQL语句，用户可以清楚的看到哪个事务阻塞了另一个事务。当然这只是给出了事务和锁ID，如果需要，用户可以根据表INNODB_TRX、INNODB_LOCKS、INNODB_LOCK_WAITS得到更为直观的详细信息。例如，用户可以执行如下联合查询&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-23-mysql-innodb-lock/4.jpg&quot; alt=&quot;4.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;一致性非锁定读&quot;&gt;一致性非锁定读&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;一致性的非锁定读&lt;/strong&gt;是指innodb存储引擎通过行多版本控制的方式来读取当前执行时间数据库中的行数据。&lt;/p&gt;

&lt;p&gt;就是说如果读取的行已被加了X锁，这时不需要等待X锁的释放，而是读取行记录的快照数据（即该行的之前版本的数据），该实现是通过undo段来实现，而undo本身是用来在事务中回滚数据，因此快照数据本身是没有额外的消耗的。&lt;strong&gt;读取快照是不需要上锁的&lt;/strong&gt;，因为没有事务需要对历史数据进行修改操作。&lt;/p&gt;

&lt;p&gt;由于读取的行数据必须不能被其他事务修改，所以对使用场景有要求，在事务隔离级别READ COMMIT（提交读）和REPEATABLE READ（可重复读，默认）下，innodb使用一致性非锁定读。  &lt;br /&gt;
在READ COMMIT隔离级别下，对于快照数据，一致性非锁定读总是读取被锁定行的最新一份快照。  &lt;br /&gt;
在REPEATABLE READ隔离级别下，对于快照数据，一致性非锁定读总是读取事务开始时的行数据版本。&lt;/p&gt;

&lt;h3 id=&quot;自增长与锁&quot;&gt;自增长与锁&lt;/h3&gt;

&lt;p&gt;当对含有自增长的计数器的表进行插入操作时，这个计数器会被初始化，执行如下的语句来得到计数器的值：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_inc_col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;插入操作会根据这个自增长的计数器值加1赋予自增长列。这个实现方式称作为AUTO-INC Locking。这种锁采用一种特殊的表锁机制，为了提高插入的性能，锁不是在一个事务完成后才释放，而是在完成对自增长值插入的SQL语句后立即释放。&lt;/p&gt;

&lt;p&gt;虽然AUTO-INC Locking从一定程度上提高了并发插入的效率，但还是存在一些性能问题。首先，对于有自增长值的列的并发插入性能较差，事务必须等待前一个插入的完成。其次，对于INSERT—-SELECT的大数据量的插入会影响插入的性能，因为另一个事务中的插入会被阻塞。&lt;/p&gt;

&lt;p&gt;从MySQL5.1.22版本开始，InnoDB存储引擎引擎中提供了一种轻量级互斥量的自增长实现机制，这种机制大大提高了自增长值插入的性能。并且从该版本开始，InnoDB存储引擎提供了一个参数innodb_autoinc_lock_mode来控制自增长的模式，该参数的默认值为1.
在继续讨论新的自增长方式实现方式之前，需要对自增长的插入进行分类，如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;插入类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;insert-like&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;指所有的插入语句，如insert，replace，insert—select,replace—select,load data等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;simple inserts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;指能在插入之前就确定插入行数的语句。这些语句包含insert、replace等，需要注意的是：simple inserts不包含insert—on duplicater key update这类SQL语句&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;bulk inserts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;指在插入之前不能确定得到插入行数的语句，如insert—select，replace–select，load data&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;mixed-mode inserts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;指插入中有一部分的值是自增长的，有一部分是确定的，如INSERT INTO t1(c1,c2) VALAUES (1,’a’),(null,’b’),(5,’e’); 或者指 INSERT … ON DUPLICATE KEY UPDATE 这类sql语句。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;接着来分析参数innodb_autoinc_lock_mode，如下表所示：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;innodb_autoinc_lock_mode&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;这是MySQL5.1.22版本之前自增长的实现方式，即通过表锁的AUTO-INC Locking方式，因为有了新的自增长实现方式，0这个选项不应该是新版用户的首选项&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;这是该参数的默认值。对于simple inserts，该值会用互斥量去对内存中的计数器进行累加的操作，对于bulk inserts，还是使用传统表锁的AUTO-INC Locking方式。在这种配置下，如果不考虑回滚操作，对于自增长列的增长还是连续的，并且在这种方式下，statement-based方式的replication还是能很好地工作。需要注意的是，如果已经使用AUTO-INC Locking方式去产生自增长的值，而这时需要进行simple inserts的操作时，还是需要等待AUTO-INC Locking的释放&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;在这个模式下，对于所有的insert-like自增长的产生都是通过互斥量，而不是通过AUTO-INC Locking的方式，显然这时性能最高的方式。然而会带来一定的问题。因为并发插入的存在，在每次插入时，自增长的值可能不是连续的。最重要的是，基于Statment-base replication会出现问题。因此，使用这个模式，任何时候都应该使用row-base replication，这样才能保证最大的并发性能及replication主从数据的一致。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;外键和锁&quot;&gt;外键和锁&lt;/h3&gt;

&lt;p&gt;对于外键值的插入或更新，首先需要查询父表中的记录，即select父表，但是对父表的select操作，不是使用一致性非锁定锁，因为这样会发生数据不一致的问题，因此这时使用的是select … lock in share mode方式，即主动对父表加一个S锁，如果这时父表上已经加了X锁，子表的操作会被阻塞。&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/23/mysql-innodb-lock/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/23/mysql-innodb-lock/</guid>
        
        <category>MYSQL</category>
        
        
      </item>
    
      <item>
        <title>fabric - 架构&amp;执行流程</title>
        <description>&lt;p&gt;本文简单讲述fabric架构&amp;amp;执行流程，帮助同学快速理解&amp;amp;入门。&lt;/p&gt;

&lt;h2 id=&quot;架构&quot;&gt;架构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/1.jpeg&quot; alt=&quot;1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;identity&quot;&gt;Identity&lt;/h4&gt;

&lt;p&gt;Identity，也就是身份管理，Fabric是目前为止在设计上最贴近联盟链思想的区块链。联盟链考虑到商业应用对安全、隐私、监管、审计、性能的需求，提高准入门槛，成员必须被许可才能加入网络。Fabric成员管理服务为整个区块链网络提供身份管理、隐私、保密和可审计的服务。成员管理服务通过公钥基础设施PKI和去中心化共识机制使得非许可的区块链变成许可制的区块链。&lt;/p&gt;

&lt;h4 id=&quot;smart-contract&quot;&gt;Smart Contract&lt;/h4&gt;

&lt;p&gt;Fabric的智能合约smart contract称为链码chaincode，是一段代码，它处理网络成员所同意的业务逻辑。和以太坊相比，Fabric链码和底层账本是分开的，升级链码时并不需要迁移账本数据到新链码当中，真正实现了逻辑与数据的分离。&lt;/p&gt;

&lt;p&gt;链码可采用Go、Java、Node.js语言编写。链码被编译成一个独立的应用程序，fabric用Docker容器来运行chaincode，里面的base镜像都是经过签名验证的安全镜像，包括OS层和开发chaincode的语言、runtime和SDK层。一旦chaincode容器被启动，它就会通过gRPC与启动这个chaincode的Peer节点连接。&lt;/p&gt;

&lt;h4 id=&quot;ledger--transcations&quot;&gt;Ledger | Transcations&lt;/h4&gt;

&lt;p&gt;Fabric使用建立在HTTP/2上的P2P协议来管理分布式账本。采取可插拔的方式来根据具体需求来设置共识协议，比如PBFT，Raft，PoW和PoS等。&lt;/p&gt;

&lt;h6 id=&quot;ledger&quot;&gt;Ledger&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/2.jpg&quot; alt=&quot;2.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，账本Ledger主要包含两块：blockchain和state。blockchain就是一系列连在一起的block，用来记录历史交易。state对应账本的当前最新状态，它是一个key-value数据库，Fabric默认采用Level DB, 可以替换成其他的Key-value数据库，如Couch DB。举个例子。我们采用区块链实现一个弹珠交易的系统。我们开发了一个Chaincode,每个弹珠有以下几个属性：Name, owner, color, size.  可以定义一个JSON对象，用name做KEY, JSON对象做Value，存储在Level DB或者CouchDB中。&lt;/p&gt;

&lt;h6 id=&quot;transcation&quot;&gt;transcation&lt;/h6&gt;

&lt;p&gt;Fabric上的transction交易分两种，部署交易和调用交易。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;部署交易  &lt;br /&gt;
  把Chaincode部署到peer节点上并准备好被调用，当一个部署交易成功执行时，Chaincode就被部署到各个peer节点上。好比把一个web service或者EJB部署到应用服务器上的不同实例上。&lt;/li&gt;
  &lt;li&gt;调用交易  &lt;br /&gt;
  客户端应用程序通过Fabric提供的API调用先前已部署好的某个chaincode的某个函数执行交易，并相应地读取和写入KV数据库，返回是否成功或者失败。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;apis-events-sdks&quot;&gt;APIs, Events, SDKs&lt;/h4&gt;

&lt;p&gt;Fabric提供API方便应用开发，对服务端的ChainCode，目前支持用Go、Java或者Node.js开发。对客户端应用，Fabric目前提供Node.js和Java SDK。未来计划提供Python 和Go SDK，Fabric还提供RESTAPI。对于开发者，还可以通过CLI快速去测试chaincode，或者去查询交易状态。在区块链网络里，节点和chaincode会发送events来触发一些监听动作，方便与其他外部系统的集成。&lt;/p&gt;

&lt;h2 id=&quot;执行流程&quot;&gt;执行流程&lt;/h2&gt;

&lt;p&gt;首先理解几个概念&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MSP  &lt;br /&gt;
  MSP(Membership Service Provider), 这类节点主管区块链网络中其他的节点的授权，准入，踢除。通过给不同节点颁发证书的方式，授予不同类型的节点相应的权限。&lt;/li&gt;
  &lt;li&gt;Ordering Node  &lt;br /&gt;
  中文可以称作排序节点。通常在一个网络中至少有一个或多个排序节点，这类节点负责 按照指定的算法，将交易进行排序，并返回给Committing Peer。其并不关心具体的交易细节。&lt;/li&gt;
  &lt;li&gt;Endorsing Peer  &lt;br /&gt;
  这类节点的主要负责接收交易请求，验证这笔交易之后，并做一些预处理之后，并将签名后的数据传回给客户端。&lt;/li&gt;
  &lt;li&gt;Committing Peer  &lt;br /&gt;
  这类节点做是区块链网络中的全节点，它们需要记录完整的区块信息，并且验证每笔交易的正确性，是最终将交易打包进区块链的节点。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;交易的执行路程如下&lt;/p&gt;

&lt;p&gt;1.首先从客户端发起一笔交易提交到Endorsing Peer，进行预处理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/3.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.预处理通过之后，将签名数据，传回给客户端。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/4.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.客户端发起请求，将收到的签名数据传给Ordering Node。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/5.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.Ordering Node对交易进行排序，然后传给Committing Peer。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/6.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.Committing Peer这里将排序好的交易进行验证，并打包，通过指定的共识算法达成一致，形成新的区块。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/7.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.最后将交易结果返回给客户端。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/8.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ps:中间过程的每一步，都伴随着权限的验证。会根据MSP颁发的证书，进行判断。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/xcjing/article/details/78883642&quot;&gt;Hyperledger Fabric 1.0架构及原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/eb33c7288ce7?from=timeline&quot;&gt;超级账本之——Fabric&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 27 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/27/hyperledger-fabric/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/27/hyperledger-fabric/</guid>
        
        <category>超级账本</category>
        
        <category>fabric</category>
        
        
      </item>
    
  </channel>
</rss>

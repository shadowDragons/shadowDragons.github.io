<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>小白</title>
        <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
        <link>http://localhost:4000/</link>
        <description></description>
        <pubDate>Sun, 01 Jul 2018 00:05:22 +0800</pubDate>
        
        <item>
            <title>mysql系列教程 - B+Tree索引</title>
            <link>/2018/06/30/mysql-innodb-index.html</link>
            <guid isPermaLink="true">/2018/06/30/mysql-innodb-index.html</guid>
            <description>&lt;p&gt;了解B+树前，我们先了解下二叉查找树、平衡二叉查找树、B-Tree。&lt;/p&gt;

&lt;h3 id=&quot;二叉查找树&quot;&gt;二叉查找树&lt;/h3&gt;

&lt;p&gt;二叉查找树具有以下性质：左子树的键值小于根的键值，右子树的键值大于根的键值。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于它可以任意构造，所以也可以按照赢下方式构建二叉树。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/2.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们知道，二叉树查找一个节点所需的最大时间取决于树高，所以如果像上图所示进行查找，效率会非常低。所以，要提高查找效率，需要这颗树是平衡的，从而引出了&lt;strong&gt;平衡二叉树&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;平衡二叉树avl树&quot;&gt;平衡二叉树（AVL树）&lt;/h3&gt;

&lt;p&gt;平衡二叉树定义如下：首先符合二叉查找树的定义，其次必须满足任何节点的两个子树高最大差为1。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/3.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;平衡树查询速度的确很快，不过维护一颗平衡二叉树需要一定的开销，需要做1次或多次左旋和右旋来得到插入或者更新后树的平衡性，不过多用于内存结构对象中，所以开销相对较小。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/4.jpg&quot; alt=&quot;4.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-tree&quot;&gt;B-Tree&lt;/h3&gt;

&lt;p&gt;B-Tree是为磁盘等外存储设备设计的一种平衡查找树。因此在讲B-Tree之前先了解下磁盘的相关知识。&lt;/p&gt;

&lt;p&gt;系统从磁盘读取数据到内存时是以磁盘块（block）为基本单位的，位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么。&lt;/p&gt;

&lt;p&gt;InnoDB存储引擎中有页（Page）的概念，页是其磁盘管理的最小单位。InnoDB存储引擎中默认每个页的大小为16KB，可通过参数innodb_page_size将页的大小设置为4K、8K、16K，在MySQL中可通过如下命令查看页的大小：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'innodb_page_size'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而系统一个磁盘块的存储空间往往没有这么大，因此InnoDB每次申请磁盘空间时都会是若干地址连续磁盘块来达到页的大小16KB。InnoDB在把磁盘数据读入到磁盘时会以页为基本单位，在查询数据时如果一个页中的每条数据都能有助于定位数据记录的位置，这将会减少磁盘I/O次数，提高查询效率。&lt;/p&gt;

&lt;p&gt;B-Tree相对于平衡二叉树来说，减少了节点数，每层增加节点数，减少了树高，提高了查找效率。&lt;/p&gt;

&lt;p&gt;如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/5.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图中可以看到每个节点中不仅包含数据的key值，还有data值。由于每个节点存储一个页的数据，而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小，当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I/O次数，进而影响查询效率。&lt;/p&gt;

&lt;h3 id=&quot;btree&quot;&gt;B+Tree&lt;/h3&gt;

&lt;p&gt;B+Tree是在B-Tree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎就是用B+Tree实现其索引结构。&lt;/p&gt;

&lt;p&gt;在B+Tree中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。&lt;/p&gt;

&lt;p&gt;B+Tree相对于B-Tree有几点不同：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;非叶子节点只存储键值信息。&lt;/li&gt;
  &lt;li&gt;所有叶子节点之间都有一个链指针。&lt;/li&gt;
  &lt;li&gt;数据记录都存放在叶子节点中。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;结构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/6.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;聚集索引和辅助索引&quot;&gt;聚集索引和辅助索引&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;聚集索引&lt;/strong&gt;就是按照每张表的主键构造一颗B+树，同时叶子节点中存放的为整张表的行数据，也将聚集索引的叶子节点称为&lt;strong&gt;数据页&lt;/strong&gt;。一张表只能拥有一个聚集索引。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;辅助索引&lt;/strong&gt;的叶子节点并不包含行记录的全部数据，而是存储相应行数据的聚集索引键，即主键。当通过辅助索引来查询数据时，InnoDB存储引擎会遍历辅助索引找到主键，然后再通过主键在聚集索引中找到完整的行记录数据。&lt;/p&gt;

&lt;p&gt;如果是多列索引（联合索引、覆盖索引），它的内部的结果。从本质上来说，联合索引也是一棵B+树，不同的是联合索引的键值的数量不是1，而是大于等于2。接着来讨论两个整型列组成的联合索引，假设两个键值的名称分别为a、b，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-30-mysql-innodb-index/7.jpg&quot; alt=&quot;7.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图可以观察到多个键值的B+树情况，其实和单个键值的B+树并没有什么不同，键值都是排序的，通过叶子节点可以逻辑上顺序地读出所有数据，就上面的例子来说，即（1,1）、（1,2）、（2,1）、（2,4）、（3,1）、（3,2）。其数据按(a,b)的顺序进行了存放。&lt;/p&gt;

&lt;p&gt;对于查询“SELECT * FROM TABLE WHERE a=xxx and b=xxx”，显然是可以使用（a,b）这个联合索引的。对于单个的a列查询“SELECT * FROM TABLE WHERE a=xxx”也是可以使用这个（a,b）这个联合索引的。但对于b列的查询“SELECT * FROM TABLE WHERE b=xxx”则不可以使用这棵B+树索引。可以发现叶子节点上的b值为1、2、1、4、1、2，显然不是排序的，而B+树的特性就是数据是排序的才能使用二分查找法，因此对于b列的查询使用不到（a,b）的索引。&lt;/p&gt;

&lt;p&gt;联合索引的第二个好处是已经对第二个键值进行了排序处理。例如，在很多情况下应用程序都需要查询某个用户的购物情况，并按照时间进行排序，最后取出最近三次的购买记录，这时使用联合索引可以避免多一次的排序操作，因为索引本身在叶子节点已经排序了。&lt;/p&gt;

&lt;p&gt;对于覆盖索引，由于可以从辅助索引中得到查询的记录信息，而不需要再去聚集索引获取记录信息，因此可以减少IO操作。&lt;/p&gt;
</description>
            <pubDate>Sat, 30 Jun 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>mysql系列教程 - innodb锁</title>
            <link>/2018/06/23/mysql-innodb-lock.html</link>
            <guid isPermaLink="true">/2018/06/23/mysql-innodb-lock.html</guid>
            <description>&lt;h3 id=&quot;lock和latch&quot;&gt;lock和latch&lt;/h3&gt;

&lt;p&gt;锁分为两种类型 &lt;strong&gt;lock&lt;/strong&gt; 和 &lt;strong&gt;latch&lt;/strong&gt; ，它们之间的差异如下表所示：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;-&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;lock&lt;/th&gt;
      &lt;th&gt;latch&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对象&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;事务&lt;/td&gt;
      &lt;td&gt;线程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;保护&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;数据库内容&lt;/td&gt;
      &lt;td&gt;内存数据结构&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;持续时间&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;整个事务过程&lt;/td&gt;
      &lt;td&gt;临界资源&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;模式&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;行锁、表锁、意向锁&lt;/td&gt;
      &lt;td&gt;读写锁、互斥量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;死锁&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;通过waits-for graph、time out等机制进行死锁检测和处理&lt;/td&gt;
      &lt;td&gt;无死锁检测与处理机制。仅通过应用程序加锁的顺序保证无死锁情况发生&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;存在于&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Lock Manager 的哈希表中&lt;/td&gt;
      &lt;td&gt;每个数据结构的对象中&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;下面讲到的锁都是针对lock来讲。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;锁类型&quot;&gt;锁类型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;共享锁（S）&lt;/strong&gt; ：允许事务读一行数据。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;排他锁（x）&lt;/strong&gt; ：允许事务删除或更新一行数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下情况会加锁：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;锁类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;加锁情况&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;行S&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;读取行记录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;行X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;增删改行记录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;表S&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;全表扫描&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;表X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;修改表结构&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;对行做增删改操作&lt;/p&gt;

&lt;p&gt;如果事务T1已经获得行r的共享锁，那么事务T2可以立即获得行r的共享锁，这种就叫做&lt;strong&gt;锁兼容&lt;/strong&gt;。如果事务T3想获得行r的排他锁，就必须等待T1、T2释放它们的共享锁，这种就叫做&lt;strong&gt;锁不兼容&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;共享锁与排他锁的兼容性如下表所示：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;-&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;X&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;S&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;S&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;innodb支持多粒度锁定，即可以同时存在行锁和表锁。并支持另外一种锁方式，称为&lt;strong&gt;意向锁&lt;/strong&gt;。因为数据本身也分为以下几层&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;数据库 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 表 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 页 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 行
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以，如果如果对某一层加锁，就需要对其所有上层加意向锁，意向锁也分为意向共享锁（IS），意向排他锁（IX）。  &lt;br /&gt;
对行加共享锁前，会对表加意向共享锁；对行加排他锁前，会对表加意向排他锁。&lt;/p&gt;

&lt;p&gt;表级意向锁和表级锁的兼容性如下表所示：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;-&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;IS&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;IX&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;S&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;X&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IX&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;S&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不兼容&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;例如对记录r加X锁之前，必须对表1加上IX锁，如果已经有事务对表1进行了S表锁，由于不兼容，需要等待表锁操作完成。&lt;/p&gt;

&lt;h3 id=&quot;查看锁&quot;&gt;查看锁&lt;/h3&gt;

&lt;p&gt;innodb1.0版本之前，用户只能通过以下命令查看当前数据库锁的请求。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROCESSLIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INNODB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从innodb1.0版本开始，在INFORMATION_SCHEMA架构中添加了表INNODB_TRX、INNODB_LOCKS、INNODB_LOCK_WAITS。通过这3张表，用户可以更简单的监控当前事务并分析可能存在的锁问题。&lt;/p&gt;

&lt;p&gt;INNODB_TRX表由以下字段组成：&lt;/p&gt;

&lt;p&gt;| 字段 | 说明 |
| :- | :- |
| trx_id | InnoDB存储引擎内部唯一的事务ID
| trx_state | 当前事务的状态。
| trx_started | 事务的开始时间。
| trx_requested_lock_id | 等待事务的锁ID。如trx_state的状态为LOCK WAIT,那么该值代表当前的等待之前事务占用锁资源的ID.若trx_state不是LOCK WAIT,则该值为NULL。
| trx_wait_started | 事务等待开始的时间。
| trx_weight | 事务的权重，反映了一个事务修改和锁住的行数。在InnoDB存储引擎中，当发生死锁需要回滚时，InnoDB存储会选 
择该值最小的进行回滚。
| trx_mysql_thread_id | Mysql中的线程ID,SHOW PROCESSLIST显示的结果。
| trx_query | 事务运行的sql语句。&lt;/p&gt;

&lt;p&gt;实际例子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-23-mysql-innodb-lock/1.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过state可以观察到trx_id为730FEE的事务当前正在运行，而trx_id为731F4的事务处于LOCK WAIT状态，且运行的SQL语句是select * from parent lock in shar mode。该表只是显示了当前运行的innoDB事务，并不能准确的判断锁的一些情况。如果需要查看锁，还需要访问 INNODB_LOCKS。&lt;/p&gt;

&lt;p&gt;INNODB_LOCKS表由如下字段组成：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;字段&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;锁的ID。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_trx_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;事务ID。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_mode&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;锁的模式。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_type&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;锁的类型，表锁还是行锁。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_table&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;要加锁的表。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_index&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;锁的索引。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_space&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;InnoDB存储引擎表空间的ID号。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_page&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;被锁住的页的数量。若是表锁，则该值为NULL。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_rec&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;被锁住的行的数量。若是表锁，则该值为NULL。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;lock_data&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;被锁住的行的主键值。当是表锁，该值为NULL。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;按照上面的例子，继续查看表INNODB_LOCKS。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-23-mysql-innodb-lock/2.jpg&quot; alt=&quot;2.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用户可以清楚的看到当前锁的信息，trx_id为730FEE的事务想表parent加了一个X的行锁。ID为7311F4的事务想表parent申请了一个S的行锁。lock_data都是1，申请相同的资源，因此会有等待。这样可以解析INNODB_TRX为什么一个事务的trx_state是RUNNING另一个是LOCK WAITLE&lt;/p&gt;

&lt;p&gt;另外需要注意的是，发现lock_data并不是可信的值。例如当用户运行一个范围查找时，lock_data可能只返回第一行的主键值。与此同时，如果当前资源被锁住了。若锁住的页因为InnoDB存储引擎缓冲池的容量，导致页从缓冲池中被刷出，则查看INNODB_LOCKS表时，该值同样显示为NULL。即InnoDB存储引擎不会从磁盘进行再一次的查找&lt;/p&gt;

&lt;p&gt;在通过INNODB_LOCKS馋看了每张表上锁的情况后，用户可以判断由此引发的等待情况。当事务较小时，用户就可以人为地、直观地进行判断了。但是当事务量非常大，其中锁和等待也时常发生。这个时候就不容易判断。但是可以通过INNODB_LOCK_WAITS可以很直观的反应出当前事务的等待。&lt;/p&gt;

&lt;p&gt;INNODB_LOCK_WAIT表由以下字段组成：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;字段&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;requesting_trx_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;申请锁资源的事务ID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;requesting_lock_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;申请的锁的ID。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;blocking_trx_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;阻塞的事务的ID。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;blocking_lock_id&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;阻塞的事务的ID。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;按照上面的例子，运行如下查询：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-23-mysql-innodb-lock/3.jpg&quot; alt=&quot;3.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过上述的SQL语句，用户可以清楚的看到哪个事务阻塞了另一个事务。当然这只是给出了事务和锁ID，如果需要，用户可以根据表INNODB_TRX、INNODB_LOCKS、INNODB_LOCK_WAITS得到更为直观的详细信息。例如，用户可以执行如下联合查询&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-06-23-mysql-innodb-lock/4.jpg&quot; alt=&quot;4.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;一致性非锁定读&quot;&gt;一致性非锁定读&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;一致性的非锁定读&lt;/strong&gt;是指innodb存储引擎通过行多版本控制的方式来读取当前执行时间数据库中的行数据。&lt;/p&gt;

&lt;p&gt;就是说如果读取的行已被加了X锁，这时不需要等待X锁的释放，而是读取行记录的快照数据（即该行的之前版本的数据），该实现是通过undo段来实现，而undo本身是用来在事务中回滚数据，因此快照数据本身是没有额外的消耗的。&lt;strong&gt;读取快照是不需要上锁的&lt;/strong&gt;，因为没有事务需要对历史数据进行修改操作。&lt;/p&gt;

&lt;p&gt;由于读取的行数据必须不能被其他事务修改，所以对使用场景有要求，在事务隔离级别READ COMMIT（提交读）和REPEATABLE READ（可重复读，默认）下，innodb使用一致性非锁定读。  &lt;br /&gt;
在READ COMMIT隔离级别下，对于快照数据，一致性非锁定读总是读取被锁定行的最新一份快照。  &lt;br /&gt;
在REPEATABLE READ隔离级别下，对于快照数据，一致性非锁定读总是读取事务开始时的行数据版本。&lt;/p&gt;

&lt;h3 id=&quot;自增长与锁&quot;&gt;自增长与锁&lt;/h3&gt;

&lt;p&gt;当对含有自增长的计数器的表进行插入操作时，这个计数器会被初始化，执行如下的语句来得到计数器的值：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_inc_col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;插入操作会根据这个自增长的计数器值加1赋予自增长列。这个实现方式称作为AUTO-INC Locking。这种锁采用一种特殊的表锁机制，为了提高插入的性能，锁不是在一个事务完成后才释放，而是在完成对自增长值插入的SQL语句后立即释放。&lt;/p&gt;

&lt;p&gt;虽然AUTO-INC Locking从一定程度上提高了并发插入的效率，但还是存在一些性能问题。首先，对于有自增长值的列的并发插入性能较差，事务必须等待前一个插入的完成。其次，对于INSERT—-SELECT的大数据量的插入会影响插入的性能，因为另一个事务中的插入会被阻塞。&lt;/p&gt;

&lt;p&gt;从MySQL5.1.22版本开始，InnoDB存储引擎引擎中提供了一种轻量级互斥量的自增长实现机制，这种机制大大提高了自增长值插入的性能。并且从该版本开始，InnoDB存储引擎提供了一个参数innodb_autoinc_lock_mode来控制自增长的模式，该参数的默认值为1.
在继续讨论新的自增长方式实现方式之前，需要对自增长的插入进行分类，如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;插入类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;insert-like&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;指所有的插入语句，如insert，replace，insert—select,replace—select,load data等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;simple inserts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;指能在插入之前就确定插入行数的语句。这些语句包含insert、replace等，需要注意的是：simple inserts不包含insert—on duplicater key update这类SQL语句&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;bulk inserts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;指在插入之前不能确定得到插入行数的语句，如insert—select，replace–select，load data&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;mixed-mode inserts&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;指插入中有一部分的值是自增长的，有一部分是确定的，如INSERT INTO t1(c1,c2) VALAUES (1,’a’),(null,’b’),(5,’e’); 或者指 INSERT … ON DUPLICATE KEY UPDATE 这类sql语句。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;接着来分析参数innodb_autoinc_lock_mode，如下表所示：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;innodb_autoinc_lock_mode&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;这是MySQL5.1.22版本之前自增长的实现方式，即通过表锁的AUTO-INC Locking方式，因为有了新的自增长实现方式，0这个选项不应该是新版用户的首选项&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;这是该参数的默认值。对于simple inserts，该值会用互斥量去对内存中的计数器进行累加的操作，对于bulk inserts，还是使用传统表锁的AUTO-INC Locking方式。在这种配置下，如果不考虑回滚操作，对于自增长列的增长还是连续的，并且在这种方式下，statement-based方式的replication还是能很好地工作。需要注意的是，如果已经使用AUTO-INC Locking方式去产生自增长的值，而这时需要进行simple inserts的操作时，还是需要等待AUTO-INC Locking的释放&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;在这个模式下，对于所有的insert-like自增长的产生都是通过互斥量，而不是通过AUTO-INC Locking的方式，显然这时性能最高的方式。然而会带来一定的问题。因为并发插入的存在，在每次插入时，自增长的值可能不是连续的。最重要的是，基于Statment-base replication会出现问题。因此，使用这个模式，任何时候都应该使用row-base replication，这样才能保证最大的并发性能及replication主从数据的一致。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;外键和锁&quot;&gt;外键和锁&lt;/h3&gt;

&lt;p&gt;对于外键值的插入或更新，首先需要查询父表中的记录，即select父表，但是对父表的select操作，不是使用一致性非锁定锁，因为这样会发生数据不一致的问题，因此这时使用的是select … lock in share mode方式，即主动对父表加一个S锁，如果这时父表上已经加了X锁，子表的操作会被阻塞。&lt;/p&gt;
</description>
            <pubDate>Sat, 23 Jun 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric - 架构&amp;执行流程</title>
            <link>/2018/05/27/hyperledger-fabric.html</link>
            <guid isPermaLink="true">/2018/05/27/hyperledger-fabric.html</guid>
            <description>&lt;p&gt;本文简单讲述fabric架构&amp;amp;执行流程，帮助同学快速理解&amp;amp;入门。&lt;/p&gt;

&lt;h1 id=&quot;架构&quot;&gt;架构&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/1.jpeg&quot; alt=&quot;1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;identity&quot;&gt;Identity&lt;/h2&gt;

&lt;p&gt;Identity，也就是身份管理，Fabric是目前为止在设计上最贴近联盟链思想的区块链。联盟链考虑到商业应用对安全、隐私、监管、审计、性能的需求，提高准入门槛，成员必须被许可才能加入网络。Fabric成员管理服务为整个区块链网络提供身份管理、隐私、保密和可审计的服务。成员管理服务通过公钥基础设施PKI和去中心化共识机制使得非许可的区块链变成许可制的区块链。&lt;/p&gt;

&lt;h2 id=&quot;smart-contract&quot;&gt;Smart Contract&lt;/h2&gt;

&lt;p&gt;Fabric的智能合约smart contract称为链码chaincode，是一段代码，它处理网络成员所同意的业务逻辑。和以太坊相比，Fabric链码和底层账本是分开的，升级链码时并不需要迁移账本数据到新链码当中，真正实现了逻辑与数据的分离。&lt;/p&gt;

&lt;p&gt;链码可采用Go、Java、Node.js语言编写。链码被编译成一个独立的应用程序，fabric用Docker容器来运行chaincode，里面的base镜像都是经过签名验证的安全镜像，包括OS层和开发chaincode的语言、runtime和SDK层。一旦chaincode容器被启动，它就会通过gRPC与启动这个chaincode的Peer节点连接。&lt;/p&gt;

&lt;h2 id=&quot;ledger--transcations&quot;&gt;Ledger | Transcations&lt;/h2&gt;

&lt;p&gt;Fabric使用建立在HTTP/2上的P2P协议来管理分布式账本。采取可插拔的方式来根据具体需求来设置共识协议，比如PBFT，Raft，PoW和PoS等。&lt;/p&gt;

&lt;h3 id=&quot;ledger&quot;&gt;Ledger&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/2.jpg&quot; alt=&quot;2.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，账本Ledger主要包含两块：blockchain和state。blockchain就是一系列连在一起的block，用来记录历史交易。state对应账本的当前最新状态，它是一个key-value数据库，Fabric默认采用Level DB, 可以替换成其他的Key-value数据库，如Couch DB。举个例子。我们采用区块链实现一个弹珠交易的系统。我们开发了一个Chaincode,每个弹珠有以下几个属性：Name, owner, color, size.  可以定义一个JSON对象，用name做KEY, JSON对象做Value，存储在Level DB或者CouchDB中。&lt;/p&gt;

&lt;h3 id=&quot;transcation&quot;&gt;transcation&lt;/h3&gt;

&lt;p&gt;Fabric上的transction交易分两种，部署交易和调用交易。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;部署交易  &lt;br /&gt;
  把Chaincode部署到peer节点上并准备好被调用，当一个部署交易成功执行时，Chaincode就被部署到各个peer节点上。好比把一个web service或者EJB部署到应用服务器上的不同实例上。&lt;/li&gt;
  &lt;li&gt;调用交易  &lt;br /&gt;
  客户端应用程序通过Fabric提供的API调用先前已部署好的某个chaincode的某个函数执行交易，并相应地读取和写入KV数据库，返回是否成功或者失败。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apis-events-sdks&quot;&gt;APIs, Events, SDKs&lt;/h3&gt;

&lt;p&gt;Fabric提供API方便应用开发，对服务端的ChainCode，目前支持用Go、Java或者Node.js开发。对客户端应用，Fabric目前提供Node.js和Java SDK。未来计划提供Python 和Go SDK，Fabric还提供RESTAPI。对于开发者，还可以通过CLI快速去测试chaincode，或者去查询交易状态。在区块链网络里，节点和chaincode会发送events来触发一些监听动作，方便与其他外部系统的集成。&lt;/p&gt;

&lt;h1 id=&quot;执行流程&quot;&gt;执行流程&lt;/h1&gt;

&lt;p&gt;首先理解几个概念&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MSP  &lt;br /&gt;
  MSP(Membership Service Provider), 这类节点主管区块链网络中其他的节点的授权，准入，踢除。通过给不同节点颁发证书的方式，授予不同类型的节点相应的权限。&lt;/li&gt;
  &lt;li&gt;Ordering Node  &lt;br /&gt;
  中文可以称作排序节点。通常在一个网络中至少有一个或多个排序节点，这类节点负责 按照指定的算法，将交易进行排序，并返回给Committing Peer。其并不关心具体的交易细节。&lt;/li&gt;
  &lt;li&gt;Endorsing Peer  &lt;br /&gt;
  这类节点的主要负责接收交易请求，验证这笔交易之后，并做一些预处理之后，并将签名后的数据传回给客户端。&lt;/li&gt;
  &lt;li&gt;Committing Peer  &lt;br /&gt;
  这类节点做是区块链网络中的全节点，它们需要记录完整的区块信息，并且验证每笔交易的正确性，是最终将交易打包进区块链的节点。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;交易的执行路程如下&lt;/p&gt;

&lt;p&gt;1.首先从客户端发起一笔交易提交到Endorsing Peer，进行预处理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/3.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.预处理通过之后，将签名数据，传回给客户端。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/4.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.客户端发起请求，将收到的签名数据传给Ordering Node。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/5.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.Ordering Node对交易进行排序，然后传给Committing Peer。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/6.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.Committing Peer这里将排序好的交易进行验证，并打包，通过指定的共识算法达成一致，形成新的区块。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/7.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.最后将交易结果返回给客户端。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-27-hyperledger-fabric/8.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ps:中间过程的每一步，都伴随着权限的验证。会根据MSP颁发的证书，进行判断。&lt;/p&gt;

&lt;h1 id=&quot;参考&quot;&gt;参考&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/xcjing/article/details/78883642&quot;&gt;Hyperledger Fabric 1.0架构及原理&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/eb33c7288ce7?from=timeline&quot;&gt;超级账本之——Fabric&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Sun, 27 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric - Node.js SDK</title>
            <link>/2018/05/27/hyperledger-fabric-sdk.html</link>
            <guid isPermaLink="true">/2018/05/27/hyperledger-fabric-sdk.html</guid>
            <description>&lt;p&gt;这里使用官方示例。&lt;/p&gt;

&lt;p&gt;如果之前没有部署过环境，先按照&lt;a href=&quot;/2018/05/13/hyperledger-fabric-1.html&quot;&gt;fabric入门（一）安装&lt;/a&gt;进行环境部署。&lt;/p&gt;

&lt;h1 id=&quot;安装&quot;&gt;安装&lt;/h1&gt;

&lt;p&gt;首先进入示例目录&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fabric-samples/balance-transfer/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有两种方法可以运行示例：&lt;/p&gt;

&lt;h2 id=&quot;方法一推荐&quot;&gt;方法一（推荐）&lt;/h2&gt;

&lt;p&gt;1.通过docker启动网络&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; artifacts/docker-compose.yaml up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.安装&lt;em&gt;fabric-client&lt;/em&gt;和&lt;em&gt;fabric-ca-client&lt;/em&gt;的node模块&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.启动node&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4000 node app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;方法二&quot;&gt;方法二&lt;/h2&gt;

&lt;p&gt;直接执行&lt;em&gt;runApp.sh&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fabric-samples/balance-transfer
./runApp.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个方法你必须安装&lt;strong&gt;jq&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;网络配置&quot;&gt;网络配置&lt;/h1&gt;

&lt;p&gt;由于我们是使用docker，所以我们需要修改项目的网络配置。&lt;/p&gt;

&lt;p&gt;修改&lt;em&gt;network-config.yaml&lt;/em&gt;，把里面的localhost修改为docker实际ip地址，这里我的IP为192.168.99.100&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The network connection profile provides client applications the information about the target&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# blockchain network that are necessary for the applications to interact with it. These are all&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# knowledge that must be acquired from out-of-band sources. This file provides such a source.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
name: &lt;span class=&quot;s2&quot;&gt;&quot;balance-transfer&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Any properties with an &quot;x-&quot; prefix will be treated as application-specific, exactly like how naming&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# them for the applications to process. This is a mechanism for different components of an application&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# to exchange information that are not part of the standard schema described below. In particular,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the &quot;x-type&quot; property with the &quot;hlfv1&quot; value example below is used by Hyperledger Composer to&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
x-type: &lt;span class=&quot;s2&quot;&gt;&quot;hlfv1&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Describe what the target network is/does.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
description: &lt;span class=&quot;s2&quot;&gt;&quot;Balance Transfer Network&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
version: &lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The client section will be added on a per org basis see org1.yaml and org2.yaml&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#client:&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [Optional]. But most apps would have this section so that channel objects can be constructed&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# based on the content below. If an app is creating channels, then it likely will not need this&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# section.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
channels:
  &lt;span class=&quot;c&quot;&gt;# name of the channel&lt;/span&gt;
  mychannel:
    &lt;span class=&quot;c&quot;&gt;# Required. list of orderers designated by the application to use for transactions on this&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# channel. This list can be a result of access control (&quot;org1&quot; can only access &quot;ordererA&quot;), or&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# operational decisions to share loads from applications among the orderers.  The values must&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# be &quot;names&quot; of orgs defined under &quot;organizations/peers&quot;&lt;/span&gt;
    orderers:
      - orderer.example.com

    &lt;span class=&quot;c&quot;&gt;# Required. list of peers from participating orgs&lt;/span&gt;
    peers:
      peer0.org1.example.com:
        &lt;span class=&quot;c&quot;&gt;# [Optional]. will this peer be sent transaction proposals for endorsement? The peer must&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# have the chaincode installed. The app can also use this property to decide which peers&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# to send the chaincode install request. Default: true&lt;/span&gt;
        endorsingPeer: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# [Optional]. will this peer be sent query proposals? The peer must have the chaincode&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# installed. The app can also use this property to decide which peers to send the&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# chaincode install request. Default: true&lt;/span&gt;
        chaincodeQuery: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# [Optional]. will this peer be sent query proposals that do not require chaincodes, like&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# queryBlock(), queryTransaction(), etc. Default: true&lt;/span&gt;
        ledgerQuery: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# [Optional]. will this peer be the target of the SDK's listener registration? All peers can&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# produce events but the app typically only needs to connect to one to listen to events.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Default: true&lt;/span&gt;
        eventSource: &lt;span class=&quot;nb&quot;&gt;true

      &lt;/span&gt;peer1.org1.example.com:
        endorsingPeer: &lt;span class=&quot;nb&quot;&gt;false
        &lt;/span&gt;chaincodeQuery: &lt;span class=&quot;nb&quot;&gt;true
        &lt;/span&gt;ledgerQuery: &lt;span class=&quot;nb&quot;&gt;true
        &lt;/span&gt;eventSource: &lt;span class=&quot;nb&quot;&gt;false

      &lt;/span&gt;peer0.org2.example.com:
        endorsingPeer: &lt;span class=&quot;nb&quot;&gt;true
        &lt;/span&gt;chaincodeQuery: &lt;span class=&quot;nb&quot;&gt;true
        &lt;/span&gt;ledgerQuery: &lt;span class=&quot;nb&quot;&gt;true
        &lt;/span&gt;eventSource: &lt;span class=&quot;nb&quot;&gt;true

      &lt;/span&gt;peer1.org2.example.com:
        endorsingPeer: &lt;span class=&quot;nb&quot;&gt;false
        &lt;/span&gt;chaincodeQuery: &lt;span class=&quot;nb&quot;&gt;true
        &lt;/span&gt;ledgerQuery: &lt;span class=&quot;nb&quot;&gt;true
        &lt;/span&gt;eventSource: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# [Optional]. what chaincodes are expected to exist on this channel? The application can use&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# this information to validate that the target peers are in the expected state by comparing&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# this list with the query results of getInstalledChaincodes() and getInstantiatedChaincodes()&lt;/span&gt;
    chaincodes:
      &lt;span class=&quot;c&quot;&gt;# the format follows the &quot;cannonical name&quot; of chaincodes by fabric code&lt;/span&gt;
      - mycc:v0

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# list of participating organizations in this network&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
organizations:
  Org1:
    mspid: Org1MSP

    peers:
      - peer0.org1.example.com
      - peer1.org1.example.com

    &lt;span class=&quot;c&quot;&gt;# [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# network. Typically certificates provisioning is done in a separate process outside of the&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# dynamic certificate management (enroll, revoke, re-enroll). The following section is only for&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Fabric-CA servers.&lt;/span&gt;
    certificateAuthorities:
      - ca-org1

    &lt;span class=&quot;c&quot;&gt;# [Optional]. If the application is going to make requests that are reserved to organization&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# administrators, including creating/updating channels, installing/instantiating chaincodes, it&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# must have access to the admin identity represented by the private key and signing certificate.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Both properties can be the PEM string or local path to the PEM file. Note that this is mainly for&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# convenience in development mode, production systems should not expose sensitive information&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# this way. The SDK should allow applications to set the org admin identity via APIs, and only use&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# this route as an alternative when it exists.&lt;/span&gt;
    adminPrivateKey:
      path: artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/5890f0061619c06fb29dea8cb304edecc020fe63f41a6db109f1e227cc1cb2a8_sk
    signedCert:
      path: artifacts/channel/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem

  &lt;span class=&quot;c&quot;&gt;# the profile will contain public information about organizations other than the one it belongs to.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# These are necessary information to make transaction lifecycles work, including MSP IDs and&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# peers with a public URL to send transaction proposals. The file will not contain private&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# information reserved for members of the organization, such as admin key and certificate,&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# fabric-ca registrar enroll ID and secret, etc.&lt;/span&gt;
  Org2:
    mspid: Org2MSP
    peers:
      - peer0.org2.example.com
      - peer1.org2.example.com
    certificateAuthorities:
      - ca-org2
    adminPrivateKey:
      path: artifacts/channel/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/keystore/1995b11d6573ed3be52fcd7a5fa477bc0f183e1f5f398c8281d0ce7c2c75a076_sk
    signedCert:
      path: artifacts/channel/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/signcerts/Admin@org2.example.com-cert.pem

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# List of orderers to send transaction and channel create/update requests to. For the time&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# being only one orderer is needed. If more than one is defined, which one get used by the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
orderers:
  orderer.example.com:
    url: grpcs://192.168.99.100:7050

    &lt;span class=&quot;c&quot;&gt;# these are standard properties defined by the gRPC library&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# they will be passed in as-is to gRPC client constructor&lt;/span&gt;
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      grpc-max-send-message-length: 15

    tlsCACerts:
      path: artifacts/channel/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# List of peers to send various requests to, including endorsement, query&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and event listener registration.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
peers:
  peer0.org1.example.com:
    &lt;span class=&quot;c&quot;&gt;# this URL is used to send endorsement and query requests&lt;/span&gt;
    url: grpcs://192.168.99.100:7051

    &lt;span class=&quot;c&quot;&gt;# this URL is used to connect the EventHub and registering event listeners&lt;/span&gt;
    eventUrl: grpcs://192.168.99.100:7053

    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt

  peer1.org1.example.com:
    url: grpcs://192.168.99.100:7056
    eventUrl: grpcs://192.168.99.100:7058
    grpcOptions:
      ssl-target-name-override: peer1.org1.example.com
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt

  peer0.org2.example.com:
    url: grpcs://192.168.99.100:8051
    eventUrl: grpcs://192.168.99.100:8053
    grpcOptions:
      ssl-target-name-override: peer0.org2.example.com
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt

  peer1.org2.example.com:
    url: grpcs://192.168.99.100:8056
    eventUrl: grpcs://192.168.99.100:8058
    grpcOptions:
      ssl-target-name-override: peer1.org2.example.com
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# certificate management to be done via REST APIs. Application may choose to use a standard&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
certificateAuthorities:
  ca-org1:
    url: https://192.168.99.100:7054
    &lt;span class=&quot;c&quot;&gt;# the properties specified under this object are passed to the 'http' client verbatim when&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# making the request to the Fabric-CA server&lt;/span&gt;
    httpOptions:
      verify: &lt;span class=&quot;nb&quot;&gt;false
    &lt;/span&gt;tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem

    &lt;span class=&quot;c&quot;&gt;# Fabric-CA supports dynamic user enrollment via REST APIs. A &quot;root&quot; user, a.k.a registrar, is&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# needed to enroll and invoke new users.&lt;/span&gt;
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    &lt;span class=&quot;c&quot;&gt;# [Optional] The optional name of the CA.&lt;/span&gt;
    caName: ca-org1

  ca-org2:
    url: https://192.168.99.100:8054
    httpOptions:
      verify: &lt;span class=&quot;nb&quot;&gt;false
    &lt;/span&gt;tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org2.example.com/ca/ca.org2.example.com-cert.pem
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    &lt;span class=&quot;c&quot;&gt;# [Optional] The optional name of the CA.&lt;/span&gt;
    caName: ca-org2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后重新启动你的node服务。&lt;/p&gt;

&lt;h1 id=&quot;测试&quot;&gt;测试&lt;/h1&gt;

&lt;p&gt;注册和enroll新的user在org1&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST http://localhost:4000/users &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/x-www-form-urlencoded&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'username=Jim&amp;amp;orgName=org1'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;secret&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;RaxhMgevgJcm&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Jim enrolled Successfully&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;token&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建channel&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  http://localhost:4000/channels &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
	&quot;channelName&quot;:&quot;mychannel&quot;,
	&quot;channelConfigPath&quot;:&quot;../artifacts/channel/mychannel.tx&quot;
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ps: authorization Bearer后跟之前的enroll的token&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;org1加入channel&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  http://localhost:4000/channels/mychannel/peers &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
	&quot;peers&quot;: [&quot;peer1&quot;,&quot;peer2&quot;]
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装链码&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  http://localhost:4000/chaincodes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
	&quot;peers&quot;: [&quot;peer1&quot;,&quot;peer2&quot;],
	&quot;chaincodeName&quot;:&quot;mycc&quot;,
	&quot;chaincodePath&quot;:&quot;github.com/example_cc&quot;,
	&quot;chaincodeVersion&quot;:&quot;v0&quot;
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;初始化链码&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  http://localhost:4000/channels/mychannel/chaincodes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
	&quot;chaincodeName&quot;:&quot;mycc&quot;,
	&quot;chaincodeVersion&quot;:&quot;v0&quot;,
	&quot;args&quot;:[&quot;a&quot;,&quot;100&quot;,&quot;b&quot;,&quot;200&quot;]
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;交易&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  http://localhost:4000/channels/mychannel/chaincodes/mycc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
	&quot;fcn&quot;:&quot;move&quot;,
	&quot;args&quot;:[&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:4000/channels/mychannel/chaincodes/mycc?peer=peer1&amp;amp;fcn=query&amp;amp;args=%5B%22a%22%5D&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据区块号码查询&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:4000/channels/mychannel/blocks/1?peer=peer1&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据transactionID查询交易&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET http://localhost:4000/channels/mychannel/transactions/TRX_ID?peer&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ps：这里的后的字符为invoke返回的transactionID&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;获取ChainInfo&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:4000/channels/mychannel?peer=peer1&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取已安装的chaincode&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:4000/chaincodes?peer=peer1&amp;amp;type=installed&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取已实例化的chaincode&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:4000/chaincodes?peer=peer1&amp;amp;type=instantiated&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取channels&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:4000/channels?peer=peer1&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTQ4NjU1OTEsInVzZXJuYW1lIjoiSmltIiwib3JnTmFtZSI6Im9yZzEiLCJpYXQiOjE0OTQ4NjE5OTF9.yWaJhFDuTvMQRaZIqg20Is5t-JJ_1BP58yrNLOKxtNI&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Sun, 27 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric - chaincode(链码)</title>
            <link>/2018/05/27/hyperledger-fabric-chaincode.html</link>
            <guid isPermaLink="true">/2018/05/27/hyperledger-fabric-chaincode.html</guid>
            <description>&lt;p&gt;Chaincode是一段由Go语言编写（支持其他编程语言，如Java），并能实现预定义接口的程序。Chaincode运行在一个受保护的Docker容器当中，与背书节点的运行互相隔离。Chaincode可通过应用提交的交易对账本状态初始化并进行管理。&lt;/p&gt;

&lt;p&gt;一段chaincode通常处理由网络中的成员一致认可的业务逻辑，故我们很可能用“智能合约”来代指chaincode。一段chiancode创建的（账本）状态是与其他chaincode互相隔离的，故而不能被其他chaincode直接访问。不过，如果是在相同的网络中，一段chiancode在获取相应许可后则可以调用其他chiancode来访问它的账本。&lt;/p&gt;

&lt;p&gt;每个chaincode程序都必须实现 chiancode接口 ，接口中的方法会在响应传来的交易时被调用。特别地，Init（初始化）方法会在chaincode接收到instantiate（实例化）或者upgrade(升级)交易时被调用，进而使得chaincode顺利执行必要的初始化操作，包括初始化应用的状态；Invoke（调用）方法会在响应invoke（调用）交易时被调用以执行交易。&lt;/p&gt;

&lt;h1 id=&quot;开发&quot;&gt;开发&lt;/h1&gt;

&lt;h2 id=&quot;存放位置&quot;&gt;存放位置&lt;/h2&gt;

&lt;p&gt;你需要为chaincode应用创建一个位于$GOPATH/src/目录下的子目录。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/sacc &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/sacc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;编写代码&quot;&gt;编写代码&lt;/h2&gt;

&lt;p&gt;这里我们写一个简单的资产管理chaincode&lt;/p&gt;

&lt;p&gt;1.创建文件&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;sacc.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.引入必要依赖&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

    &lt;span class=&quot;s2&quot;&gt;&quot;github.com/hyperledger/fabric/core/chaincode/shim&quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;github.com/hyperledger/fabric/protos/peer&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.初始化&lt;/p&gt;

&lt;p&gt;实现&lt;em&gt;Init&lt;/em&gt;函数&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Init is called during chaincode instantiation to initialize any data.
func &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;SimpleAsset&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Init&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; peer.Response &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面，我们将调用&lt;em&gt;ChaincodeStubInterface.GetStringArgs&lt;/em&gt;函数来获取Init所需的参数，并进行有效性检查。在我们的例子中，我们希望传入参数是一组键值对。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Init is called during chaincode instantiation to initialize any
// data. Note that chaincode upgrade also calls this &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;to reset
// or to migrate data, so be careful to avoid a scenario where you
// inadvertently clobber your ledger’s data!
func &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;SimpleAsset&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Init&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; peer.Response &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  // Get the args from the transaction proposal
  args :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.GetStringArgs&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;len&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; 2 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;shim.Error&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Incorrect arguments. Expecting a key and a value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，既然我们已经确定调用有效，那么我们就将初始状态放心地存入账本。为了实现该目标，我们将调用ChaincodeStubInterface并以键值为参数传入。如果一切正常，那么我们会收到表明初始化成功的peer.Response返回对象。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Init is called during chaincode instantiation to initialize any
// data. Note that chaincode upgrade also calls this &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;to reset
// or to migrate data, so be careful to avoid a scenario where you
// inadvertently clobber your ledger’s data!
func &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;SimpleAsset&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Init&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; peer.Response &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  // Get the args from the transaction proposal
  args :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.GetStringArgs&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;len&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; 2 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;shim.Error&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Incorrect arguments. Expecting a key and a value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  // Set up any variables or assets here by calling stub.PutState&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

  // We store the key and the value on the ledger
  err :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.PutState&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args[0], &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;byte&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args[1]&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;err &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; nil &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;shim.Error&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fmt.Sprintf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Failed to create asset: %s&quot;&lt;/span&gt;, args[0]&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;shim.Success&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nil&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.调用chaincode&lt;/p&gt;

&lt;p&gt;首先，添加&lt;em&gt;Invoke&lt;/em&gt;函数签名。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Invoke is called per transaction on the chaincode. Each transaction is
// either a &lt;span class=&quot;s1&quot;&gt;'get'&lt;/span&gt; or a &lt;span class=&quot;s1&quot;&gt;'set'&lt;/span&gt; on the asset created by Init &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; The &lt;span class=&quot;s1&quot;&gt;'set'&lt;/span&gt;
// method may create a new asset by specifying a new key-value pair.
func &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;SimpleAsset&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Invoke&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; peer.Response &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就如上述Init函数一样，我们需要调用ChaincodeStubInterface来获取参数。Invoke函数所需的传入参数正是应用想要调用的chaincode的名称。在我们的例子中，我们的应用只有两个简单的功能函数：set和get;前者允许对资产的数值进行设定;后者允许获取当前资产的状态。我们先调用ChaincodeStubInterface.GetFunctionAndParameters来获取chaincode应用所需的函数名与参数。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Invoke is called per transaction on the chaincode. Each transaction is
// either a &lt;span class=&quot;s1&quot;&gt;'get'&lt;/span&gt; or a &lt;span class=&quot;s1&quot;&gt;'set'&lt;/span&gt; on the asset created by Init &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; The Set
// method may create a new asset by specifying a new key-value pair.
func &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;SimpleAsset&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Invoke&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; peer.Response &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    // Extract the &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;and args from the transaction proposal
    fn, args :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.GetFunctionAndParameters&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面，我们将使set与get这两个函数名正式生效，并调用这些chaincode应用函数，经由shim.Success或shim.Error函数返回一个合理的响应。这两个shim成员函数可以将响应序列化为gRPC protobuf消息。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Invoke is called per transaction on the chaincode. Each transaction is
// either a &lt;span class=&quot;s1&quot;&gt;'get'&lt;/span&gt; or a &lt;span class=&quot;s1&quot;&gt;'set'&lt;/span&gt; on the asset created by Init &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; The Set
// method may create a new asset by specifying a new key-value pair.
func &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;SimpleAsset&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Invoke&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; peer.Response &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    // Extract the &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;and args from the transaction proposal
    fn, args :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.GetFunctionAndParameters&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    var result string
    var err error
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;fn &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;set&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            result, err &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub, args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            result, err &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; get&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub, args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;err &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; nil &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;shim.Error&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;err.Error&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    // Return the result as success payload
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;shim.Success&lt;span class=&quot;o&quot;&gt;([]&lt;/span&gt;byte&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.调用chaincode应用&lt;/p&gt;

&lt;p&gt;如上文所述，我们的chaincode应用实现了两个函数，并可以被Invoke函数调用。下面我们就来真正实现这些函数。注意，就像上文一样，我们调用chaincode shim API中的ChaincodeStubInterface.PutState和ChaincodeStubInterface.GetState函数来访问账本。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Set stores the asset &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;both key and value&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; on the ledger. If the key exists,
// it will override the value with the new one
func &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface, args &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string, error&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;len&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; 2 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;, fmt.Errorf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Incorrect arguments. Expecting a key and a value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    err :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.PutState&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args[0], &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;byte&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args[1]&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;err &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; nil &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;, fmt.Errorf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Failed to set asset: %s&quot;&lt;/span&gt;, args[0]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;args[1], nil
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

// Get returns the value of the specified asset key
func get&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface, args &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string, error&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;len&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;, fmt.Errorf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Incorrect arguments. Expecting a key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    value, err :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.GetState&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args[0]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;err &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; nil &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;, fmt.Errorf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Failed to get asset: %s with error: %s&quot;&lt;/span&gt;, args[0], err&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;value &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; nil &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;, fmt.Errorf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Asset not found: %s&quot;&lt;/span&gt;, args[0]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;string&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, nil
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;7.整合全部代码&lt;/p&gt;

&lt;p&gt;终于到了写main函数的最后关头，它将调用shim.Start函数。下面是包含整个chaincode程序的代码：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

    &lt;span class=&quot;s2&quot;&gt;&quot;github.com/hyperledger/fabric/core/chaincode/shim&quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;github.com/hyperledger/fabric/protos/peer&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

// SimpleAsset implements a simple chaincode to manage an asset
&lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;SimpleAsset struct &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

// Init is called during chaincode instantiation to initialize any
// data. Note that chaincode upgrade also calls this &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;to reset
// or to migrate data.
func &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;SimpleAsset&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Init&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; peer.Response &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    // Get the args from the transaction proposal
    args :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.GetStringArgs&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;len&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; 2 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;shim.Error&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Incorrect arguments. Expecting a key and a value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    // Set up any variables or assets here by calling stub.PutState&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    // We store the key and the value on the ledger
    err :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.PutState&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args[0], &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;byte&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args[1]&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;err &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; nil &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;shim.Error&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fmt.Sprintf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Failed to create asset: %s&quot;&lt;/span&gt;, args[0]&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;shim.Success&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nil&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

// Invoke is called per transaction on the chaincode. Each transaction is
// either a &lt;span class=&quot;s1&quot;&gt;'get'&lt;/span&gt; or a &lt;span class=&quot;s1&quot;&gt;'set'&lt;/span&gt; on the asset created by Init &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; The Set
// method may create a new asset by specifying a new key-value pair.
func &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;SimpleAsset&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Invoke&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; peer.Response &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    // Extract the &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;and args from the transaction proposal
    fn, args :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.GetFunctionAndParameters&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    var result string
    var err error
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;fn &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;set&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            result, err &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub, args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // assume &lt;span class=&quot;s1&quot;&gt;'get'&lt;/span&gt; even &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;fn is nil
            result, err &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; get&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub, args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;err &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; nil &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;shim.Error&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;err.Error&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    // Return the result as success payload
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;shim.Success&lt;span class=&quot;o&quot;&gt;([]&lt;/span&gt;byte&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

// Set stores the asset &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;both key and value&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; on the ledger. If the key exists,
// it will override the value with the new one
func &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface, args &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string, error&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;len&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; 2 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;, fmt.Errorf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Incorrect arguments. Expecting a key and a value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    err :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.PutState&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args[0], &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;byte&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args[1]&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;err &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; nil &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;, fmt.Errorf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Failed to set asset: %s&quot;&lt;/span&gt;, args[0]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;args[1], nil
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

// Get returns the value of the specified asset key
func get&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stub shim.ChaincodeStubInterface, args &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;string, error&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;len&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;, fmt.Errorf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Incorrect arguments. Expecting a key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    value, err :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; stub.GetState&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args[0]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;err &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; nil &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;, fmt.Errorf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Failed to get asset: %s with error: %s&quot;&lt;/span&gt;, args[0], err&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;value &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; nil &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;, fmt.Errorf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Asset not found: %s&quot;&lt;/span&gt;, args[0]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;string&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, nil
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

// main &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;starts up the chaincode &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the container during instantiate
func main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;err :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; shim.Start&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;new&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SimpleAsset&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; err &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; nil &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            fmt.Printf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Error starting SimpleAsset chaincode: %s&quot;&lt;/span&gt;, err&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;编译chaincode&quot;&gt;编译chaincode&lt;/h1&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt; nopkcs11 github.com/hyperledger/fabric/core/chaincode/shim
go build &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt; nopkcs11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;测试&quot;&gt;测试&lt;/h1&gt;

&lt;p&gt;1.安装必要的docker镜像&lt;/p&gt;

&lt;p&gt;如果之前没有部署过环境，可以直接按照&lt;a href=&quot;/2018/05/13/hyperledger-fabric-1.html&quot;&gt;fabric入门（一）安装&lt;/a&gt;步骤进行安装。&lt;/p&gt;

&lt;p&gt;2.安装Hyperledger Fabric样例&lt;/p&gt;

&lt;p&gt;下面进入到安装好的&lt;em&gt;fabric-samples&lt;/em&gt;下的&lt;em&gt;chaincode-docker-devmode&lt;/em&gt;目录。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;chaincode-docker-devmode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.安装chaincode&lt;/p&gt;

&lt;p&gt;现在请在&lt;em&gt;chaincode-docker-devmode&lt;/em&gt;目录下面打开三个独立的终端。&lt;/p&gt;

&lt;p&gt;1号终端&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; docker-compose-simple.yaml up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述指令启动了一个带有SingleSampleMSPSoloorderer profile的网络，并将节点在“开发者模式”下启动。它还启动了另外两个容器：一个包含chaincode运行环境;另一个是CLI命令行，可与chaincode进行交互。创建并加入channel（管道）的指令内嵌于CLI容器中，所以我们下面马上跳转到chaincode调用部分。&lt;/p&gt;

&lt;p&gt;2号终端&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; chaincode bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行完上述指令后，您应该会看到如下内容：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@d2629980e76b:/opt/gopath/src/chaincode#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;（此时您已经进入chaincode容器）下面编译您的chaincode:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sacc
go build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在运行chaincode：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer:7052 &lt;span class=&quot;nv&quot;&gt;CORE_CHAINCODE_ID_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mycc:0 ./sacc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3号终端&lt;/p&gt;

&lt;p&gt;即便您处于&lt;em&gt;–peer-chaincodedev&lt;/em&gt;模式，安装chaincode这一步仍必不可少，这样生命周期系统chaincode才能正常进行检查。也许这一步会在日后的&lt;em&gt;–peer-chaincodedev&lt;/em&gt;模式中省去。&lt;/p&gt;

&lt;p&gt;下面我们将进入CLI容器进行chaincode调用。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; cli bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; chaincodedev/chaincode/sacc &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.初始化(3号终端)&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode instantiate &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;Args&quot;:[&quot;a&quot;,&quot;10&quot;]}'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; myc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.交易(3号终端)&lt;/p&gt;

&lt;p&gt;现在我们执行一次将a的值设为20的调用：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode invoke &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;Args&quot;:[&quot;set&quot;, &quot;a&quot;, &quot;20&quot;]}'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; myc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后查询a的值，我们会看到20。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode query &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; myc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Sun, 27 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>搭建以太坊私有网络(ubuntn)</title>
            <link>/2018/05/18/eth-private-network-ubuntu.html</link>
            <guid isPermaLink="true">/2018/05/18/eth-private-network-ubuntu.html</guid>
            <description>&lt;p&gt;mac版请参考&lt;a href=&quot;/2018/04/01/ether-private-network.html&quot;&gt;搭建以太坊私有网络&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;安装nodenpm&quot;&gt;安装node&amp;amp;npm&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nodejs-legacy
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;npm

&lt;span class=&quot;c&quot;&gt;# 升级npm&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;npm@latest &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 升级node&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;npm i &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; n

&lt;span class=&quot;c&quot;&gt;# 安装最新版可执行&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sudo n stable&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 由于mist限制node不能大于9，所以只升级到9&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;n 9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装go&quot;&gt;安装go&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;geth 需要1.9版本以上&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:longsleep/golang-backports
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;golang-go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装libiconv&quot;&gt;安装libiconv&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.15.tar.gz
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;zxvf libiconv-1.15.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;libiconv-1.15
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install
sudo &lt;/span&gt;ldconfig // 刷新动态链接库缓存 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装yarn&quot;&gt;安装Yarn&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; https://dl.yarnpkg.com/debian/pubkey.gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb https://dl.yarnpkg.com/debian/ stable main&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/yarn.list
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装electron-v179&quot;&gt;安装Electron v1.7.9&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn global add electron@1.7.9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装meteor-javascript应用程序框架&quot;&gt;安装meteor JavaScript应用程序框架&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl https://install.meteor.com/ | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装gulp&quot;&gt;安装Gulp&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn global add gulp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装geth&quot;&gt;安装geth&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/ethereum/go-ethereum.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;go-ethereum
make geth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把安装后的geth执行文件挪到/usr/bin&lt;/p&gt;

&lt;h3 id=&quot;安装ganache&quot;&gt;安装Ganache&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/trufflesuite/ganache/releases/download/v1.1.0/ganache-1.1.0-x86_64.AppImage
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;a+x ganache-1.1.0-x86_64.AppImage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ganache-1.1.0-x86_64.AppImage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装truffle&quot;&gt;安装Truffle&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; truffle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装mist&quot;&gt;安装mist&lt;/h3&gt;

&lt;p&gt;下载zip包&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/ethereum/mist/releases/download/v0.10.0/Mist-linux64-0-10-0.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解压&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unzip Mist-linux64-0-10-0.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;运行&quot;&gt;运行&lt;/h3&gt;

&lt;p&gt;运行geth&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 进入自定义指定目录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$yourpath&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 初始化&lt;/span&gt;
geth init ./genesis.json &lt;span class=&quot;nt&quot;&gt;--datadir&lt;/span&gt; ./chain
&lt;span class=&quot;c&quot;&gt;# 进入后台&lt;/span&gt;
geth &lt;span class=&quot;nt&quot;&gt;--datadir&lt;/span&gt; ./chain &lt;span class=&quot;nt&quot;&gt;--nodiscover&lt;/span&gt; console 2&amp;gt;&amp;gt; eth_output.logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行mist&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./mist &lt;span class=&quot;nt&quot;&gt;--rpc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$yourpath&lt;/span&gt;/chain/geth.ipc &lt;span class=&quot;nt&quot;&gt;--node-networkid&lt;/span&gt; 1234 &lt;span class=&quot;nt&quot;&gt;--node-datadir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$yourpath&lt;/span&gt;/chain/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;PS: 如果页面加载不出来，需要使用代理&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;常见问题&quot;&gt;常见问题&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;安装geth报错&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;build/env.sh go run build/ci.go &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; ./cmd/geth
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; /usr/lib/go-1.10/bin/go &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ldflags&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; main.gitCommit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4e7dc34ff1a7469b95eb16f5b4084c26a0ab3662 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; ./cmd/geth
github.com/ethereum/go-ethereum/vendor/github.com/karalabe/hid
&lt;span class=&quot;c&quot;&gt;# github.com/ethereum/go-ethereum/vendor/github.com/karalabe/hid&lt;/span&gt;
/tmp/go-build654371927/b223/_x002.o：在函数‘get_usb_string’中：
vendor/github.com/karalabe/hid/hidapi/libusb/hid.c:444：对‘libiconv_open’未定义的引用
vendor/github.com/karalabe/hid/hidapi/libusb/hid.c:456：对‘libiconv’未定义的引用
vendor/github.com/karalabe/hid/hidapi/libusb/hid.c:471：对‘libiconv_close’未定义的引用
collect2: error: ld returned 1 &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;status
util.go:45: &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;status 2
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;status 1
Makefile:15: recipe &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;target &lt;span class=&quot;s1&quot;&gt;'geth'&lt;/span&gt; failed
make: &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;geth] Error 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决方案：
根据提示找到对应文件&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim vendor/github.com/karalabe/hid/hid_enabled.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装libiconv，并添加链接参数：-liconv&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#cgo linux,!android LDFLAGS: -lrt -liconv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Fri, 18 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric入门（五）安装和实例化链码</title>
            <link>/2018/05/13/hyperledger-fabric-5.html</link>
            <guid isPermaLink="true">/2018/05/13/hyperledger-fabric-5.html</guid>
            <description>&lt;h4 id=&quot;安装启动链码&quot;&gt;安装启动链码&lt;/h4&gt;

&lt;p&gt;首先，在将示例代码安装到4个peer节点中的其中一个。这个命令将源代码放到peer节点的文件系统中。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 1.0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; github.com/hyperledger/fabric-samples/chaincode/chaincode_example02/go/chaincode_example02
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，在信道上实例化chaincode。这将初始化信道上的链码，设置链码的背书策略，为目标peer节点启动一个chaincode容器注意-P参数。这是我们需要指定的当这个chaincode的交易需要被验证的时侯的背书策略。&lt;/p&gt;

&lt;p&gt;在下面的命令中，你会注意到我们指定 -P “OR (‘Org0MSP.member’,’Org1MSP.member’)” 作为背书策略。这意味着我们需要Org1或者Org2组织中的其中一个的节点的背书即可（即只有一个背书）。如果我们改变语法为AND那么我们就需要2个背书者。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode instantiate &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; orderer.example.com:7050 &lt;span class=&quot;nt&quot;&gt;--tls&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CORE_PEER_TLS_ENABLED&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cafile&lt;/span&gt; /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 1.0 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;, &quot;100&quot;, &quot;b&quot;,&quot;200&quot;]}'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OR ('Org1MSP.member','Org2MSP.member')&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;调用&quot;&gt;调用&lt;/h4&gt;

&lt;p&gt;现在让我们从a账户转10到b账户。这个交易将创建一个新的区块并更新state DB。调用语法如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode invoke &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; orderer.example.com:7050  &lt;span class=&quot;nt&quot;&gt;--tls&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CORE_PEER_TLS_ENABLED&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cafile&lt;/span&gt; /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem  &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;查询&quot;&gt;查询&lt;/h4&gt;

&lt;p&gt;让我们确认下我们之前的调用被正确地执行了。我们初始化了a的值为100，在上一次调用的时侯转移了10给b。因此，查询a应该展示90。查询的语法如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode query &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们应该看到以下内容：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Query Result: 90
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric入门（四）启动网络</title>
            <link>/2018/05/13/hyperledger-fabric-4.html</link>
            <guid isPermaLink="true">/2018/05/13/hyperledger-fabric-4.html</guid>
            <description>&lt;h4 id=&quot;启动网络&quot;&gt;启动网络&lt;/h4&gt;

&lt;p&gt;我们将利用docker-compose脚本来启动我们的区块链网络。&lt;/p&gt;

&lt;p&gt;在开始前，我们先注释掉&lt;strong&gt;docker-compose-cli.yml&lt;/strong&gt;的一段&lt;strong&gt;command: /bin/bash&lt;/strong&gt;代码，不然该脚本将在网络启动时执行所有命令.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cli:
    container_name: cli
    image: hyperledger/fabric-tools:&lt;span class=&quot;nv&quot;&gt;$IMAGE_TAG&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;tty&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true
    &lt;/span&gt;stdin_open: &lt;span class=&quot;nb&quot;&gt;true
    &lt;/span&gt;environment:
      - &lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath
      - &lt;span class=&quot;nv&quot;&gt;CORE_VM_ENDPOINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;unix:///host/var/run/docker.sock
      &lt;span class=&quot;c&quot;&gt;#- CORE_LOGGING_LEVEL=DEBUG&lt;/span&gt;
      - &lt;span class=&quot;nv&quot;&gt;CORE_LOGGING_LEVEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;INFO
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cli
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer0.org1.example.com:7051
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_LOCALMSPID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Org1MSP
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ROOTCERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_MSPCONFIGPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    &lt;span class=&quot;c&quot;&gt;#command: /bin/bash&lt;/span&gt;
    volumes:
        - /var/run/:/host/var/run/
        - ./../chaincode/:/opt/gopath/src/github.com/chaincode
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    networks:
      - byfn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动网络&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CHANNEL_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TIMEOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;pick_a_value&amp;gt; docker-compose &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; docker-compose-cli.yaml up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行完如图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-13-hyperledger-fabric-1/1.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;创建加入信息&quot;&gt;创建&amp;amp;加入信息&lt;/h4&gt;

&lt;p&gt;进入cli容器，后面命令都是在cli容器中进行&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; cli bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;回想一下，我们使用configtxgen工具生成信道配置-channel.tx。我们将这个配置作为请求的一部分传递给order。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHANNEL_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mychannel
peer channel create &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; orderer.example.com:7050 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./channel-artifacts/channel.tx &lt;span class=&quot;nt&quot;&gt;--tls&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CORE_PEER_TLS_ENABLED&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cafile&lt;/span&gt; /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;返回一个创世区块-&lt;channel-ID.block&gt;-我们将使用它加入信道。它包含了channel.tx中的配置信息。&lt;/channel-ID.block&gt;&lt;/p&gt;

&lt;p&gt;接下来让其他节点加入信道&lt;/p&gt;

&lt;p&gt;org1.peer1&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_MSPCONFIGPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer0.org1.example.com:7051
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_LOCALMSPID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Org1MSP&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ROOTCERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
peer channel &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; mychannel.block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;org1.peer1&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_MSPCONFIGPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer1.org1.example.com:7051
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_LOCALMSPID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Org1MSP&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ROOTCERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt
peer channel &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; mychannel.block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;org2.peer0&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_MSPCONFIGPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer0.org2.example.com:7051
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_LOCALMSPID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Org2MSP&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ROOTCERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
peer channel &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; mychannel.block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;org2.peer1&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_MSPCONFIGPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer1.org2.example.com:7051
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_LOCALMSPID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Org2MSP&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ROOTCERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt
peer channel &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; mychannel.block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric入门（三）加密&amp;交易生成器</title>
            <link>/2018/05/13/hyperledger-fabric-3.html</link>
            <guid isPermaLink="true">/2018/05/13/hyperledger-fabric-3.html</guid>
            <description>&lt;p&gt;通过查看&lt;strong&gt;./byfn.sh&lt;/strong&gt;这个shell启动脚本，我们知道一开始的执行流程。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Create the network using docker compose&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;up&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;networkUp
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;down&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## Clear the network&lt;/span&gt;
  networkDown
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;generate&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## Generate Artifacts&lt;/span&gt;
  generateCerts
  replacePrivateKey
  generateChannelArtifacts
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;restart&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## Restart the network&lt;/span&gt;
  networkDown
  networkUp
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;upgrade&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## Upgrade the network from v1.0.x to v1.1&lt;/span&gt;
  upgradeNetwork
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;printHelp
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先是&lt;strong&gt;generateCerts&lt;/strong&gt;这个方法&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;generateCerts &lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  which cryptogen
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cryptogen tool not found. exiting&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##########################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##### Generate certificates using cryptogen tool #########&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##########################################################&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;crypto-config&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Rf&lt;/span&gt; crypto-config
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
  cryptogen generate &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./crypto-config.yaml
  &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed to generate certificates...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;里面用到的&lt;strong&gt;cryptogen&lt;/strong&gt;用来为我们生成各种网络实体的加密材料（x509证书）。这些证书是身份的代表，它们允许在我们的网络实体进行交流和交易时进行签名/验证身份验证。&lt;/p&gt;

&lt;p&gt;Cryptogen消费一个包含网络拓扑的crypto-config.yaml，并允许我们为组织和属于这些组织的组件生成一组证书和密钥。每个组织都配置了唯一的根证书(ca-cert),它将特定组件（peers和orders）绑定到该组织。通过为每一个组织分配唯一的CA证书，我们正在模仿一个经典的网络，这个网络中的成员将使用自己的证书颁发机构。Hyperledger Fabric中的交易和通信是通过存储在keystore中的实体的私钥签名，然后通过公钥手段进行验证（signcerts）。&lt;/p&gt;

&lt;p&gt;所以我们第一步运行以下命令，生成的证书和密钥将被保存到名为crypto-config的文件夹中。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cryptogen generate &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./crypto-config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来的&lt;strong&gt;replacePrivateKey&lt;/strong&gt;方法主要用于e2e网络，我们暂时用不到，先跳过。&lt;/p&gt;

&lt;p&gt;接下来是&lt;strong&gt;generateChannelArtifacts&lt;/strong&gt;这个方法，用来生成order的创世区块，信道的交易配置以及两个anchor peer transactions一个对应一个Peer组织。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;generateChannelArtifacts&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  which configtxgen
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;configtxgen tool not found. exiting&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi

  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##########################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#########  Generating Orderer Genesis block ##############&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##########################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Note: For some unknown reason (at least for now) the block file can't be&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# named orderer.genesis.block or the orderer will fail to launch!&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
  configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsOrdererGenesis &lt;span class=&quot;nt&quot;&gt;-outputBlock&lt;/span&gt; ./channel-artifacts/genesis.block
  &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed to generate orderer genesis block...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;### Generating channel configuration transaction 'channel.tx' ###&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
  configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputCreateChannelTx&lt;/span&gt; ./channel-artifacts/channel.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed to generate channel configuration transaction...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi

  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#######    Generating anchor peer update for Org1MSP   ##########&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
  configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputAnchorPeersUpdate&lt;/span&gt; ./channel-artifacts/Org1MSPanchors.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-asOrg&lt;/span&gt; Org1MSP
  &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed to generate anchor peer update for Org1MSP...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi

  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#######    Generating anchor peer update for Org2MSP   ##########&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
  configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputAnchorPeersUpdate&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  ./channel-artifacts/Org2MSPanchors.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-asOrg&lt;/span&gt; Org2MSP
  &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed to generate anchor peer update for Org2MSP...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先，我们需要设置一个环境变量来告诉configtxgen哪里去寻找configtx.yaml。然后，我们将调用configtxgen工具去创建orderer genesis block：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_CFG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;
configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsOrdererGenesis &lt;span class=&quot;nt&quot;&gt;-outputBlock&lt;/span&gt; ./channel-artifacts/genesis.block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，我们需要创建channel transaction配置。请确保替换$CHANNEL_NAME或者将CHANNEL_NAME设置为整个说明中可以使用的环境变量：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHANNEL_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mychannel
configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputCreateChannelTx&lt;/span&gt; ./channel-artifacts/channel.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，我们将在正在构建的通道上定义Org1的anchor peer。请再次确认$CHANNEL_NAME已被替换或者为以下命令设置了环境变量：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputAnchorPeersUpdate&lt;/span&gt; ./channel-artifacts/Org1MSPanchors.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-asOrg&lt;/span&gt; Org1MSP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在，我们将在同一个通道定义Org2的anchor peer：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputAnchorPeersUpdate&lt;/span&gt; ./channel-artifacts/Org2MSPanchors.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-asOrg&lt;/span&gt; Org2MSP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric入门（二）启动&amp;关闭网络</title>
            <link>/2018/05/13/hyperledger-fabric-2.html</link>
            <guid isPermaLink="true">/2018/05/13/hyperledger-fabric-2.html</guid>
            <description>&lt;p&gt;进入官方示例&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/hyperledger/fabric-samples/first-network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一步生成我们各种网络实体的所有证书和密钥，genesis block用于引导排序服务，以及配置Channel所需要的一组交易配置集合。  &lt;br /&gt;
运行以下命令：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./byfn.sh &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来可以使用以下命令来启动整个网络。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./byfn.sh &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果看到一个大大的&lt;strong&gt;END&lt;/strong&gt;说明执行成功了。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;=====================&lt;/span&gt; All GOOD, BYFN execution completed &lt;span class=&quot;o&quot;&gt;=====================&lt;/span&gt;
 _____   _   _   ____
| ____| | &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;| | |  _ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
|  _|   |  &lt;span class=&quot;se&quot;&gt;\|&lt;/span&gt; | | | | |
| |___  | |&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; | | |_| |
|_____| |_| &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;| |____/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以通过以下命令来关闭刚才打开的网络：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./byfn.sh &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了能详细了解里面的操作流程，接下来我们不通过这个方式来启动，而是拆分&lt;strong&gt;./byfn.sh&lt;/strong&gt;这个shell脚本来执行。请点击查看&lt;a href=&quot;/2018/05/13/hyperledger-fabric-3.html&quot;&gt;fabric入门（三）启动&amp;amp;关闭网络&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric入门（一）安装</title>
            <link>/2018/05/13/hyperledger-fabric-1.html</link>
            <guid isPermaLink="true">/2018/05/13/hyperledger-fabric-1.html</guid>
            <description>&lt;h2 id=&quot;安装镜像&quot;&gt;安装镜像&lt;/h2&gt;

&lt;p&gt;镜像可以自己安装，也可以借助官网的samples来帮我们实现。&lt;/p&gt;

&lt;p&gt;从&lt;a href=&quot;http://hyperledger-fabric.readthedocs.io/en/latest/install.html&quot;&gt;官网&lt;/a&gt;可以看到，安装需要执行一个脚本：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://goo.gl/6wtTN5 | bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 1.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不过这个需要翻墙，可以直接把文本下载下来。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Copyright IBM Corp. All Rights Reserved.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# SPDX-License-Identifier: Apache-2.0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# if version not passed in, default to latest released version&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.1.0
&lt;span class=&quot;c&quot;&gt;# if ca version not passed in, default to latest released version&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# current version of thirdparty images (couchdb, kafka and zookeeper) released&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_IMAGE_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.4.6
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;|tr &lt;span class=&quot;s1&quot;&gt;'[:upper:]'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[:lower:]'&lt;/span&gt;|sed &lt;span class=&quot;s1&quot;&gt;'s/mingw64_nt.*/windows/'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/x86_64/amd64/g'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

printHelp&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: bootstrap.sh [&amp;lt;version&amp;gt;] [&amp;lt;ca_version&amp;gt;] [&amp;lt;thirdparty_version&amp;gt;][-d -s -b]&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-d - bypass docker image download&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-s - bypass fabric-samples repo clone&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-b - bypass download of platform-specific binaries&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;e.g. bootstrap.sh 1.1.1 -s&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;would download docker images and binaries for version 1.1.1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

dockerFabricPull&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IMAGES &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;peer orderer ccenv javaenv tools&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; FABRIC IMAGE: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo
      &lt;/span&gt;docker pull hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$FABRIC_TAG&lt;/span&gt;
      docker tag hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$FABRIC_TAG&lt;/span&gt; hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

dockerThirdPartyImagesPull&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IMAGES &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;couchdb kafka zookeeper&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; THIRDPARTY DOCKER IMAGE: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo
      &lt;/span&gt;docker pull hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$THIRDPARTY_TAG&lt;/span&gt;
      docker tag hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$THIRDPARTY_TAG&lt;/span&gt; hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

dockerCaPull&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; FABRIC CA IMAGE&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo
      &lt;/span&gt;docker pull hyperledger/fabric-ca:&lt;span class=&quot;nv&quot;&gt;$CA_TAG&lt;/span&gt;
      docker tag hyperledger/fabric-ca:&lt;span class=&quot;nv&quot;&gt;$CA_TAG&lt;/span&gt; hyperledger/fabric-ca
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

samplesInstall&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# clone (if needed) hyperledger/fabric-samples and checkout corresponding&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# version to the binaries and docker images to be downloaded&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; first-network &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# if we are in the fabric-samples repo, checkout corresponding version&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Checking out v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; branch of hyperledger/fabric-samples&quot;&lt;/span&gt;
    git checkout v&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; fabric-samples &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# if fabric-samples repo already cloned and in current directory,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# cd fabric-samples and checkout corresponding version&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Checking out v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; branch of hyperledger/fabric-samples&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fabric-samples &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout v&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Cloning hyperledger/fabric-samples repo and checkout v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    git clone &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; master https://github.com/hyperledger/fabric-samples.git &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fabric-samples &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout v&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Incrementally downloads the .tar.gz file locally first, only decompressing it&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# after the download is complete. This is slower than binaryDownload() but&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# allows the download to be resumed.&lt;/span&gt;
binaryIncrementalDownload&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
      curl &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; - &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# Due to limitations in the current Nexus repo:&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# curl returns 33 when there's a resume attempt with no more bytes to download&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# curl returns 2 after finishing a resumed download&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# with -f curl returns 22 on a 404&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 22 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;# looks like the requested file doesn't actually exist so stop here&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;22
      &lt;span class=&quot;k&quot;&gt;fi
      if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 33 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 2 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;# The checksum validates that RC 33 or 2 are not real failures&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; File downloaded. Verifying the md5sum...&quot;&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;localMd5sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;md5sum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;remoteMd5sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.md5&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$localMd5sum&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$remoteMd5sum&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
              &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; Extracting &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&quot;&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xzf ./&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--overwrite&lt;/span&gt;
	      &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; Done.&quot;&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.md5
          &lt;span class=&quot;k&quot;&gt;else
              &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Download failed: the local md5sum is different from the remote md5sum. Please try again.&quot;&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.md5
              &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
          &lt;span class=&quot;k&quot;&gt;fi
      else
          &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failure downloading binaries (curl RC=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;). Please try again and the download will resume from where it stopped.&quot;&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
      &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This will attempt to download the .tar.gz all at once, but will trigger the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# binaryIncrementalDownload() function upon a failure, allowing for resume&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# if there are network failures.&lt;/span&gt;
binaryDownload&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Downloading: &quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# Check if a previous failure occurred and the file was partially downloaded&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
          &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; Partial binary file found. Resuming download...&quot;&lt;/span&gt;
          binaryIncrementalDownload &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else
          &lt;/span&gt;curl &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xz &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
              &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; There was an error downloading the binary file. Switching to incremental download.&quot;&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; Downloading file...&quot;&lt;/span&gt;
              binaryIncrementalDownload &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else
	      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; Done.&quot;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;fi
      fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

binariesInstall&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Downloading version &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; platform specific fabric binaries&quot;&lt;/span&gt;
  binaryDownload &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 22 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
     &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
     echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;------&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; platform specific fabric binary is not available to download &amp;lt;----&quot;&lt;/span&gt;
     &lt;span class=&quot;nb&quot;&gt;echo
   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi

  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Downloading version &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; platform specific fabric-ca-client binary&quot;&lt;/span&gt;
  binaryDownload &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric-ca/hyperledger-fabric-ca/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 22 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
     &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
     echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;------&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; fabric-ca-client binary is not available to download  (Available from 1.1.0-rc1) &amp;lt;----&quot;&lt;/span&gt;
     &lt;span class=&quot;nb&quot;&gt;echo
   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

dockerInstall&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  which docker &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp; /dev/null
  &lt;span class=&quot;nv&quot;&gt;NODOCKER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NODOCKER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
	  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Pulling fabric Images&quot;&lt;/span&gt;
	  dockerFabricPull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Pulling fabric ca Image&quot;&lt;/span&gt;
	  dockerCaPull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Pulling thirdparty docker images&quot;&lt;/span&gt;
	  dockerThirdPartyImagesPull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;nb&quot;&gt;echo
	  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; List out hyperledger docker images&quot;&lt;/span&gt;
	  docker images | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;hyperledger&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=========================================================&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Docker not installed, bypassing download of Fabric images&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=========================================================&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DOCKER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SAMPLES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARIES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Parse commandline args pull out&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# version and/or ca-version strings first&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_IMAGE_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi
  fi
fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# prior to 1.2.0 architecture was determined by uname -m&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ ^1&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0-1]&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_IMAGE_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# starting with 1.2.0, multi-arch images will be default&lt;/span&gt;
  : &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;:&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CA_VERSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  : &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;:&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  : &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_TAG&lt;/span&gt;:&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$THIRDPARTY_IMAGE_VERSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hyperledger-fabric-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.tar.gz
&lt;span class=&quot;nv&quot;&gt;CA_BINARY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hyperledger-fabric-ca-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.tar.gz

&lt;span class=&quot;c&quot;&gt;# then parse opts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getopts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;h?dsb&quot;&lt;/span&gt; opt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$opt&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    &lt;/span&gt;h|&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      printHelp
      &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    d&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;DOCKER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    s&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;SAMPLES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    b&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;BINARIES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SAMPLES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Installing hyperledger/fabric-samples repo&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo
  &lt;/span&gt;samplesInstall
&lt;span class=&quot;k&quot;&gt;fi
if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BINARIES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Installing Hyperledger Fabric binaries&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo
  &lt;/span&gt;binariesInstall
&lt;span class=&quot;k&quot;&gt;fi
if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DOCKER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Installing Hyperledger Fabric docker images&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo
  &lt;/span&gt;dockerInstall
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;保存为&lt;code class=&quot;highlighter-rouge&quot;&gt;install.sh&lt;/code&gt;，并执行&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash ./install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个脚本会去Docker Hub上下载相应的镜像到本地的docker里面，所以&lt;strong&gt;运行脚本前需要启动docker服务&lt;/strong&gt;。  &lt;br /&gt;
同时，还会去下载对应平台的二进制文件，也就是bin目录。&lt;/p&gt;

&lt;p&gt;整个下载过程还是相当卡的，所以还是建议用代理来执行。&lt;/p&gt;

&lt;p&gt;执行完成后如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-13-hyperledger-fabric-1/1.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;下载源码&quot;&gt;下载源码&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/hyperledger/fabric
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于接下来的实例，需要用到指定路径，所以下载完成后，需要完成以下两个步骤：&lt;/p&gt;

&lt;p&gt;1.把它挪到$GOPATH路径下 &lt;strong&gt;$GOPATH/src/github.com/hyperledger/fabric&lt;/strong&gt;
2.设置软链接&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt; /opt/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.把&lt;strong&gt;$GOPATH/src/github.com/hyperledger/fabric/bin&lt;/strong&gt;添加到环境变量&lt;/p&gt;
</description>
            <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>网络基础 - 用户数据报协议(UDP)</title>
            <link>/2018/04/30/network-udp.html</link>
            <guid isPermaLink="true">/2018/04/30/network-udp.html</guid>
            <description>&lt;p&gt;用户数据报协议（User Datagram Protocol, UDP）是在现代网络中最常使用的另外一种第4层协议。如果说TCP是为了满足带有内在错误检测的可靠数据传输，那么UDP主要是为了提供高速的传输。处于这个原因，UDP是一种尽力服务，通常会被称为无连接协议。一个无连接协议并不会正式的建立和结束主机之前的连接，也不会像TCP那样存在握手和终止进程。&lt;/p&gt;

&lt;p&gt;无连接协议意味着不可靠服务，这将使得UDP流量不稳定。依赖于UDP的协议通常都会有其内置的可靠性服务，或者使用ICMP的一些功能来保证连接更可靠一些。举例来说，应用层协议DNS和DHCP需要高度依赖数据包在网络上的传输速度，其使用UDP作为它们的传输层协议，但是它们自己进行错误检查以及重传计时。&lt;/p&gt;

&lt;h4 id=&quot;udp-头&quot;&gt;UDP 头&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-udp/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;源端口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来传输数据包的端口。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;目标端口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据包将要被传输到的端口。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据包长度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据包的字节长度。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;校验和&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来确保UDP头和数据到达时的完整性。&lt;/p&gt;

</description>
            <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>网络基础 - 传输控制协议(TCP)</title>
            <link>/2018/04/30/network-tcp.html</link>
            <guid isPermaLink="true">/2018/04/30/network-tcp.html</guid>
            <description>&lt;p&gt;传输控制协议（Transmission Control Protocol, TCP）的最终目的是为数据提供可靠的端到端传输。&lt;/p&gt;

&lt;h4 id=&quot;tcp-头&quot;&gt;TCP 头&lt;/h4&gt;

&lt;p&gt;数据结构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-tcp/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;源端口（Source Port）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来传输数据包的端口。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;目的端口（Destination Port）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据包将要被发送到的端口。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;序号（Sequence Number）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个数字用来表示一个TCP片段。这个域用来保证数据流的部分没有缺失。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确认号（Acknowledgment Number）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个数字是通信中希望从另一设备得到的下一个数据包的序号。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;标记（Flags）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;URG、ACK、PSH、RST、SYN 和 FIN 标记都是用来表示所传输的TCP数据包的类型。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;窗口大小（Window Size）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TCP接收者缓冲的字节大小。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;校验和（Checksum）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来保证TCP头和数据的内容在抵达目的地时的完整性。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;紧急指针（Urgent Pointer）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果设置了URG位，这个域将被检查作为额外的指令，告诉CPU从数据包的哪里开始读取数据。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;选项（Options）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各种可选的域，可以在TCP数据包中进行指定。&lt;/p&gt;

&lt;h4 id=&quot;tcp端口&quot;&gt;TCP端口&lt;/h4&gt;

&lt;p&gt;在使用TCP进行通信时，我们有65535个端口可以使用，并通常将这些端口分成两个部分。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1~1023 是标准端口组，特定服务会用到这些通常位于标准端口分组中的标准端口。&lt;/li&gt;
  &lt;li&gt;1024~65535 是临时端口组，当一个服务想在任意时间使用端口进行通信时，现代操作系统都会随机的选择一个源端口，让这个通信使用唯一源端口。这些源端口通常就位于临时端口组。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;三次握手&quot;&gt;三次握手&lt;/h4&gt;

&lt;p&gt;主要达到的目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保证源主机确定目标主机在线，并且可以进行通信。&lt;/li&gt;
  &lt;li&gt;让源主机检查它是否正在监听试图去连接的端口。&lt;/li&gt;
  &lt;li&gt;允许源主机向接收者发送它的起始序列号，是的两台主机可以将数据包流保持有序。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体步骤如下：&lt;/p&gt;

&lt;script src=&quot;https://cdn.rawgit.com/knsv/mermaid/6.0.0/dist/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    participant A as 主机A
    participant B as 主机B
    A-&amp;gt;&amp;gt;B: SYN
    B-&amp;gt;&amp;gt;A: SYN/ACK
    A-&amp;gt;&amp;gt;B: ACK
&lt;/div&gt;

&lt;p&gt;具体说明：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;请求新的 TCP 连接时，客户端要向服务器发送⼀个⼩的 TCP 分组（通常是 40 ～ 60 个字节）。这个分组中设置了⼀个特殊的 SYN 标记，说明这是⼀个连接请求。（如上图a）。&lt;/li&gt;
  &lt;li&gt;如果服务器接受了连接，就会对⼀些连接参数进⾏计算，并向客户端回送⼀个 TCP 分组，这个分组中的 SYN 和 ACK 标记都被置位，说明连接请求已被接受（如上图b）。&lt;/li&gt;
  &lt;li&gt;最后，客户端向服务器回送⼀条确认信息，通知它连接已成功建⽴（如上图c）。现代的 TCP 栈都允许客户端在这个确认分组中发送数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;tcp终止&quot;&gt;TCP终止&lt;/h4&gt;

&lt;p&gt;具体步骤如下：&lt;/p&gt;

&lt;script src=&quot;https://cdn.rawgit.com/knsv/mermaid/6.0.0/dist/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    participant A as 主机A
    participant B as 主机B
    A-&amp;gt;&amp;gt;B: FIN/ACK
    B-&amp;gt;&amp;gt;A: ACK
    B-&amp;gt;&amp;gt;A: FIN/ACK
    A-&amp;gt;&amp;gt;B: ACK
&lt;/div&gt;

&lt;p&gt;具体说明：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;主机A通过发送一个设置了FIN和ACK标志的TCP数据包，告诉主机B通信的完成。&lt;/li&gt;
  &lt;li&gt;主机B以一个ACK数据包响应，并传输自己的FIN/ACK数据包。&lt;/li&gt;
  &lt;li&gt;主机A响应一个ACK数据包，然后结束通信过程。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;tcp重置&quot;&gt;TCP重置&lt;/h4&gt;

&lt;p&gt;在理想情况中，每一个连接都会以TCP终止来正常的结束。但在现实中，连接经常会突然断掉。举例来说，者可能由于一个潜在的攻击者正在进行端口扫描，或者仅仅是主机配置错误。在这种情况下，就需要使用设置了RST标志的TCP数据包。RST标志用来表示连接被异常中止或拒绝连接请求。&lt;/p&gt;
</description>
            <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>网络基础 - IP协议</title>
            <link>/2018/04/30/network-ip.html</link>
            <guid isPermaLink="true">/2018/04/30/network-ip.html</guid>
            <description>&lt;h4 id=&quot;ipv4&quot;&gt;IPv4&lt;/h4&gt;

&lt;p&gt;IP地址是一个32位的二进制数，通常被分割为4个“8位二进制数”（也就是4个字节）。IP地址通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d都是0~255之间的十进制整数。例：点分十进IP地址（100.4.5.6），实际上是32位二进制数（01100100.00000100.00000101.00000110）。&lt;/p&gt;

&lt;p&gt;IP地址呗分成4个独立部分，是因为每个IP地址都包含有两个部分：网络地址和主机地址。网络地址用来标识设备所连接到的局域网，而主机地址则标识这个网络中的设备本身。而如何划分这四个部分，是由另一组名为&lt;strong&gt;网络掩码(netmask, network mask)&lt;/strong&gt;的地址信息决定的，有时也成为&lt;strong&gt;子网掩码(subnet mask)&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;网络掩码也是32位长，并且被设为1的每一位都标识者IP地址的对应部分是属于网络地址的，而剩下设为0的部分则标识者主机地址。&lt;/p&gt;

&lt;p&gt;IP地址和网络掩码为简便起见，通常会被写成&lt;strong&gt;无类型域间选路*(Classless Inter-Domain Routing, CIDR)&lt;/strong&gt;。在这种形式下，一个完整的IP地址后面会有一个左斜杠，以及一个用来标识IP地址中网络部分位数的数字。举例，IP地址10.10.1.22和网络掩码255.255.0.0，在CIDR表示下会写成10.10.1.22/16.&lt;/p&gt;

&lt;h4 id=&quot;报文结构&quot;&gt;报文结构&lt;/h4&gt;

&lt;p&gt;IPv4报文的首部包含14个字段，其中13个是必须的，第14个是可选的（红色标出），并命名为：“选项”字段。首部中的字段均以大端序包装，在以下的图表和讨论中，最高有效位（Most Significant bit）被标记为0。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-ip/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;版本（Version）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;版本字段占4bit，通信双方使用的版本必须一致。对于IPv4，字段的值是4。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首部长度（Internet Header Length， IHL）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;占4bit，首部长度说明首部有多少32位字（4字节）。由于IPv4首部可能包含数目不定的选项，这个字段也用来确定数据的偏移量。这个字段的最小值是5（二进制0101），相当于5*4=20字节（RFC 791），最大十进制值是15。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;区分服务（Differentiated Services，DS）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;占8bit，最初被定义为服务类型字段，实际上并未使用，但1998年被IETF重定义为区分服务RFC 2474。只有在使用区分服务时，这个字段才起作用，在一般的情况  下都不使用这个字段。例如需要实时数据流的技术会应用这个字段，一个例子是VoIP。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;显式拥塞通告（ Explicit Congestion Notification，ECN）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在RFC 3168中定义，允许在不丢弃报文的同时通知对方网络拥塞的发生。ECN是一种可选的功能，仅当两端都支持并希望使用，且底层网络支持时才被使用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;全长（Total Length）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个16位字段定义了报文总长，包含首部和数据，单位为字节。这个字段的最小值是20（20字节首部+0字节数据），最大值是216-1=65,535。IP规定所有主机都必须支持最小576字节的报文，这是假定上层数据长度512字节，加上最长IP首部60字节，加上4字节富裕量，得出576字节，但大多数现代主机支持更大的报文。当下层的数据链路协议的最大传输单元（MTU）字段的值小于IP报文长度时间，报文就必须被分片.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;标识符（Identification）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;占16位，这个字段主要被用来唯一地标识一个报文的所有分片，因为分片不一定按序到达，所以在重组时需要知道分片所属的报文。每产生一个数据报，计数器加1，并赋值给此字段。一些实验性的工作建议将此字段用于其它目的，例如增加报文跟踪信息以协助探测伪造的源地址。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;标志 （Flags）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个3位字段用于控制和识别分片，它们是：  &lt;br /&gt;
位0：保留，必须为0；  &lt;br /&gt;
位1：禁止分片（Don’t Fragment，DF），当DF=0时才允许分片；  &lt;br /&gt;
位2：更多分片（More Fragment，MF），MF=1代表后面还有分片，MF=0 代表已经是最后一个分片。  &lt;br /&gt;
如果DF标志被设置为1，但路由要求必须分片报文，此报文会被丢弃。这个标志可被用于发往没有能力组装分片的主机。  &lt;br /&gt;
当一个报文被分片，除了最后一片外的所有分片都设置MF为1。最后一个片段具有非零片段偏移字段，将其与未分片数据包区分开，未分片的偏移字段为0。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分片偏移 （Fragment Offset）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个13位字段指明了每个分片相对于原始报文开头的偏移量，以8字节作单位。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;存活时间（Time To Live，TTL）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个8位字段避免报文在互联网中永远存在（例如陷入路由环路）。存活时间以秒为单位，但小于一秒的时间均向上取整到一秒。在现实中，这实际上成了一个跳数计数器：报文经过的每个路由器都将此字段减1，当此字段等于0时，报文不再向下一跳传送并被丢弃，最大值是255。常规地，一份ICMP报文被发回报文发送端说明其发送的报文已被丢弃。这也是traceroute的核心原理。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;协议 （Protocol）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;占8bit，这个字段定义了该报文数据区使用的协议。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首部检验和 （Header Checksum）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个16位检验和字段只对首部查错，不包括数据部分。在每一跳，路由器都要重新计算出的首部检验和并与此字段进行比对，如果不一致，此报文将会被丢弃。重新计算的必要性是因为每一跳的一些首部字段（如TTL、Flag、Offset等）都有可能发生变化，不检查数据部分是为了减少工作量。数据区的错误留待上层协议处理——用户数据报协议（UDP）和传输控制协议（TCP）都有检验和字段。此处的检验计算方法不使用CRC。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;源地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个IPv4地址由四个字节共32位构成，此字段的值是将每个字节转为二进制并拼在一起所得到的32位值。  &lt;br /&gt;
例如，10.9.8.7是00001010000010010000100000000111。  &lt;br /&gt;
但请注意，因为NAT的存在，这个地址并不总是报文的真实发送端，因此发往此地址的报文会被送往NAT设备，并由它被翻译为真实的地址。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;目的地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;与源地址格式相同，但指出报文的接收端。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;选项&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;附加的首部字段可能跟在目的地址之后，但这并不被经常使用，从1到40个字节不等。请注意首部长度字段必须包括足够的32位字来放下所有的选项（包括任何必须的填充以使首部长度能够被32位整除）。当选项列表的结尾不是首部的结尾时，EOL（选项列表结束，0x00）选项被插入列表末尾。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用IP传递的实际数据。&lt;/p&gt;

&lt;h4 id=&quot;分片和组装&quot;&gt;分片和组装&lt;/h4&gt;

&lt;p&gt;一个数据包的分片主要是基于第2层数据链路协议所使用的最大传输单元（Maximum Transmission Unit, MTU）的大小，以及使用这些第2层协议设备的配置情况。多数情况下，第2层使用的数据链路协议是以太网。以太网的默认MTU是1500，也就是说，以太网的网络上所能传输的最大数据包大小是1500字节。&lt;/p&gt;

&lt;p&gt;当设备收到IP报文时，分析其目的地址并决定要在哪个链路上发送它。MTU决定了数据载荷的最大长度，如IP报文长度比MTU大，则IP数据包必须进行分片。每一片的长度都小于等于MTU减去IP首部长度。接下来每一片均被放到独立的IP报文中，并进行如下修改：&lt;/p&gt;

&lt;p&gt;总长字段被修改为此分片的长度；&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更多分片（MF）标志被设置，除了最后一片；&lt;/li&gt;
  &lt;li&gt;分片偏移量字段被调整为合适的值；&lt;/li&gt;
  &lt;li&gt;首部检验和被重新计算。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如，对于一个长20字节的首部和一个MTU为1,500的以太网，分片偏移量将会是：0、(1480/8)=185、(2960/8)=370、(4440/8)=555、(5920/8)=740、等等。&lt;/p&gt;

&lt;p&gt;如果报文经过路径的MTU减小了，那么分片可能会被再次分片。&lt;/p&gt;

&lt;p&gt;比如，一个4,500字节的数据载荷被封装进了一个没有选项的IP报文（即总长为4,520字节），并在MTU为2,500字节的链路上传输，那么它会被破成如下两个分片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-ip/2.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，假设下一跳的MTU为1,500字节，那么每一个分片都会被再次分成两片(由于数据片段只有在目的主机才重新被组成数据报，因此再次分片是针对每个在网络中传输的数据帧)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-ip/3.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第3和4片是从原始第2片再次分片而来，所以除了分片后的最后一个分片外MF为都为1。&lt;/p&gt;

&lt;p&gt;当一个接收者发现IP报文的下列项目之一为真时：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DF标志为0；&lt;/li&gt;
  &lt;li&gt;分片偏移量字段不为0。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;它便知道这个报文已被分片，并随即将数据、标识符字段、分片偏移量和更多分片标志一起储存起来。&lt;/p&gt;

&lt;p&gt;当接受者收到了更多分片标志未被设置的分片时，它便知道原始数据载荷的总长。一旦它收齐了所有的分片，它便可以将所有片按照正确的顺序（通过分片偏移量）组装起来，并交给上层协议栈。&lt;/p&gt;
</description>
            <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>网络基础 - 互联网控制消息协议(ICMP)</title>
            <link>/2018/04/30/network-icmp.html</link>
            <guid isPermaLink="true">/2018/04/30/network-icmp.html</guid>
            <description>&lt;p&gt;互联网控制消息协议（Internet Control Message Protocol, ICMP）是TCP/IP协议族中的一个效用协议，负责提供在TCP/IP网络上设备、服务以及路由器可用性的消息。&lt;/p&gt;

&lt;h4 id=&quot;icmp-头&quot;&gt;ICMP 头&lt;/h4&gt;

&lt;p&gt;ICMP是IP的一部分并依赖IP来传递消息。ICMP头相对较小并根据用途而改变。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-icmp/1.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;类型（Type）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ICMP消息基于RFC规范的类型或分类。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码（Code）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ICMP消息基于RFC规范的子类型。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;校验和（Checksum）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来保证ICMP头和数据在抵达目的地时的完整性。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可变域（Variable）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;依赖于类型和代码域的部分。&lt;/p&gt;

&lt;h4 id=&quot;icmp类型和消息&quot;&gt;ICMP类型和消息&lt;/h4&gt;

&lt;p&gt;ICMP数据包的结构取决于它由Type和Code域中的值所定义的用途。&lt;/p&gt;

&lt;p&gt;你可以将ICMP的类型域作为数据包的分类，而Code域作为它的子类。举例来说，Type域的值为3时意味着“目标不可达”。但只有这个信息不足以发现问题，当如果数据包在Code域中知名值为3，也就是“端口不可达”时，你就可以知道这应该是你试图进行通信的端口的问题。&lt;/p&gt;

&lt;p&gt;所有可用的ICMP类型和代码，可参考&lt;a href=&quot;https://www.iana.org/assignments/icmp-parameters&quot;&gt;https://www.iana.org/assignments/icmp-parameter&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
    </channel>
</rss>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>小白</title>
        <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
        <link>http://localhost:4000/</link>
        <description></description>
        <pubDate>Tue, 15 May 2018 22:55:19 +0800</pubDate>
        
        <item>
            <title>fabric入门（五）安装和实例化链码</title>
            <link>/2018/05/13/hyperledger-fabric-5.html</link>
            <guid isPermaLink="true">/2018/05/13/hyperledger-fabric-5.html</guid>
            <description>&lt;h4 id=&quot;安装启动链码&quot;&gt;安装启动链码&lt;/h4&gt;

&lt;p&gt;首先，在将示例代码安装到4个peer节点中的其中一个。这个命令将源代码放到peer节点的文件系统中。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 1.0 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; github.com/hyperledger/fabric-samples/chaincode/chaincode_example02/go/chaincode_example02
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，在信道上实例化chaincode。这将初始化信道上的链码，设置链码的背书策略，为目标peer节点启动一个chaincode容器注意-P参数。这是我们需要指定的当这个chaincode的交易需要被验证的时侯的背书策略。&lt;/p&gt;

&lt;p&gt;在下面的命令中，你会注意到我们指定 -P “OR (‘Org0MSP.member’,’Org1MSP.member’)” 作为背书策略。这意味着我们需要Org1或者Org2组织中的其中一个的节点的背书即可（即只有一个背书）。如果我们改变语法为AND那么我们就需要2个背书者。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode instantiate &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; orderer.example.com:7050 &lt;span class=&quot;nt&quot;&gt;--tls&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CORE_PEER_TLS_ENABLED&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cafile&lt;/span&gt; /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 1.0 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;, &quot;100&quot;, &quot;b&quot;,&quot;200&quot;]}'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OR ('Org1MSP.member','Org2MSP.member')&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;调用&quot;&gt;调用&lt;/h4&gt;

&lt;p&gt;现在让我们从a账户转10到b账户。这个交易将创建一个新的区块并更新state DB。调用语法如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode invoke &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; orderer.example.com:7050  &lt;span class=&quot;nt&quot;&gt;--tls&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CORE_PEER_TLS_ENABLED&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cafile&lt;/span&gt; /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem  &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;查询&quot;&gt;查询&lt;/h4&gt;

&lt;p&gt;让我们确认下我们之前的调用被正确地执行了。我们初始化了a的值为100，在上一次调用的时侯转移了10给b。因此，查询a应该展示90。查询的语法如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;peer chaincode query &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mycc &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们应该看到以下内容：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Query Result: 90
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric入门（四）启动网络</title>
            <link>/2018/05/13/hyperledger-fabric-4.html</link>
            <guid isPermaLink="true">/2018/05/13/hyperledger-fabric-4.html</guid>
            <description>&lt;h4 id=&quot;启动网络&quot;&gt;启动网络&lt;/h4&gt;

&lt;p&gt;我们将利用docker-compose脚本来启动我们的区块链网络。&lt;/p&gt;

&lt;p&gt;在开始前，我们先注释掉&lt;strong&gt;docker-compose-cli.yml&lt;/strong&gt;的一段&lt;strong&gt;command: /bin/bash&lt;/strong&gt;代码，不然该脚本将在网络启动时执行所有命令.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cli:
    container_name: cli
    image: hyperledger/fabric-tools:&lt;span class=&quot;nv&quot;&gt;$IMAGE_TAG&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;tty&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true
    &lt;/span&gt;stdin_open: &lt;span class=&quot;nb&quot;&gt;true
    &lt;/span&gt;environment:
      - &lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath
      - &lt;span class=&quot;nv&quot;&gt;CORE_VM_ENDPOINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;unix:///host/var/run/docker.sock
      &lt;span class=&quot;c&quot;&gt;#- CORE_LOGGING_LEVEL=DEBUG&lt;/span&gt;
      - &lt;span class=&quot;nv&quot;&gt;CORE_LOGGING_LEVEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;INFO
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cli
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer0.org1.example.com:7051
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_LOCALMSPID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Org1MSP
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ROOTCERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - &lt;span class=&quot;nv&quot;&gt;CORE_PEER_MSPCONFIGPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    &lt;span class=&quot;c&quot;&gt;#command: /bin/bash&lt;/span&gt;
    volumes:
        - /var/run/:/host/var/run/
        - ./../chaincode/:/opt/gopath/src/github.com/chaincode
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    networks:
      - byfn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动网络&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CHANNEL_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TIMEOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;pick_a_value&amp;gt; docker-compose &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; docker-compose-cli.yaml up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行完如图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-13-hyperledger-fabric-1/1.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;创建加入信息&quot;&gt;创建&amp;amp;加入信息&lt;/h4&gt;

&lt;p&gt;进入cli容器，后面命令都是在cli容器中进行&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; cli bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;回想一下，我们使用configtxgen工具生成信道配置-channel.tx。我们将这个配置作为请求的一部分传递给order。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHANNEL_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mychannel
peer channel create &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; orderer.example.com:7050 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./channel-artifacts/channel.tx &lt;span class=&quot;nt&quot;&gt;--tls&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CORE_PEER_TLS_ENABLED&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cafile&lt;/span&gt; /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;返回一个创世区块-&lt;channel-ID.block&gt;-我们将使用它加入信道。它包含了channel.tx中的配置信息。&lt;/channel-ID.block&gt;&lt;/p&gt;

&lt;p&gt;接下来让其他节点加入信道&lt;/p&gt;

&lt;p&gt;org1.peer1&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_MSPCONFIGPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer0.org1.example.com:7051
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_LOCALMSPID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Org1MSP&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ROOTCERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
peer channel &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; mychannel.block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;org1.peer1&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_MSPCONFIGPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer1.org1.example.com:7051
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_LOCALMSPID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Org1MSP&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ROOTCERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt
peer channel &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; mychannel.block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;org2.peer0&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_MSPCONFIGPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer0.org2.example.com:7051
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_LOCALMSPID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Org2MSP&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ROOTCERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
peer channel &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; mychannel.block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;org2.peer1&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_MSPCONFIGPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;peer1.org2.example.com:7051
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_LOCALMSPID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Org2MSP&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CORE_PEER_TLS_ROOTCERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt
peer channel &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; mychannel.block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric入门（三）加密&amp;交易生成器</title>
            <link>/2018/05/13/hyperledger-fabric-3.html</link>
            <guid isPermaLink="true">/2018/05/13/hyperledger-fabric-3.html</guid>
            <description>&lt;p&gt;通过查看&lt;strong&gt;./byfn.sh&lt;/strong&gt;这个shell启动脚本，我们知道一开始的执行流程。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Create the network using docker compose&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;up&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;networkUp
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;down&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## Clear the network&lt;/span&gt;
  networkDown
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;generate&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## Generate Artifacts&lt;/span&gt;
  generateCerts
  replacePrivateKey
  generateChannelArtifacts
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;restart&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## Restart the network&lt;/span&gt;
  networkDown
  networkUp
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;upgrade&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## Upgrade the network from v1.0.x to v1.1&lt;/span&gt;
  upgradeNetwork
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;printHelp
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先是&lt;strong&gt;generateCerts&lt;/strong&gt;这个方法&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;generateCerts &lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  which cryptogen
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cryptogen tool not found. exiting&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##########################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##### Generate certificates using cryptogen tool #########&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##########################################################&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;crypto-config&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Rf&lt;/span&gt; crypto-config
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
  cryptogen generate &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./crypto-config.yaml
  &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed to generate certificates...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;里面用到的&lt;strong&gt;cryptogen&lt;/strong&gt;用来为我们生成各种网络实体的加密材料（x509证书）。这些证书是身份的代表，它们允许在我们的网络实体进行交流和交易时进行签名/验证身份验证。&lt;/p&gt;

&lt;p&gt;Cryptogen消费一个包含网络拓扑的crypto-config.yaml，并允许我们为组织和属于这些组织的组件生成一组证书和密钥。每个组织都配置了唯一的根证书(ca-cert),它将特定组件（peers和orders）绑定到该组织。通过为每一个组织分配唯一的CA证书，我们正在模仿一个经典的网络，这个网络中的成员将使用自己的证书颁发机构。Hyperledger Fabric中的交易和通信是通过存储在keystore中的实体的私钥签名，然后通过公钥手段进行验证（signcerts）。&lt;/p&gt;

&lt;p&gt;所以我们第一步运行以下命令，生成的证书和密钥将被保存到名为crypto-config的文件夹中。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cryptogen generate &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./crypto-config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来的&lt;strong&gt;replacePrivateKey&lt;/strong&gt;方法主要用于e2e网络，我们暂时用不到，先跳过。&lt;/p&gt;

&lt;p&gt;接下来是&lt;strong&gt;generateChannelArtifacts&lt;/strong&gt;这个方法，用来生成order的创世区块，信道的交易配置以及两个anchor peer transactions一个对应一个Peer组织。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;generateChannelArtifacts&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  which configtxgen
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;configtxgen tool not found. exiting&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi

  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##########################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#########  Generating Orderer Genesis block ##############&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##########################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Note: For some unknown reason (at least for now) the block file can't be&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# named orderer.genesis.block or the orderer will fail to launch!&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
  configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsOrdererGenesis &lt;span class=&quot;nt&quot;&gt;-outputBlock&lt;/span&gt; ./channel-artifacts/genesis.block
  &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed to generate orderer genesis block...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;### Generating channel configuration transaction 'channel.tx' ###&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
  configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputCreateChannelTx&lt;/span&gt; ./channel-artifacts/channel.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed to generate channel configuration transaction...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi

  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#######    Generating anchor peer update for Org1MSP   ##########&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
  configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputAnchorPeersUpdate&lt;/span&gt; ./channel-artifacts/Org1MSPanchors.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-asOrg&lt;/span&gt; Org1MSP
  &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed to generate anchor peer update for Org1MSP...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi

  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#######    Generating anchor peer update for Org2MSP   ##########&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#################################################################&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
  configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputAnchorPeersUpdate&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  ./channel-artifacts/Org2MSPanchors.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-asOrg&lt;/span&gt; Org2MSP
  &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failed to generate anchor peer update for Org2MSP...&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先，我们需要设置一个环境变量来告诉configtxgen哪里去寻找configtx.yaml。然后，我们将调用configtxgen工具去创建orderer genesis block：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_CFG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;
configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsOrdererGenesis &lt;span class=&quot;nt&quot;&gt;-outputBlock&lt;/span&gt; ./channel-artifacts/genesis.block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，我们需要创建channel transaction配置。请确保替换$CHANNEL_NAME或者将CHANNEL_NAME设置为整个说明中可以使用的环境变量：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHANNEL_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mychannel
configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputCreateChannelTx&lt;/span&gt; ./channel-artifacts/channel.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，我们将在正在构建的通道上定义Org1的anchor peer。请再次确认$CHANNEL_NAME已被替换或者为以下命令设置了环境变量：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputAnchorPeersUpdate&lt;/span&gt; ./channel-artifacts/Org1MSPanchors.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-asOrg&lt;/span&gt; Org1MSP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在，我们将在同一个通道定义Org2的anchor peer：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;configtxgen &lt;span class=&quot;nt&quot;&gt;-profile&lt;/span&gt; TwoOrgsChannel &lt;span class=&quot;nt&quot;&gt;-outputAnchorPeersUpdate&lt;/span&gt; ./channel-artifacts/Org2MSPanchors.tx &lt;span class=&quot;nt&quot;&gt;-channelID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CHANNEL_NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-asOrg&lt;/span&gt; Org2MSP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric入门（二）启动&amp;关闭网络</title>
            <link>/2018/05/13/hyperledger-fabric-2.html</link>
            <guid isPermaLink="true">/2018/05/13/hyperledger-fabric-2.html</guid>
            <description>&lt;p&gt;进入官方示例&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/hyperledger/fabric-samples/first-network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一步生成我们各种网络实体的所有证书和密钥，genesis block用于引导排序服务，以及配置Channel所需要的一组交易配置集合。  &lt;br /&gt;
运行以下命令：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./byfn.sh &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来可以使用以下命令来启动整个网络。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./byfn.sh &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果看到一个大大的&lt;strong&gt;END&lt;/strong&gt;说明执行成功了。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;=====================&lt;/span&gt; All GOOD, BYFN execution completed &lt;span class=&quot;o&quot;&gt;=====================&lt;/span&gt;
 _____   _   _   ____
| ____| | &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;| | |  _ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
|  _|   |  &lt;span class=&quot;se&quot;&gt;\|&lt;/span&gt; | | | | |
| |___  | |&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; | | |_| |
|_____| |_| &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;| |____/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以通过以下命令来关闭刚才打开的网络：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./byfn.sh &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了能详细了解里面的操作流程，接下来我们不通过这个方式来启动，而是拆分&lt;strong&gt;./byfn.sh&lt;/strong&gt;这个shell脚本来执行。请点击查看&lt;a href=&quot;/2018/05/13/hyperledger-fabric-3.html&quot;&gt;fabric入门（三）启动&amp;amp;关闭网络&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>fabric入门（一）安装</title>
            <link>/2018/05/13/hyperledger-fabric-1.html</link>
            <guid isPermaLink="true">/2018/05/13/hyperledger-fabric-1.html</guid>
            <description>&lt;h2 id=&quot;安装镜像&quot;&gt;安装镜像&lt;/h2&gt;

&lt;p&gt;镜像可以自己安装，也可以借助官网的samples来帮我们实现。&lt;/p&gt;

&lt;p&gt;从&lt;a href=&quot;http://hyperledger-fabric.readthedocs.io/en/latest/install.html&quot;&gt;官网&lt;/a&gt;可以看到，安装需要执行一个脚本：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://goo.gl/6wtTN5 | bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 1.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不过这个需要翻墙，可以直接把文本下载下来。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Copyright IBM Corp. All Rights Reserved.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# SPDX-License-Identifier: Apache-2.0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# if version not passed in, default to latest released version&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.1.0
&lt;span class=&quot;c&quot;&gt;# if ca version not passed in, default to latest released version&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# current version of thirdparty images (couchdb, kafka and zookeeper) released&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_IMAGE_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.4.6
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;|tr &lt;span class=&quot;s1&quot;&gt;'[:upper:]'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[:lower:]'&lt;/span&gt;|sed &lt;span class=&quot;s1&quot;&gt;'s/mingw64_nt.*/windows/'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/x86_64/amd64/g'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

printHelp&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: bootstrap.sh [&amp;lt;version&amp;gt;] [&amp;lt;ca_version&amp;gt;] [&amp;lt;thirdparty_version&amp;gt;][-d -s -b]&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-d - bypass docker image download&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-s - bypass fabric-samples repo clone&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-b - bypass download of platform-specific binaries&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;e.g. bootstrap.sh 1.1.1 -s&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;would download docker images and binaries for version 1.1.1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

dockerFabricPull&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IMAGES &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;peer orderer ccenv javaenv tools&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; FABRIC IMAGE: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo
      &lt;/span&gt;docker pull hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$FABRIC_TAG&lt;/span&gt;
      docker tag hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$FABRIC_TAG&lt;/span&gt; hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

dockerThirdPartyImagesPull&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IMAGES &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;couchdb kafka zookeeper&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; THIRDPARTY DOCKER IMAGE: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo
      &lt;/span&gt;docker pull hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$THIRDPARTY_TAG&lt;/span&gt;
      docker tag hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$THIRDPARTY_TAG&lt;/span&gt; hyperledger/fabric-&lt;span class=&quot;nv&quot;&gt;$IMAGES&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

dockerCaPull&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; FABRIC CA IMAGE&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo
      &lt;/span&gt;docker pull hyperledger/fabric-ca:&lt;span class=&quot;nv&quot;&gt;$CA_TAG&lt;/span&gt;
      docker tag hyperledger/fabric-ca:&lt;span class=&quot;nv&quot;&gt;$CA_TAG&lt;/span&gt; hyperledger/fabric-ca
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

samplesInstall&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# clone (if needed) hyperledger/fabric-samples and checkout corresponding&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# version to the binaries and docker images to be downloaded&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; first-network &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# if we are in the fabric-samples repo, checkout corresponding version&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Checking out v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; branch of hyperledger/fabric-samples&quot;&lt;/span&gt;
    git checkout v&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; fabric-samples &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# if fabric-samples repo already cloned and in current directory,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# cd fabric-samples and checkout corresponding version&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Checking out v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; branch of hyperledger/fabric-samples&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fabric-samples &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout v&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Cloning hyperledger/fabric-samples repo and checkout v&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    git clone &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; master https://github.com/hyperledger/fabric-samples.git &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fabric-samples &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout v&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Incrementally downloads the .tar.gz file locally first, only decompressing it&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# after the download is complete. This is slower than binaryDownload() but&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# allows the download to be resumed.&lt;/span&gt;
binaryIncrementalDownload&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
      curl &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; - &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# Due to limitations in the current Nexus repo:&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# curl returns 33 when there's a resume attempt with no more bytes to download&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# curl returns 2 after finishing a resumed download&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# with -f curl returns 22 on a 404&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 22 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;# looks like the requested file doesn't actually exist so stop here&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;22
      &lt;span class=&quot;k&quot;&gt;fi
      if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 33 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 2 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;# The checksum validates that RC 33 or 2 are not real failures&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; File downloaded. Verifying the md5sum...&quot;&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;localMd5sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;md5sum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;remoteMd5sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.md5&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$localMd5sum&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$remoteMd5sum&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
              &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; Extracting &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&quot;&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xzf ./&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--overwrite&lt;/span&gt;
	      &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; Done.&quot;&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.md5
          &lt;span class=&quot;k&quot;&gt;else
              &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Download failed: the local md5sum is different from the remote md5sum. Please try again.&quot;&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.md5
              &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
          &lt;span class=&quot;k&quot;&gt;fi
      else
          &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Failure downloading binaries (curl RC=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;). Please try again and the download will resume from where it stopped.&quot;&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
      &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This will attempt to download the .tar.gz all at once, but will trigger the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# binaryIncrementalDownload() function upon a failure, allowing for resume&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# if there are network failures.&lt;/span&gt;
binaryDownload&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Downloading: &quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;# Check if a previous failure occurred and the file was partially downloaded&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
          &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; Partial binary file found. Resuming download...&quot;&lt;/span&gt;
          binaryIncrementalDownload &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else
          &lt;/span&gt;curl &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xz &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
              &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; There was an error downloading the binary file. Switching to incremental download.&quot;&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; Downloading file...&quot;&lt;/span&gt;
              binaryIncrementalDownload &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;else
	      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;==&amp;gt; Done.&quot;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;fi
      fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

binariesInstall&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Downloading version &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; platform specific fabric binaries&quot;&lt;/span&gt;
  binaryDownload &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 22 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
     &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
     echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;------&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; platform specific fabric binary is not available to download &amp;lt;----&quot;&lt;/span&gt;
     &lt;span class=&quot;nb&quot;&gt;echo
   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi

  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Downloading version &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; platform specific fabric-ca-client binary&quot;&lt;/span&gt;
  binaryDownload &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric-ca/hyperledger-fabric-ca/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_BINARY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 22 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
     &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
     echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;------&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; fabric-ca-client binary is not available to download  (Available from 1.1.0-rc1) &amp;lt;----&quot;&lt;/span&gt;
     &lt;span class=&quot;nb&quot;&gt;echo
   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

dockerInstall&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  which docker &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp; /dev/null
  &lt;span class=&quot;nv&quot;&gt;NODOCKER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NODOCKER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
	  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Pulling fabric Images&quot;&lt;/span&gt;
	  dockerFabricPull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Pulling fabric ca Image&quot;&lt;/span&gt;
	  dockerCaPull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; Pulling thirdparty docker images&quot;&lt;/span&gt;
	  dockerThirdPartyImagesPull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_TAG&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;nb&quot;&gt;echo
	  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;===&amp;gt; List out hyperledger docker images&quot;&lt;/span&gt;
	  docker images | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;hyperledger&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=========================================================&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Docker not installed, bypassing download of Fabric images&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;=========================================================&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DOCKER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SAMPLES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARIES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Parse commandline args pull out&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# version and/or ca-version strings first&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_IMAGE_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi
  fi
fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# prior to 1.2.0 architecture was determined by uname -m&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ ^1&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0-1]&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_IMAGE_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# starting with 1.2.0, multi-arch images will be default&lt;/span&gt;
  : &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_TAG&lt;/span&gt;:&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CA_VERSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  : &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FABRIC_TAG&lt;/span&gt;:&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  : &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;THIRDPARTY_TAG&lt;/span&gt;:&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$THIRDPARTY_IMAGE_VERSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BINARY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hyperledger-fabric-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.tar.gz
&lt;span class=&quot;nv&quot;&gt;CA_BINARY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hyperledger-fabric-ca-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.tar.gz

&lt;span class=&quot;c&quot;&gt;# then parse opts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getopts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;h?dsb&quot;&lt;/span&gt; opt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$opt&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    &lt;/span&gt;h|&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      printHelp
      &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    d&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;DOCKER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    s&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;SAMPLES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    b&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;BINARIES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SAMPLES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Installing hyperledger/fabric-samples repo&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo
  &lt;/span&gt;samplesInstall
&lt;span class=&quot;k&quot;&gt;fi
if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BINARIES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Installing Hyperledger Fabric binaries&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo
  &lt;/span&gt;binariesInstall
&lt;span class=&quot;k&quot;&gt;fi
if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DOCKER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
  echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Installing Hyperledger Fabric docker images&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo
  &lt;/span&gt;dockerInstall
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;保存为&lt;code class=&quot;highlighter-rouge&quot;&gt;install.sh&lt;/code&gt;，并执行&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash ./install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个脚本会去Docker Hub上下载相应的镜像到本地的docker里面，所以&lt;strong&gt;运行脚本前需要启动docker服务&lt;/strong&gt;。  &lt;br /&gt;
同时，还会去下载对应平台的二进制文件，也就是bin目录。&lt;/p&gt;

&lt;p&gt;整个下载过程还是相当卡的，所以还是建议用代理来执行。&lt;/p&gt;

&lt;p&gt;执行完成后如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-05-13-hyperledger-fabric-1/1.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;下载源码&quot;&gt;下载源码&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/hyperledger/fabric
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于接下来的实例，需要用到指定路径，所以下载完成后，需要完成以下两个步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;把它挪到$GOPATH路径下 &lt;strong&gt;$GOPATH/src/github.com/hyperledger/fabric&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;设置软链接&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt; /opt/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>网络基础 - 用户数据报协议(UDP)</title>
            <link>/2018/04/30/network-udp.html</link>
            <guid isPermaLink="true">/2018/04/30/network-udp.html</guid>
            <description>&lt;p&gt;用户数据报协议（User Datagram Protocol, UDP）是在现代网络中最常使用的另外一种第4层协议。如果说TCP是为了满足带有内在错误检测的可靠数据传输，那么UDP主要是为了提供高速的传输。处于这个原因，UDP是一种尽力服务，通常会被称为无连接协议。一个无连接协议并不会正式的建立和结束主机之前的连接，也不会像TCP那样存在握手和终止进程。&lt;/p&gt;

&lt;p&gt;无连接协议意味着不可靠服务，这将使得UDP流量不稳定。依赖于UDP的协议通常都会有其内置的可靠性服务，或者使用ICMP的一些功能来保证连接更可靠一些。举例来说，应用层协议DNS和DHCP需要高度依赖数据包在网络上的传输速度，其使用UDP作为它们的传输层协议，但是它们自己进行错误检查以及重传计时。&lt;/p&gt;

&lt;h4 id=&quot;udp-头&quot;&gt;UDP 头&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-udp/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;源端口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来传输数据包的端口。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;目标端口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据包将要被传输到的端口。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据包长度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据包的字节长度。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;校验和&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来确保UDP头和数据到达时的完整性。&lt;/p&gt;

</description>
            <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>网络基础 - 传输控制协议(TCP)</title>
            <link>/2018/04/30/network-tcp.html</link>
            <guid isPermaLink="true">/2018/04/30/network-tcp.html</guid>
            <description>&lt;p&gt;传输控制协议（Transmission Control Protocol, TCP）的最终目的是为数据提供可靠的端到端传输。&lt;/p&gt;

&lt;h4 id=&quot;tcp-头&quot;&gt;TCP 头&lt;/h4&gt;

&lt;p&gt;数据结构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-tcp/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;源端口（Source Port）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来传输数据包的端口。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;目的端口（Destination Port）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据包将要被发送到的端口。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;序号（Sequence Number）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个数字用来表示一个TCP片段。这个域用来保证数据流的部分没有缺失。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确认号（Acknowledgment Number）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个数字是通信中希望从另一设备得到的下一个数据包的序号。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;标记（Flags）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;URG、ACK、PSH、RST、SYN 和 FIN 标记都是用来表示所传输的TCP数据包的类型。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;窗口大小（Window Size）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TCP接收者缓冲的字节大小。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;校验和（Checksum）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来保证TCP头和数据的内容在抵达目的地时的完整性。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;紧急指针（Urgent Pointer）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果设置了URG位，这个域将被检查作为额外的指令，告诉CPU从数据包的哪里开始读取数据。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;选项（Options）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各种可选的域，可以在TCP数据包中进行指定。&lt;/p&gt;

&lt;h4 id=&quot;tcp端口&quot;&gt;TCP端口&lt;/h4&gt;

&lt;p&gt;在使用TCP进行通信时，我们有65535个端口可以使用，并通常将这些端口分成两个部分。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1~1023 是标准端口组，特定服务会用到这些通常位于标准端口分组中的标准端口。&lt;/li&gt;
  &lt;li&gt;1024~65535 是临时端口组，当一个服务想在任意时间使用端口进行通信时，现代操作系统都会随机的选择一个源端口，让这个通信使用唯一源端口。这些源端口通常就位于临时端口组。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;三次握手&quot;&gt;三次握手&lt;/h4&gt;

&lt;p&gt;主要达到的目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保证源主机确定目标主机在线，并且可以进行通信。&lt;/li&gt;
  &lt;li&gt;让源主机检查它是否正在监听试图去连接的端口。&lt;/li&gt;
  &lt;li&gt;允许源主机向接收者发送它的起始序列号，是的两台主机可以将数据包流保持有序。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体步骤如下：&lt;/p&gt;

&lt;script src=&quot;https://cdn.rawgit.com/knsv/mermaid/6.0.0/dist/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    participant A as 主机A
    participant B as 主机B
    A-&amp;gt;&amp;gt;B: SYN
    B-&amp;gt;&amp;gt;A: SYN/ACK
    A-&amp;gt;&amp;gt;B: ACK
&lt;/div&gt;

&lt;p&gt;具体说明：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;请求新的 TCP 连接时，客户端要向服务器发送⼀个⼩的 TCP 分组（通常是 40 ～ 60 个字节）。这个分组中设置了⼀个特殊的 SYN 标记，说明这是⼀个连接请求。（如上图a）。&lt;/li&gt;
  &lt;li&gt;如果服务器接受了连接，就会对⼀些连接参数进⾏计算，并向客户端回送⼀个 TCP 分组，这个分组中的 SYN 和 ACK 标记都被置位，说明连接请求已被接受（如上图b）。&lt;/li&gt;
  &lt;li&gt;最后，客户端向服务器回送⼀条确认信息，通知它连接已成功建⽴（如上图c）。现代的 TCP 栈都允许客户端在这个确认分组中发送数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;tcp终止&quot;&gt;TCP终止&lt;/h4&gt;

&lt;p&gt;具体步骤如下：&lt;/p&gt;

&lt;script src=&quot;https://cdn.rawgit.com/knsv/mermaid/6.0.0/dist/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    participant A as 主机A
    participant B as 主机B
    A-&amp;gt;&amp;gt;B: FIN/ACK
    B-&amp;gt;&amp;gt;A: ACK
    B-&amp;gt;&amp;gt;A: FIN/ACK
    A-&amp;gt;&amp;gt;B: ACK
&lt;/div&gt;

&lt;p&gt;具体说明：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;主机A通过发送一个设置了FIN和ACK标志的TCP数据包，告诉主机B通信的完成。&lt;/li&gt;
  &lt;li&gt;主机B以一个ACK数据包响应，并传输自己的FIN/ACK数据包。&lt;/li&gt;
  &lt;li&gt;主机A响应一个ACK数据包，然后结束通信过程。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;tcp重置&quot;&gt;TCP重置&lt;/h4&gt;

&lt;p&gt;在理想情况中，每一个连接都会以TCP终止来正常的结束。但在现实中，连接经常会突然断掉。举例来说，者可能由于一个潜在的攻击者正在进行端口扫描，或者仅仅是主机配置错误。在这种情况下，就需要使用设置了RST标志的TCP数据包。RST标志用来表示连接被异常中止或拒绝连接请求。&lt;/p&gt;
</description>
            <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>网络基础 - IP协议</title>
            <link>/2018/04/30/network-ip.html</link>
            <guid isPermaLink="true">/2018/04/30/network-ip.html</guid>
            <description>&lt;h4 id=&quot;ipv4&quot;&gt;IPv4&lt;/h4&gt;

&lt;p&gt;IP地址是一个32位的二进制数，通常被分割为4个“8位二进制数”（也就是4个字节）。IP地址通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d都是0~255之间的十进制整数。例：点分十进IP地址（100.4.5.6），实际上是32位二进制数（01100100.00000100.00000101.00000110）。&lt;/p&gt;

&lt;p&gt;IP地址呗分成4个独立部分，是因为每个IP地址都包含有两个部分：网络地址和主机地址。网络地址用来标识设备所连接到的局域网，而主机地址则标识这个网络中的设备本身。而如何划分这四个部分，是由另一组名为&lt;strong&gt;网络掩码(netmask, network mask)&lt;/strong&gt;的地址信息决定的，有时也成为&lt;strong&gt;子网掩码(subnet mask)&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;网络掩码也是32位长，并且被设为1的每一位都标识者IP地址的对应部分是属于网络地址的，而剩下设为0的部分则标识者主机地址。&lt;/p&gt;

&lt;p&gt;IP地址和网络掩码为简便起见，通常会被写成&lt;strong&gt;无类型域间选路*(Classless Inter-Domain Routing, CIDR)&lt;/strong&gt;。在这种形式下，一个完整的IP地址后面会有一个左斜杠，以及一个用来标识IP地址中网络部分位数的数字。举例，IP地址10.10.1.22和网络掩码255.255.0.0，在CIDR表示下会写成10.10.1.22/16.&lt;/p&gt;

&lt;h4 id=&quot;报文结构&quot;&gt;报文结构&lt;/h4&gt;

&lt;p&gt;IPv4报文的首部包含14个字段，其中13个是必须的，第14个是可选的（红色标出），并命名为：“选项”字段。首部中的字段均以大端序包装，在以下的图表和讨论中，最高有效位（Most Significant bit）被标记为0。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-ip/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;版本（Version）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;版本字段占4bit，通信双方使用的版本必须一致。对于IPv4，字段的值是4。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首部长度（Internet Header Length， IHL）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;占4bit，首部长度说明首部有多少32位字（4字节）。由于IPv4首部可能包含数目不定的选项，这个字段也用来确定数据的偏移量。这个字段的最小值是5（二进制0101），相当于5*4=20字节（RFC 791），最大十进制值是15。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;区分服务（Differentiated Services，DS）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;占8bit，最初被定义为服务类型字段，实际上并未使用，但1998年被IETF重定义为区分服务RFC 2474。只有在使用区分服务时，这个字段才起作用，在一般的情况  下都不使用这个字段。例如需要实时数据流的技术会应用这个字段，一个例子是VoIP。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;显式拥塞通告（ Explicit Congestion Notification，ECN）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在RFC 3168中定义，允许在不丢弃报文的同时通知对方网络拥塞的发生。ECN是一种可选的功能，仅当两端都支持并希望使用，且底层网络支持时才被使用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;全长（Total Length）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个16位字段定义了报文总长，包含首部和数据，单位为字节。这个字段的最小值是20（20字节首部+0字节数据），最大值是216-1=65,535。IP规定所有主机都必须支持最小576字节的报文，这是假定上层数据长度512字节，加上最长IP首部60字节，加上4字节富裕量，得出576字节，但大多数现代主机支持更大的报文。当下层的数据链路协议的最大传输单元（MTU）字段的值小于IP报文长度时间，报文就必须被分片.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;标识符（Identification）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;占16位，这个字段主要被用来唯一地标识一个报文的所有分片，因为分片不一定按序到达，所以在重组时需要知道分片所属的报文。每产生一个数据报，计数器加1，并赋值给此字段。一些实验性的工作建议将此字段用于其它目的，例如增加报文跟踪信息以协助探测伪造的源地址。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;标志 （Flags）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个3位字段用于控制和识别分片，它们是：  &lt;br /&gt;
位0：保留，必须为0；  &lt;br /&gt;
位1：禁止分片（Don’t Fragment，DF），当DF=0时才允许分片；  &lt;br /&gt;
位2：更多分片（More Fragment，MF），MF=1代表后面还有分片，MF=0 代表已经是最后一个分片。  &lt;br /&gt;
如果DF标志被设置为1，但路由要求必须分片报文，此报文会被丢弃。这个标志可被用于发往没有能力组装分片的主机。  &lt;br /&gt;
当一个报文被分片，除了最后一片外的所有分片都设置MF为1。最后一个片段具有非零片段偏移字段，将其与未分片数据包区分开，未分片的偏移字段为0。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分片偏移 （Fragment Offset）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个13位字段指明了每个分片相对于原始报文开头的偏移量，以8字节作单位。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;存活时间（Time To Live，TTL）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个8位字段避免报文在互联网中永远存在（例如陷入路由环路）。存活时间以秒为单位，但小于一秒的时间均向上取整到一秒。在现实中，这实际上成了一个跳数计数器：报文经过的每个路由器都将此字段减1，当此字段等于0时，报文不再向下一跳传送并被丢弃，最大值是255。常规地，一份ICMP报文被发回报文发送端说明其发送的报文已被丢弃。这也是traceroute的核心原理。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;协议 （Protocol）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;占8bit，这个字段定义了该报文数据区使用的协议。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首部检验和 （Header Checksum）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个16位检验和字段只对首部查错，不包括数据部分。在每一跳，路由器都要重新计算出的首部检验和并与此字段进行比对，如果不一致，此报文将会被丢弃。重新计算的必要性是因为每一跳的一些首部字段（如TTL、Flag、Offset等）都有可能发生变化，不检查数据部分是为了减少工作量。数据区的错误留待上层协议处理——用户数据报协议（UDP）和传输控制协议（TCP）都有检验和字段。此处的检验计算方法不使用CRC。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;源地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个IPv4地址由四个字节共32位构成，此字段的值是将每个字节转为二进制并拼在一起所得到的32位值。  &lt;br /&gt;
例如，10.9.8.7是00001010000010010000100000000111。  &lt;br /&gt;
但请注意，因为NAT的存在，这个地址并不总是报文的真实发送端，因此发往此地址的报文会被送往NAT设备，并由它被翻译为真实的地址。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;目的地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;与源地址格式相同，但指出报文的接收端。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;选项&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;附加的首部字段可能跟在目的地址之后，但这并不被经常使用，从1到40个字节不等。请注意首部长度字段必须包括足够的32位字来放下所有的选项（包括任何必须的填充以使首部长度能够被32位整除）。当选项列表的结尾不是首部的结尾时，EOL（选项列表结束，0x00）选项被插入列表末尾。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用IP传递的实际数据。&lt;/p&gt;

&lt;h4 id=&quot;分片和组装&quot;&gt;分片和组装&lt;/h4&gt;

&lt;p&gt;一个数据包的分片主要是基于第2层数据链路协议所使用的最大传输单元（Maximum Transmission Unit, MTU）的大小，以及使用这些第2层协议设备的配置情况。多数情况下，第2层使用的数据链路协议是以太网。以太网的默认MTU是1500，也就是说，以太网的网络上所能传输的最大数据包大小是1500字节。&lt;/p&gt;

&lt;p&gt;当设备收到IP报文时，分析其目的地址并决定要在哪个链路上发送它。MTU决定了数据载荷的最大长度，如IP报文长度比MTU大，则IP数据包必须进行分片。每一片的长度都小于等于MTU减去IP首部长度。接下来每一片均被放到独立的IP报文中，并进行如下修改：&lt;/p&gt;

&lt;p&gt;总长字段被修改为此分片的长度；&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更多分片（MF）标志被设置，除了最后一片；&lt;/li&gt;
  &lt;li&gt;分片偏移量字段被调整为合适的值；&lt;/li&gt;
  &lt;li&gt;首部检验和被重新计算。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如，对于一个长20字节的首部和一个MTU为1,500的以太网，分片偏移量将会是：0、(1480/8)=185、(2960/8)=370、(4440/8)=555、(5920/8)=740、等等。&lt;/p&gt;

&lt;p&gt;如果报文经过路径的MTU减小了，那么分片可能会被再次分片。&lt;/p&gt;

&lt;p&gt;比如，一个4,500字节的数据载荷被封装进了一个没有选项的IP报文（即总长为4,520字节），并在MTU为2,500字节的链路上传输，那么它会被破成如下两个分片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-ip/2.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，假设下一跳的MTU为1,500字节，那么每一个分片都会被再次分成两片(由于数据片段只有在目的主机才重新被组成数据报，因此再次分片是针对每个在网络中传输的数据帧)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-ip/3.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第3和4片是从原始第2片再次分片而来，所以除了分片后的最后一个分片外MF为都为1。&lt;/p&gt;

&lt;p&gt;当一个接收者发现IP报文的下列项目之一为真时：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DF标志为0；&lt;/li&gt;
  &lt;li&gt;分片偏移量字段不为0。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;它便知道这个报文已被分片，并随即将数据、标识符字段、分片偏移量和更多分片标志一起储存起来。&lt;/p&gt;

&lt;p&gt;当接受者收到了更多分片标志未被设置的分片时，它便知道原始数据载荷的总长。一旦它收齐了所有的分片，它便可以将所有片按照正确的顺序（通过分片偏移量）组装起来，并交给上层协议栈。&lt;/p&gt;
</description>
            <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>网络基础 - 互联网控制消息协议(ICMP)</title>
            <link>/2018/04/30/network-icmp.html</link>
            <guid isPermaLink="true">/2018/04/30/network-icmp.html</guid>
            <description>&lt;p&gt;互联网控制消息协议（Internet Control Message Protocol, ICMP）是TCP/IP协议族中的一个效用协议，负责提供在TCP/IP网络上设备、服务以及路由器可用性的消息。&lt;/p&gt;

&lt;h4 id=&quot;icmp-头&quot;&gt;ICMP 头&lt;/h4&gt;

&lt;p&gt;ICMP是IP的一部分并依赖IP来传递消息。ICMP头相对较小并根据用途而改变。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-icmp/1.jpg&quot; alt=&quot;1.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;类型（Type）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ICMP消息基于RFC规范的类型或分类。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码（Code）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ICMP消息基于RFC规范的子类型。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;校验和（Checksum）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来保证ICMP头和数据在抵达目的地时的完整性。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可变域（Variable）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;依赖于类型和代码域的部分。&lt;/p&gt;

&lt;h4 id=&quot;icmp类型和消息&quot;&gt;ICMP类型和消息&lt;/h4&gt;

&lt;p&gt;ICMP数据包的结构取决于它由Type和Code域中的值所定义的用途。&lt;/p&gt;

&lt;p&gt;你可以将ICMP的类型域作为数据包的分类，而Code域作为它的子类。举例来说，Type域的值为3时意味着“目标不可达”。但只有这个信息不足以发现问题，当如果数据包在Code域中知名值为3，也就是“端口不可达”时，你就可以知道这应该是你试图进行通信的端口的问题。&lt;/p&gt;

&lt;p&gt;所有可用的ICMP类型和代码，可参考&lt;a href=&quot;https://www.iana.org/assignments/icmp-parameters&quot;&gt;https://www.iana.org/assignments/icmp-parameter&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>网络基础 - 域名系统(DNS)</title>
            <link>/2018/04/30/network-dns.html</link>
            <guid isPermaLink="true">/2018/04/30/network-dns.html</guid>
            <description>&lt;p&gt;域名系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。&lt;/p&gt;

&lt;h4 id=&quot;dns数据包结构&quot;&gt;DNS数据包结构&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-dns/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DNS ID号（DNS ID Numner）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来对应DNS查询和DNS响应。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;查询/响应（Query/Response, QR）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来指明这个数据包是DNS查询还是响应。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;操作代码（OpCode）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来定义消息中请求的类型。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;权威应答（Authoritative Answer, AA）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果响应数据包中设定了这个值，则说明这个响应是由域内权威域名服务器发出的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;截断（Truncation, TC）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来指明这个响应由于太长，无法装入数据包而被截断。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;期望递归（Recursion Desired, RD）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当请求中设定了这个值，则说明DNS客户端在目标域名服务器不含有所请求信息的情况下，要求进行递归查询。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可用递归（Recursion Available, RA）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当响应中设定了这个值，说明域名服务器支持递归查询。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保留（Z）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在RFC1035的规定中被全设为0，但有时会被用来作为RCode域的扩展。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;响应代码（Response Code）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在DNS响应中用来指明错误。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;问题计数（Question Count）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在问题区段中的条目数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;回答计数（Answer Count）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在回答区段中的条目数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;域名服务器计数（Name Server Count）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在权威区段的域名资源记录数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;额外记录计数（Additional Records Count）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在额外信息区段中其他资源记录数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;问题区段（Question section）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大小可变，包含有被发送到DNS服务器的一条或多条的信息查询部分。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;回答区段（Answer section）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大小可变，含有用来回答查询的一条或多条资源记录。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;权威区段（Authority section）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大小可变，包含指向权威域名服务器的资源记录，用以继续解析过程。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;额外信息区段（Additional Information section）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;包含资源记录且大小可变的区段。这些资源记录用来存储完全没有必要回答的查询相关的额外信息。&lt;/p&gt;

&lt;h4 id=&quot;dns递归&quot;&gt;DNS递归&lt;/h4&gt;

&lt;p&gt;由于互联网的DNS结构是层级式的，为了能有回答客户端提交的查询，DNS服务器必须能够彼此通信。我们的内部DNS服务器知道我们本地局域网服务器的名字和IP地址的映射，但不大可能知道谷歌的IP地址。&lt;/p&gt;

&lt;p&gt;当DNS服务器需要查找一个IP地址时，它会代表发出请求的客户端向另一个DNS服务器查询。实际上，这个DNS服务器与客户端的行为相同。这个过程叫做&lt;strong&gt;递归查询&lt;/strong&gt;。&lt;/p&gt;

&lt;script src=&quot;https://cdn.rawgit.com/knsv/mermaid/6.0.0/dist/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    participant A as DNS客户端
    participant B as 本地DNS服务器
    participant C as 外部DNS服务器
    A-&amp;gt;&amp;gt;B: 递归查询
    B-&amp;gt;&amp;gt;C: 递归查询
    C-&amp;gt;&amp;gt;B: 查询响应
    B-&amp;gt;&amp;gt;A: 查询响应
&lt;/div&gt;

&lt;h4 id=&quot;dns区域传送&quot;&gt;DNS区域传送&lt;/h4&gt;

&lt;p&gt;DNS区域是一个DNS服务器所授权管理的名字空间（或是一组DNS名称）。&lt;/p&gt;

&lt;p&gt;举例来说，baidu这个网站可能是由一个DNS服务器对baidu.com负责。这样，无论是baidu内部还是外部的设备，如果希望将baidu.com解析成IP地址，都需要和这个区域的权威，也就是这个DNS服务器联系。如果baidu发展壮大了，它可能会增加一个DNS服务器，专门用来处理其名字空间的email部分，如mail.baidu.com，那么这个服务器，就成为这个邮件子区域的权威。如果必要的话，还可以为子域名添加更多的DNS服务器。&lt;/p&gt;

&lt;p&gt;区域传送指处于荣誉备份的需要，在两台设备之间传送区域数据。举例来说，在拥有多个DNS服务器的组织中，管理员通常都会配置一台备用DNS服务器，用来维护一份主服务器DNS信息的拷贝，以防止DNS服务器不可欧阳。主要存在两种区域传送。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;完整区域传送（AXFR）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个类型的传送将整个区域在设备间进行传送。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;增量区域传送（IXFR）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个类型的传送仅传送区域信息的一部分。&lt;/p&gt;
</description>
            <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>网络基础 - 动态主机设置协议(DHCP)</title>
            <link>/2018/04/30/network-dhcp.html</link>
            <guid isPermaLink="true">/2018/04/30/network-dhcp.html</guid>
            <description>&lt;p&gt;动态主机配置协议（Dynamic Host Configuration Protocol）是一个应用层协议，能够让设备自动获取IP地址（以及其他重要网络资源，比如DNS服务器和路由网关的地址）。大多数的DHCP服务器都向客户端提供一些其他的参数，比如网络上的默认网关和DNS服务器的地址。&lt;/p&gt;

&lt;p&gt;通常被应用在大型的局域网络环境中，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、Gateway地址、DNS服务器地址等信息，并能够提升地址的使用率。&lt;/p&gt;

&lt;h4 id=&quot;dhcp-头结构&quot;&gt;DHCP 头结构&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-30-network-dhcp/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;操作码（OpCode）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来指出这个数据包是DHCP请求还是DHCP回复。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;硬件类型（Hardware Type）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;硬件地址类型&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;硬件长度（Hardware Length）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;硬件地址长度&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;跳数（Hops）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中继代理用来帮助寻找DHCP服务器。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;事务ID（Transaction ID）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来匹配请求和响应的一个随机数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;消耗时间（Seconds Elasped）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;客户端第一次向DHCP服务器发出地址请求后的时间。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;标记（Flags）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DHCP客户端能够接受的流量类型（单播、广播以及其他）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;客户端IP地址（Client IP Address）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;客户端的IP地址（由“你的”IP地址域派生）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“你的”IP地址（Your IP Address）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DHCP服务器提供的IP地址（最终成为客户端的IP地址域的值）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;服务器IP地址（Server IP Address）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DHCP服务器的IP地址&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;网关IP地址（Gateway IP Address）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;网络默认网关的IP地址。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;客户端硬件地址（Client Hardware Address）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;客户端的MAC地址。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;服务器主机名（Server Host Name）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;服务器的主机名（可选）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;启动文件（Boot File）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DHCP所使用的启动文件（可选）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;选项（Options）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用来对DHCP数据包进行扩展，以提供更多功能。&lt;/p&gt;

&lt;h4 id=&quot;dhcp-续租过程dora&quot;&gt;DHCP 续租过程（DORA）&lt;/h4&gt;

&lt;p&gt;DCHP 最主要的任务就是在续租过程中向客户端分配IP地址。过程是在一个客户端和DHCP服务器之间进行，也成为DORA过程。&lt;/p&gt;

&lt;script src=&quot;https://cdn.rawgit.com/knsv/mermaid/6.0.0/dist/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    participant A as DHCP客户端
    participant B as DHCP服务器
    A-&amp;gt;&amp;gt;B: 发现（Discover）
    B-&amp;gt;&amp;gt;A: 提供（Offer）
    A-&amp;gt;&amp;gt;B: 请求（Request）
    B-&amp;gt;&amp;gt;A: 确认（ACK）
&lt;/div&gt;

&lt;p&gt;当DCHP给一个设备分配了一个IP地址时，它同时给客户端定下了一个租约。就是说，客户端只能在有限时间内使用这个IP地址，否则就必须续约。&lt;/p&gt;

&lt;p&gt;当一个拥有IP地址的客户端在租约内重新启动，它必须进行一个精简版的DORA过程来重新认领它的IP地址。这个过程称为租约内续租。&lt;/p&gt;

&lt;p&gt;当租约内续租时，发现和提供数据包就没有必要了。考虑到其与租约过期时的DORA过程类似，可以发现在租约过续租并不需要这么做，而只是完成请求和确认两个步骤就可以了。&lt;/p&gt;

&lt;script src=&quot;https://cdn.rawgit.com/knsv/mermaid/6.0.0/dist/mermaid.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    participant A as DHCP客户端
    participant B as DHCP服务器
    A-&amp;gt;&amp;gt;B: 请求（Request）
    B-&amp;gt;&amp;gt;A: 确认（ACK）
&lt;/div&gt;
</description>
            <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>网络基础 - 地址解析协议(ARP)</title>
            <link>/2018/04/29/network-arp.html</link>
            <guid isPermaLink="true">/2018/04/29/network-arp.html</guid>
            <description>&lt;p&gt;在以太网协议中规定，同一局域网中的一台主机要和另一台主机进行直接通信，必须要知道目标主机的MAC地址。而在TCP/IP协议中，网络层和传输层只关心目标主机的IP地址。这就导致在以太网中使用IP协议时，数据链路层的以太网协议接到上层IP协议提供的数据中，只包含目的主机的IP地址。于是需要一种方法，根据目的主机的IP地址，获得其MAC地址。这就是ARP协议要做的事情。所谓&lt;strong&gt;地址解析（address resolution）&lt;/strong&gt;就是主机在发送帧前将目标IP地址转换成目标MAC地址的过程。&lt;/p&gt;

&lt;p&gt;另外，当发送主机和目的主机不在同一个局域网中时，即便知道目的主机的MAC地址，两者也不能直接通信，必须经过路由转发才可以。所以此时，发送主机通过ARP协议获得的将不是目的主机的真实MAC地址，而是一台可以通往局域网外的路由器的MAC地址。于是此后发送主机发往目的主机的所有帧，都将发往该路由器，通过它向外发送。这种情况称为&lt;strong&gt;委托ARP&lt;/strong&gt;或&lt;strong&gt;ARP代理（ARP Proxy）&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在点对点链路中不使用ARP，实际上在点对点网络中也不使用MAC地址，因为在此类网络中分别已经获取了对端的IP地址。&lt;/p&gt;

&lt;h4 id=&quot;原理&quot;&gt;原理&lt;/h4&gt;

&lt;p&gt;在每台安装有TCP/IP协议的电脑或路由器里都有一个ARP缓存表，表里的IP地址与MAC地址是一对应的，如下表所示。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;主机名称&lt;/td&gt;
      &lt;td&gt;IP地址&lt;/td&gt;
      &lt;td&gt;MAC地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;192.168.38.10&lt;/td&gt;
      &lt;td&gt;00-AA-00-62-D2-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;192.168.38.11&lt;/td&gt;
      &lt;td&gt;00-BB-00-62-C2-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;192.168.38.12&lt;/td&gt;
      &lt;td&gt;00-CC-00-62-C2-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;D&lt;/td&gt;
      &lt;td&gt;192.168.38.13&lt;/td&gt;
      &lt;td&gt;00-DD-00-62-C2-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;E&lt;/td&gt;
      &lt;td&gt;192.168.38.14&lt;/td&gt;
      &lt;td&gt;00-EE-00-62-C2-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;以主机A（192.168.38.10）向主机B（192.168.38.11）发送数据为例。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当发送数据时，主机A会在自己的ARP缓存表中寻找是否有目标IP地址。如果找到就知道目标MAC地址为（00-BB-00-62-C2-02），直接把目标MAC地址写入帧里面发送就可。&lt;/li&gt;
  &lt;li&gt;如果在ARP缓存表中没有找到相对应的IP地址，主机A就会在网络上发送一个广播（ARP request），目标MAC地址是“FF.FF.FF.FF.FF.FF”，这表示向同一网段内的所有主机发出这样的询问：“192.168.38.11的MAC地址是什么？”&lt;/li&gt;
  &lt;li&gt;网络上其他主机并不响应ARP询问，只有主机B接收到这个帧时，才向主机A做出这样的回应（ARP response）：“192.168.38.11的MAC地址是00-BB-00-62-C2-02”，此回应以单播方式。这样，主机A就知道主机B的MAC地址，它就可以向主机B发送信息。同时它还更新自己的ARP高速缓存（ARP cache），下次再向主机B发送信息时，直接从ARP缓存表里查找就可。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ARP缓存表采用老化机制，在一段时间内如果表中的某一行没有使用，就会被删除，这样可以大大减少ARP缓存表的长度，加快查询速度。&lt;/p&gt;

&lt;h4 id=&quot;数据结构&quot;&gt;数据结构&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-network-arp/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;报文数据：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;硬件类型：如以太网（0x0001）、分组无线网。&lt;/li&gt;
  &lt;li&gt;协议类型：如IP网际协议（0x0800）、IPv6（0x86DD）。&lt;/li&gt;
  &lt;li&gt;硬件地址长度：每种硬件地址的字节长度，一般为6（以太网）。&lt;/li&gt;
  &lt;li&gt;协议地址长度：每种协议地址的字节长度，一般为4（IPv4）。&lt;/li&gt;
  &lt;li&gt;操作码：1为ARP请求，2为ARP回显，3为RARP请求，4为RARP应答。&lt;/li&gt;
  &lt;li&gt;源硬件地址：n个字节，n由硬件地址长度得到，一般为发送方MAC地址。&lt;/li&gt;
  &lt;li&gt;源协议地址：m个字节，m由协议地址长度得到，一般为发送方IP地址。&lt;/li&gt;
  &lt;li&gt;目标硬件地址：n个字节，n由硬件地址长度得到，一般为目标MAC地址。&lt;/li&gt;
  &lt;li&gt;目标协议地址：m个字节，m由协议地址长度得到，一般为目标IP地址。&lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Sun, 29 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>HTTP - 报文 - 首部</title>
            <link>/2018/04/29/http-headers.html</link>
            <guid isPermaLink="true">/2018/04/29/http-headers.html</guid>
            <description>&lt;p&gt;本文对HTTP报文中常见的首部做下说明。&lt;/p&gt;

&lt;h4 id=&quot;通用首部&quot;&gt;通用首部&lt;/h4&gt;

&lt;p&gt;有些⾸部提供了与报⽂相关的最基本的信息，它们被称为通⽤⾸部。它们像和事佬⼉⼀样，不论报⽂是何类型，都为其提供⼀些有⽤信息。&lt;/p&gt;

&lt;p&gt;通用信息性首部如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Connection&lt;/td&gt;
      &lt;td&gt;允许客户端和服务器指定与请求/响应连接有关的选项&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Date&lt;/td&gt;
      &lt;td&gt;提供⽇期和时间标志，说明报⽂是什么时间创建的，并列出了首部可接受的日期格式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MIME-Version&lt;/td&gt;
      &lt;td&gt;给出了发送端使⽤的MIME版本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Trailer&lt;/td&gt;
      &lt;td&gt;如果报⽂采⽤了分块传输编码（chunked transfer encoding）⽅式，就可以⽤这个⾸部列出位于报⽂拖挂（trailer）部分的⾸部集合&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transfer-Encoding&lt;/td&gt;
      &lt;td&gt;告知接收端为了保证报⽂的可靠传输，对报⽂采⽤了什么编码⽅式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update&lt;/td&gt;
      &lt;td&gt;给出了发送端可能想要“升级”使⽤的新版本或协议&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Via&lt;/td&gt;
      &lt;td&gt;显⽰了报⽂经过的中间节点（代理、⽹关）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;通用缓存性首部如下：&lt;/p&gt;

&lt;p&gt;HTTP/1.0 引⼊了第⼀个允许 HTTP 应⽤程序缓存对象本地副本的⾸部，这样就不需要总是直接从源端服务器获取了。最新的 HTTP 版本有⾮常丰富的缓存参数集。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cache-Control&lt;/td&gt;
      &lt;td&gt;⽤于随报⽂传送缓存指⽰&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Pragma&lt;/td&gt;
      &lt;td&gt;另⼀种随报⽂传送指⽰的⽅式，但并不专⽤于缓存&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;请求首部&quot;&gt;请求首部&lt;/h4&gt;

&lt;p&gt;请求⾸部是只在请求报⽂中有意义的⾸部。⽤于说明是谁或什么在发送请求、请求源⾃何处，或者客户端的喜好及能⼒。服务器可以根据请求⾸部给出的客户端信息，试着为客户端提供更好的响应。&lt;/p&gt;

&lt;p&gt;请求信息性首部如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Client-IP&lt;/td&gt;
      &lt;td&gt;提供了运⾏客户端的机器的IP地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;From&lt;/td&gt;
      &lt;td&gt;提供了客户端⽤户的E-mail地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Host&lt;/td&gt;
      &lt;td&gt;给出了接收请求的服务器的主机名和端⼜号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Referer&lt;/td&gt;
      &lt;td&gt;提供了包含当前请求URI的⽂档的URL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UA-Color&lt;/td&gt;
      &lt;td&gt;提供了与客户端显⽰器的显⽰颜⾊有关的信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UA-CPU&lt;/td&gt;
      &lt;td&gt;给出了客户端CPU的类型或制造商&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UA-Disp&lt;/td&gt;
      &lt;td&gt;提供了与客户端显⽰器（屏幕）能⼒有关的信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UA-OS&lt;/td&gt;
      &lt;td&gt;给出了运⾏在客户端机器上的操作系统名称及版本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UA-Pixels&lt;/td&gt;
      &lt;td&gt;提供了客户端显⽰器的像素信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User-Agent&lt;/td&gt;
      &lt;td&gt;将发起请求的应⽤程序名称告知服务器&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Accept首部&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Accept ⾸部为客户端提供了⼀种将其喜好和能⼒告知服务器的⽅式，包括它们想要什么，可以使⽤什么，以及最重要的，它们不想要什么。这样，服务器就可以根据这些额外信息，对要发送的内容做出更明智的决定。Accept ⾸部会使连接的两端都受益。客户端会得到它们想要的内容，服务器则不会浪费其时间和带宽来发送客户端⽆法使⽤的东西。&lt;/p&gt;

&lt;p&gt;常用Accept首部如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Accept&lt;/td&gt;
      &lt;td&gt;告诉服务器能够发送哪些媒体类型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Accept-Charset&lt;/td&gt;
      &lt;td&gt;告诉服务器能够发送哪些字符集&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Accept-Encoding&lt;/td&gt;
      &lt;td&gt;告诉服务器能够发送哪些编码⽅式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Accept-Language&lt;/td&gt;
      &lt;td&gt;告诉服务器能够发送哪些语⾔&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TE&lt;/td&gt;
      &lt;td&gt;告诉服务器可以使⽤哪些扩展传输编码&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;条件请求首部&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有时客户端希望为请求加上某些限制。&lt;/p&gt;

&lt;p&gt;常用条件请求首部如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Expect&lt;/td&gt;
      &lt;td&gt;允许客户端列出某请求所要求的服务器⾏为&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Match&lt;/td&gt;
      &lt;td&gt;如果实体标记与⽂档当前的实体标记相匹配，就获取这份⽂档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Modified-Since&lt;/td&gt;
      &lt;td&gt;除⾮在某个指定的⽇期之后资源被修改过，否则就限制这个请求&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-None-Match&lt;/td&gt;
      &lt;td&gt;如果提供的实体标记与当前⽂档的实体标记不相符，就获取⽂档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Range&lt;/td&gt;
      &lt;td&gt;允许对⽂档的某个范围进⾏条件请求&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Unmodified-Since&lt;/td&gt;
      &lt;td&gt;除⾮在某个指定⽇期之后资源没有被修改过，否则就限制这个请求&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Range&lt;/td&gt;
      &lt;td&gt;如果服务器⽀持范围请求，就请求资源的指定范围&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;安全请求首部&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP 本⾝就⽀持⼀种简单的机制，可以对请求进⾏质询 / 响应认证。这种机制要求客户端在获取特定的资源之前，先对⾃⾝进⾏认证，这样就可以使事务稍微安全⼀些。&lt;/p&gt;

&lt;p&gt;常用安全请求首部如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Authorization&lt;/td&gt;
      &lt;td&gt;包含了客户端提供给服务器，以便对其⾃⾝进⾏认证的数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cookie&lt;/td&gt;
      &lt;td&gt;客户端⽤它向服务器传送⼀个令牌——它并不是真正的安全⾸部，但确实隐含了安全功能&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;代理请求首部&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;随着因特⽹上代理的普遍应⽤，⼈们定义了⼏个⾸部来协助其更好地⼯作。&lt;/p&gt;

&lt;p&gt;常用代理请求首部如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Max-Forward&lt;/td&gt;
      &lt;td&gt;在通往源端服务器的路径上，将请求转发给其他代理或⽹关的最⼤次数——与TRACE⽅法⼀同使⽤&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Proxy-Authorization&lt;/td&gt;
      &lt;td&gt;与Authorization⾸部相同，但这个⾸部是在与代理进⾏认证时使⽤的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Proxy-Connection&lt;/td&gt;
      &lt;td&gt;与Connection⾸部相同，但这个⾸部是在与代理建⽴连接时使⽤的&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;响应首部&quot;&gt;响应首部&lt;/h4&gt;

&lt;p&gt;响应报⽂有⾃⼰的响应⾸部集。响应⾸部为客户端提供了⼀些额外信息，⽐如谁在发送响应、响应者的功能，甚⾄与响应相关的⼀些特殊指令。&lt;/p&gt;

&lt;p&gt;常用响应信息类首部如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描　　述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Age&lt;/td&gt;
      &lt;td&gt;（从最初创建开始）响应持续时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Public&lt;/td&gt;
      &lt;td&gt;服务器为其资源⽀持的请求⽅法列表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Retry-After&lt;/td&gt;
      &lt;td&gt;如果资源不可⽤的话，在此⽇期或时间重试&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Server&lt;/td&gt;
      &lt;td&gt;服务器应⽤程序软件的名称和版本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Title&lt;/td&gt;
      &lt;td&gt;对HTML⽂档来说，就是HTML⽂档的源端给出的标题&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Warning&lt;/td&gt;
      &lt;td&gt;⽐原因短语中更详细⼀些的警告报⽂&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;协商首部&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果资源有多种表⽰⽅法——⽐如，如果服务器上有某⽂档的法语和德语译稿，HTTP/1.1 可以为服务器和客户端提供对资源进⾏协商的能⼒。&lt;/p&gt;

&lt;p&gt;常用协商首部如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Accept-Ranges&lt;/td&gt;
      &lt;td&gt;对此资源来说，服务器可接受的范围类型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Vary&lt;/td&gt;
      &lt;td&gt;服务器查看的其他⾸部的列表，可能会使响应发⽣变化；也就是说，这是⼀个⾸部列表，服务器会根据这些⾸部的内容挑选出最适合的资源版本发送给客户端&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;安全响应首部&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP对应安全请求首部 的质询 / 响应认证机制的响应侧。&lt;/p&gt;

&lt;p&gt;常用安全响应首部如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ProxyAuthenticate&lt;/td&gt;
      &lt;td&gt;来⾃代理的对客户端的质询列表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Set-Cookie&lt;/td&gt;
      &lt;td&gt;不是真正的安全⾸部，但隐含有安全功能；可以在客户端设置⼀个令牌，以便服务器对客户端进⾏标识&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WWW-Authenticate&lt;/td&gt;
      &lt;td&gt;来⾃服务器的对客户端的质询列表&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;实体首部&quot;&gt;实体首部&lt;/h4&gt;

&lt;p&gt;有很多⾸部可以⽤来描述 HTTP 报⽂的负荷。由于请求和响应报⽂中都可能包含实体部分，所以在这两种类型的报⽂中都可能出现这些⾸部。&lt;/p&gt;

&lt;p&gt;实体的信息性⾸部如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Allow&lt;/td&gt;
      &lt;td&gt;列出了可以对此实体执⾏的请求⽅法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Location&lt;/td&gt;
      &lt;td&gt;告知客户端实体实际上位于何处；⽤于将接收端定向到资源的（可能是新的）位置（URL）上去&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;内容首部&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容⾸部提供了与实体内容有关的特定信息，说明了其类型、尺⼨以及处理它所需的其他有⽤信息。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Base&lt;/td&gt;
      &lt;td&gt;解析主体中的相对URL时使⽤的基础URL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Encoding&lt;/td&gt;
      &lt;td&gt;对主体执⾏的任意编码⽅式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Language&lt;/td&gt;
      &lt;td&gt;理解主体时最适宜使⽤的⾃然语⾔&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Length&lt;/td&gt;
      &lt;td&gt;主体的长度或尺⼨&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Location&lt;/td&gt;
      &lt;td&gt;资源实际所处的位置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-MD5&lt;/td&gt;
      &lt;td&gt;主体的MD5校验和&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Range&lt;/td&gt;
      &lt;td&gt;在整个资源中此实体表⽰的字节范围&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Type&lt;/td&gt;
      &lt;td&gt;这个主体的对象类型&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;实体缓存首部&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通⽤的缓存⾸部说明了如何或什么时候进⾏缓存。实体的缓存⾸部提供了与被缓存实体有关的信息。&lt;/p&gt;

&lt;p&gt;常用实体缓存⾸部如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;⾸部&lt;/td&gt;
      &lt;td&gt;描　　述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ETag&lt;/td&gt;
      &lt;td&gt;与此实体相关的实体标记17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Expires&lt;/td&gt;
      &lt;td&gt;实体不再有效，要从原始的源端再次获取此实体的⽇期和时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Last-Modified&lt;/td&gt;
      &lt;td&gt;这个实体最后⼀次被修改的⽇期和时间&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
            <pubDate>Sun, 29 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>HTTP - 连接管理</title>
            <link>/2018/04/29/http-connect.html</link>
            <guid isPermaLink="true">/2018/04/29/http-connect.html</guid>
            <description>&lt;h3 id=&quot;tcp连接&quot;&gt;TCP连接&lt;/h3&gt;

&lt;p&gt;世界上⼏乎所有的 HTTP 通信都是由 TCP/IP 承载的，TCP/IP 是全球计算机及⽹络设备都在使⽤的⼀种常⽤的分组交换⽹络分层协议集。客户端应⽤程序可以打开⼀条 TCP/IP 连接，连接到可能运⾏在世界任何地⽅的服务器应⽤程序。⼀旦连接建⽴起来了，在客户端和服务器的计算机之间交换的报⽂就永远不会丢失、受损或失序。&lt;/p&gt;

&lt;p&gt;完整的连接执行流程如下图所示:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;tcp是分段由ip分组传送&quot;&gt;TCP是分段、由IP分组传送&lt;/h4&gt;

&lt;p&gt;TCP 的数据是通过名为 IP 分组（或 IP 数据报）的⼩数据块来发送的。这样的话，如图 a 所⽰，HTTP 就是“HTTP over TCP over IP”这个“协议栈”中的最顶层了。其安全版本 HTTPS 就是在 HTTP 和 TCP 之间插⼊了⼀个（称为 TLS 或 SSL 的）密码加密层（图 b）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/2.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTTP 要传送⼀条报⽂时，会以流的形式将报⽂数据的内容通过⼀条打开的 TCP 连接按序传输。TCP 收到数据流之后，会将数据流砍成被称作段的⼩数据块，并将段封装在 IP 分组中，通过因特⽹进⾏传输（如下图）。所有这些⼯作都是由 TCP/IP 软件来处理的，HTTP 程序员什么都看不到。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/3.png&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;保持tcp连接的连续不间断性&quot;&gt;保持TCP连接的连续不间断性&lt;/h4&gt;

&lt;p&gt;TCP连接是通过 4 个值来识别的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;lt; 源IP 地址、源端⼝号、⽬的IP 地址、⽬的端⼝号&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这 4 个值⼀起唯⼀地定义了⼀条连接。两条不同的 TCP 连接不能拥有 4 个完全相同的地址组件值（但不同连接的部分组件可以拥有相同的值）。&lt;/p&gt;

&lt;h4 id=&quot;tcp套接字编程&quot;&gt;TCP套接字编程&lt;/h4&gt;

&lt;p&gt;参考 &lt;a href=&quot;http://127.0.0.1:4000/2017/06/11/php-websocket.html&quot;&gt;php实现webSocket&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;tcp性能&quot;&gt;TCP性能&lt;/h3&gt;

&lt;h4 id=&quot;http事务延迟&quot;&gt;HTTP事务延迟&lt;/h4&gt;

&lt;p&gt;HTTP 事务主要的连接、传输以及处理时延&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/4.png&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主要原因：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;客户端⾸先需要根据 URI 确定 Web 服务器的 IP 地址和端⼜号。如果最近没有对 URI 中的主机名进⾏访问，通过 DNS 解析系统将 URI 中的主机名转换成⼀个 IP 地址可能要花费数⼗秒的时间。(⼤多数 HTTP 客户端都有⼀个⼩的 DNS 缓存，⽤来保存近期所访问站点的 IP 地址。如果已经在本地“缓存”（记录）了 IP 地址，查询就可以⽴即完成。因为⼤多数 Web 浏览器浏览的都是少数常⽤站点，所以通常都可以很快地将主机名解析出来。)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;客户端会向服务器发送⼀条 TCP 连接请求，并等待服务器回送⼀个请求接受应答。每条新的 TCP 连接都会有连接建⽴时延。这个值通常最多只有⼀两秒钟，但如果有数百个 HTTP 事务的话，这个值会快速地叠加上去。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;⼀旦连接建⽴起来了，客户端就会通过新建⽴的 TCP 管道来发送HTTP 请求。数据到达时，Web 服务器会从 TCP 连接中读取请求报⽂，并对请求进⾏处理。因特⽹传输请求报⽂，以及服务器处理请求报⽂都需要时间。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;tcp连接的握时延&quot;&gt;TCP连接的握⼿时延&lt;/h4&gt;

&lt;p&gt;建⽴⼀条新的 TCP 连接时，甚⾄是在发送任意数据之前，TCP 软件之间会交换⼀系列的 IP 分组，对连接的有关参数进⾏沟通（如下图）。如果连接只⽤来传送少量数据，这些交换过程就会严重降低 HTTP 的性能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/5.png&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TCP三次握手如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;请求新的 TCP 连接时，客户端要向服务器发送⼀个⼩的 TCP 分组（通常是 40 ～ 60 个字节）。这个分组中设置了⼀个特殊的 SYN 标记，说明这是⼀个连接请求。（如上图a）。&lt;/li&gt;
  &lt;li&gt;如果服务器接受了连接，就会对⼀些连接参数进⾏计算，并向客户端回送⼀个 TCP 分组，这个分组中的 SYN 和 ACK 标记都被置位，说明连接请求已被接受（如上图b）。&lt;/li&gt;
  &lt;li&gt;最后，客户端向服务器回送⼀条确认信息，通知它连接已成功建⽴（如上图c）。现代的 TCP 栈都允许客户端在这个确认分组中发送数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;tcp慢启动&quot;&gt;TCP慢启动&lt;/h4&gt;

&lt;p&gt;TCP 数据传输的性能还取决于 TCP 连接的使⽤期（age）。TCP 连接会随着时间进⾏⾃我“调谐”，起初会限制连接的最⼤速度，如果数据成功传输，会随着时间的推移提⾼传输的速度。这种调谐被称为 TCP 慢启动（slow start），⽤于防⽌因特⽹的突然过载和拥塞。&lt;/p&gt;

&lt;p&gt;TCP 慢启动限制了⼀个 TCP 端点在任意时刻可以传输的分组数。简单来说，每成功接收⼀个分组，发送端就有了发送另外两个分组的权限。如果某个 HTTP 事务有⼤量数据要发送，是不能⼀次将所有分组都发送出去的。必须发送⼀个分组，等待确认；然后可以发送两个分组，每个分组都必须被确认，这样就可以发送四个分组了，以此类推。这种⽅式被称为“打开拥塞窗⼜”。&lt;/p&gt;

&lt;p&gt;由于存在这种拥塞控制特性，所以新连接的传输速度会⽐已经交换过⼀定量数据的、“已调谐”连接慢⼀些。由于已调谐连接要更快⼀些，所以HTTP 中有⼀些可以重⽤现存连接的⼯具。（HTTP持久连接）&lt;/p&gt;

&lt;h4 id=&quot;time_wait累积与端耗尽&quot;&gt;TIME_WAIT累积与端⼜耗尽&lt;/h4&gt;
&lt;p&gt;TIME_WAIT 端⼜耗尽是很严重的性能问题，会影响到性能基准，但在现实中相对较少出现。⼤多数遇到性能基准问题的⼈最终都会碰到这个问题，⽽且性能都会变得出乎意料地差，所以这个问题值得特别关注。&lt;/p&gt;

&lt;p&gt;当某个 TCP 端点关闭 TCP 连接时，会在内存中维护⼀个⼩的控制块，⽤来记录最近所关闭连接的 IP 地址和端⼜号。这类信息只会维持⼀⼩段时间，通常是所估计的最⼤分段使⽤期的两倍（称为 2MSL，通常为 2 分钟）左右，以确保在这段时间内不会创建具有相同地址和端⼜号的新连接。实际上，这个算法可以防⽌在两分钟内创建、关闭并重新创建两个具有相同 IP 地址和端⼜号的连接。&lt;/p&gt;

&lt;p&gt;现在⾼速路由器的使⽤，使得重复分组⼏乎不可能在连接关闭的⼏分钟后，出现在服务器上。有些操作系统会将 2MSL 设置为⼀个较⼩的值，但修改此值时要特别⼩⼼。分组确实会被复制，如果来⾃之前连接的复制分组插⼊了具有相同连接值的新 TCP 流，会破坏 TCP 数据。&lt;/p&gt;

&lt;p&gt;2MSL 的连接关闭延迟通常不是什么问题，但在性能基准环境下就可能会成为⼀个问题。进⾏性能基准测试时，通常只有⼀台或⼏台⽤来产⽣流量的计算机连接到某系统中去，这样就限制了连接到服务器的客户端 IP 地址数。⽽且，服务器通常会在 HTTP 的默认 TCP 端⼜ 80 上进⾏监听。⽤TIME_WAIT 防⽌端⼜号重⽤时，这些情况也限制了可⽤的连接值组合。&lt;/p&gt;

&lt;p&gt;在只有⼀个客户端和⼀台 Web 服务器的异常情况下，构建⼀条 TCP 连接
的 4 个值：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;lt;source-IP-address, source-port, destination-IP-address, destination-port&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中的 3 个都是固定的——只有源端⼜号可以随意改变：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;lt;client-IP, source-port, server-IP, 80&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;客户端每次连接到服务器上去时，都会获得⼀个新的源端⼜，以实现连接的唯⼀性。但由于可⽤源端⼜的数量有限（⽐如，60 000 个），⽽且在2MSL 秒（⽐如，120 秒）内连接是⽆法重⽤的，连接率就被限制在了 60000/120=500 次 / 秒。如果再不断进⾏优化，并且服务器的连接率不⾼于500 次 / 秒，就可确保不会遇到 TIME_WAIT 端⼜耗尽问题。要修正这个问题，可以增加客户端负载⽣成机器的数量，或者确保客户端和服务器在循环使⽤⼏个虚拟 IP 地址以增加更多的连接组合。&lt;/p&gt;

&lt;p&gt;即使没有遇到端⼜耗尽问题，也要特别⼩⼼有⼤量连接处于打开状态的情况，或为处于等待状态的连接分配了⼤量控制块的情况。在有⼤量打开连接或控制块的情况下，有些操作系统的速度会严重减缓。&lt;/p&gt;

&lt;h3 id=&quot;http连接处理&quot;&gt;HTTP连接处理&lt;/h3&gt;

&lt;h4 id=&quot;串行事务处理延迟&quot;&gt;串行事务处理延迟&lt;/h4&gt;

&lt;p&gt;如果只对连接进⾏简单的管理，TCP 的性能时延可能会叠加起来。⽐如，假设有⼀个包含了 3 个嵌⼊图⽚的 Web 页⾯。浏览器需要发起 4 个 HTTP事务来显⽰此页⾯： 1 个⽤于顶层的 HTML 页⾯，3 个⽤于嵌⼊的图⽚。如果每个事务都需要（串⾏地建⽴）⼀条新的连接，那么连接时延和慢启动时延就会叠加起来（如下图)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/6.png&quot; alt=&quot;6.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;并行连接&quot;&gt;并行连接&lt;/h4&gt;

&lt;p&gt;HTTP 允许客户端打开多条连接，并⾏地执⾏多个 HTTP事务。在这个例⼦中，并⾏加载了四幅嵌⼊式图⽚，每个事务都有⾃⼰的TCP 连接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/7.png&quot; alt=&quot;7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;并行连接时间如下图，⾸先装载的是封闭的 HTML 页⾯，然后并⾏处理其余的 3 个事务，每个事务都有⾃⼰的连接。图⽚的装载是并⾏的，连接的时延也是重叠的。(由于软件开销的存在，每个连接请求之间总是会有⼀些⼩的时延，但连接请求和传输时间基本上
都是重叠起来的。)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/8.png&quot; alt=&quot;8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但并行不一定更快&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;客户端的⽹络带宽不足，并⾏加载多个对象，每个对象都会去竞争这有限的带宽，每个对象都会以较慢的速度按⽐例加载，这样带来的性能提升就很⼩，甚⾄没什么提升。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开⼤量连接会消耗很多内存资源，从⽽引发⾃⾝的性能问题。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;实际上，浏览器确实使⽤了并⾏连接，但它们会将并⾏连接的总数限制为⼀个较⼩的值（通常是 4 个）。服务器可以随意关闭来⾃特定客户端的超量连接。&lt;/p&gt;

&lt;h4 id=&quot;持久连接&quot;&gt;持久连接&lt;/h4&gt;

&lt;p&gt;HTTP/1.1（以及 HTTP/1.0 的各种增强版本）允许 HTTP 设备在事务处理结束之后将 TCP 连接保持在打开状态，以便为未来的 HTTP 请求重⽤现存的连接。在事务处理结束之后仍然保持在打开状态的 TCP 连接被称为持久连接。⾮持久连接会在每个事务结束之后关闭。持久连接会在不同事务之间保持打开状态，直到客户端或服务器决定将其关闭为⽌。&lt;/p&gt;

&lt;p&gt;重⽤已对⽬标服务器打开的空闲持久连接，就可以避开缓慢的连接建⽴阶段。⽽且，已经打开的连接还可以避免慢启动的拥塞适应阶段，以便更快速地进⾏数据的传输。&lt;/p&gt;

&lt;p&gt;持久连接与并⾏连接配合使⽤可能是最⾼效的⽅式。现在，很多 Web 应⽤程序都会打开少量的并⾏连接，其中的每⼀个都是持久连接。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP/1.0+ keep-alive连接&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很多 HTTP/1.0 浏览器和服务器都进⾏了扩展，以⽀持⼀种被称为 keep-alive 连接的早期实验型持久连接。&lt;/p&gt;

&lt;p&gt;串行与并行的性能比较如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/9.png&quot; alt=&quot;9.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP/1.1持久连接&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP/1.1 逐渐停⽌了对 keep-alive 连接的⽀持，⽤⼀种名为持久连接（persistent connection）的改进型设计取代了它。持久连接的⽬的与 keepalive连接的⽬的相同，但⼯作机制更优⼀些。&lt;/p&gt;

&lt;p&gt;与 HTTP/1.0+ 的 keep-alive 连接不同，HTTP/1.1 持久连接在默认情况下是激活的。除⾮特别指明，否则 HTTP/1.1 假定所有连接都是持久的。要在事务处理结束之后将连接关闭，HTTP/1.1 应⽤程序必须向报⽂中显式地添加⼀个 Connection: close ⾸部。这是与以前的 HTTP 协议版本很重要的区别，在以前的版本中，keep-alive 连接要么是可选的，要么根本就不⽀持。&lt;/p&gt;

&lt;p&gt;HTTP/1.1 客户端假定在收到响应后，除⾮响应中包含了 Connection:close ⾸部，不然 HTTP/1.1 连接就仍维持在打开状态。但是，客户端和服务器仍然可以随时关闭空闲的连接。不发送 Connection: close 并不意味着服务器承诺永远将连接保持在打开状态。&lt;/p&gt;

&lt;p&gt;持久连接的限制和规则&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;发送了 Connection: close 请求⾸部之后，客户端就⽆法在那条连接上发送更多的请求了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果客户端不想在连接上发送其他请求了，就应该在最后⼀条请求中发送⼀个 Connection: close 请求⾸部。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;只有当连接上所有的报⽂都有正确的、⾃定义报⽂长度时——也就是说，实体主体部分的长度都和相应的 Content-Length ⼀致，或者是⽤分块传输编码⽅式编码的——连接才能持久保持。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP/1.1 的代理必须能够分别管理与客户端和服务器的持久连接——每个持久连接都只适⽤于⼀跳传输。（由于较⽼的代理会转发 Connection ⾸部，所以）HTTP/1.1 的代理服务器不应该与 HTTP/1.0 客户端建⽴持久连接，除⾮它们了解客户端的处理能⼒。实际上，这⼀点是很难做到的，很多⼚商都违背了这⼀原则。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;尽管服务器不应该试图在传输报⽂的过程中关闭连接，⽽且在关闭连接之前⾄少应该响应⼀条请求，但不管 Connection ⾸部取了什么值，HTTP/1.1 设备都可以在任意时刻关闭连接。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP/1.1 应⽤程序必须能够从异步的关闭中恢复出来。只要不存在可能会累积起来的副作⽤，客户端都应该重试这条请求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;除⾮重复发起请求会产⽣副作⽤，否则如果在客户端收到整条响应之前连接关闭了，客户端就必须要重新发起请求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;⼀个⽤户客户端对任何服务器或代理最多只能维护两条持久连接，以防服务器过载。代理可能需要更多到服务器的连接来⽀持并发⽤户的通信，所以，如果有 N 个⽤户试图访问服务器的话，代理最多要维持2&lt;em&gt;N&lt;/em&gt; 条到任意服务器或⽗代理的连接。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;管道化连接&quot;&gt;管道化连接&lt;/h3&gt;

&lt;p&gt;HTTP/1.1 允许在持久连接上可选地使⽤请求管道。这是相对于 keep-alive连接的又⼀性能优化。在响应到达之前，可以将多条请求放⼊队列。当第⼀条请求通过⽹络流向地球另⼀端的服务器时，第⼆条和第三条请求也可以开始发送了。在⾼时延⽹络条件下，这样做可以降低⽹络的环回时间，提⾼性能。&lt;/p&gt;

&lt;p&gt;与串行、持久对比如下图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/10.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;限制：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果 HTTP 客户端⽆法确认连接是持久的，就不应该使⽤管道。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;必须按照与请求相同的顺序回送 HTTP 响应。HTTP 报⽂中没有序列号标签，因此如果收到的响应失序了，就没办法将其与请求匹配起来了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 客户端必须做好连接会在任意时刻关闭的准备，还要准备好重发所有未完成的管道化请求。如果客户端打开了⼀条持久连接，并⽴即发出了 10 条请求，服务器可能在只处理了，⽐⽅说，5 条请求之后关闭连接。剩下的 5 条请求会失败，客户端必须能够应对这些过早关闭连接的情况，重新发出这些请求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP 客户端不应该⽤管道化的⽅式发送会产⽣副作⽤的请求（⽐如POST）。总之，出错的时候，管道化⽅式会阻碍客户端了解服务器执⾏的是⼀系列管道化请求中的哪⼀些。由于⽆法安全地重试 POST 这样的⾮幂等请求，所以出错时，就存在某些⽅法永远不会被执⾏的风险。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;关闭连接&quot;&gt;关闭连接&lt;/h3&gt;

&lt;p&gt;TCP 连接是双向的。TCP 连接的每⼀端都有⼀个输⼊队列和⼀个输出队列，⽤于数据的读或写。放⼊⼀端输出队列中的数据最终会出现在另⼀端的输⼊队列中。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/11.png&quot; alt=&quot;11.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;完全关闭与半关闭&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;应⽤程序可以关闭 TCP 输⼊和输出信道中的任意⼀个，或者将两者都关闭了。套接字调⽤ close() 会将 TCP 连接的输⼊和输出信道都关闭了。这被称作“完全关闭”，如图 4-20a 所⽰。还可以⽤套接字调⽤shutdown() 单独关闭输⼊或输出信道。这被称为“半关闭”，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/12.png&quot; alt=&quot;12.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TCP关闭及重置错误&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单的 HTTP 应⽤程序可以只使⽤完全关闭。但当应⽤程序开始与很多其他类型的 HTTP 客户端、服务器和代理进⾏对话且开始使⽤管道化持久连接时，使⽤半关闭来防⽌对等实体收到⾮预期的写⼊错误就变得很重要了。&lt;/p&gt;

&lt;p&gt;总之，关闭连接的输出信道总是很安全的。连接另⼀端的对等实体会在从其缓冲区中读出所有数据之后收到⼀条通知，说明流结束了，这样它就知道你将连接关闭了。&lt;/p&gt;

&lt;p&gt;关闭连接的输⼊信道⽐较危险，除⾮你知道另⼀端不打算再发送其他数据了。如果另⼀端向你已关闭的输⼊信道发送数据，操作系统就会向另⼀端的机器回送⼀条 TCP“连接被对端重置”的报⽂，如下图所⽰。⼤部分操作系统都会将这种情况作为很严重的错误来处理，删除对端还未读取的所有缓存数据。对管道化连接来说，这是⾮常糟糕的事情。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-29-http-connect/13.png&quot; alt=&quot;13.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;正常关闭&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP 规范建议，当客户端或服务器突然要关闭⼀条连接时，应该“正常地关闭传输连接”，但它并没有说明应该如何去做。&lt;/p&gt;

&lt;p&gt;总之，实现正常关闭的应⽤程序⾸先应该关闭它们的输出信道，然后等待连接另⼀端的对等实体关闭它的输出信道。当两端都告诉对⽅它们不会再发送任何数据（⽐如关闭输出信道）之后，连接就会被完全关闭，⽽不会有重置的危险。&lt;/p&gt;

&lt;p&gt;但不幸的是，⽆法确保对等实体会实现半关闭，或对其进⾏检查。因此，想要正常关闭连接的应⽤程序应该先半关闭其输出信道，然后周期性地检查其输⼊信道的状态（查找数据，或流的末尾）。如果在⼀定的时间区间内对端没有关闭输⼊信道，应⽤程序可以强制关闭连接，以节省资源。&lt;/p&gt;
</description>
            <pubDate>Sun, 29 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
        <item>
            <title>HTTP - 报文 - 状态码</title>
            <link>/2018/04/27/http-message-status.html</link>
            <guid isPermaLink="true">/2018/04/27/http-message-status.html</guid>
            <description>&lt;p&gt;本文对HTTP报文中常见的状态码做下说明。所有状态码参见&lt;a href=&quot;https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81&quot;&gt;HTTP状态码&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;100199-信息性状态码&quot;&gt;100~199 信息性状态码&lt;/h4&gt;

&lt;p&gt;HTTP/1.1 向协议中引⼊了信息性状态码。这些状态码相对较新，关于其复杂性和感知价值存在⼀些争议。&lt;/p&gt;

&lt;p&gt;已定义的信息性状态码如下：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;状态码&lt;/td&gt;
      &lt;td&gt;原因短语&lt;/td&gt;
      &lt;td&gt;含义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;Continue&lt;/td&gt;
      &lt;td&gt;说明收到了请求的初始部分，请客户端继续。发送了这个状态码之后，服务器在收到请求之后必须进⾏响应。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;101&lt;/td&gt;
      &lt;td&gt;Switching Protocols&lt;/td&gt;
      &lt;td&gt;说明服务器正在根据客户端的指定，将协议切换成Update⾸部所列的协议。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;由于目前应用场景有限，这里不做过多说明。&lt;/p&gt;

&lt;h4 id=&quot;200299-成功状态码&quot;&gt;200~299 成功状态码&lt;/h4&gt;

&lt;p&gt;客户端发起请求时，这些请求通常都是成功的。服务器有⼀组⽤来表⽰成功的状态码，分别对应于不同类型的请求。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;状态码&lt;/td&gt;
      &lt;td&gt;原因短语&lt;/td&gt;
      &lt;td&gt;含义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;200&lt;/td&gt;
      &lt;td&gt;OK&lt;/td&gt;
      &lt;td&gt;请求没问题，实体的主体部分包含了所请求的资源&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;201&lt;/td&gt;
      &lt;td&gt;Created&lt;/td&gt;
      &lt;td&gt;⽤于创建服务器对象的请求（⽐如，PUT）。响应的实体主体部分中应该包含各种引⽤了已创建的资源的URL，Location⾸部包含的则是最具体的引⽤。&lt;br /&gt;服务器必须在发送这个状态码之前创建好对象&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;202&lt;/td&gt;
      &lt;td&gt;Accepted&lt;/td&gt;
      &lt;td&gt;请求已被接受，但服务器还未对其执⾏任何动作。不能保证服器会完成这个请求；这只是意味着接受请求时，它看起来是有的。&lt;br /&gt;服务器应该在实体的主体部分包含对请求状态的描述，或许还应该有对请求完成时间的估计（或者包含⼀个指针，指向可以获取此信息的位置）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;203&lt;/td&gt;
      &lt;td&gt;Non-Authoritative Information&lt;/td&gt;
      &lt;td&gt;实体⾸部包含的信息不是来⾃于源端服务器，⽽是来⾃资源的⼀份副本。如果中间节点上有⼀份资源副本，但⽆法或者没有对它所发送的与资源有关的元信息（⾸部）进⾏验证，就会出现这种情况。&lt;br /&gt;这种响应码并不是⾮⽤不可的；如果实体⾸部来⾃源端服务器，响应为200状态的应⽤程序就可以将其作为⼀种可选项使⽤&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;204&lt;/td&gt;
      &lt;td&gt;No Content&lt;/td&gt;
      &lt;td&gt;响应报⽂中包含若⼲⾸部和⼀个状态⾏，但没有实体的主体部分。主要⽤于在浏览器不转为显⽰新⽂档的情况下，对其进⾏更新（⽐如刷新⼀个表单页⾯）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;205&lt;/td&gt;
      &lt;td&gt;Reset Content&lt;/td&gt;
      &lt;td&gt;另⼀个主要⽤于浏览器的代码。负责告知浏览器清除当前页⾯中的所有HTML 表单元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;206&lt;/td&gt;
      &lt;td&gt;Partial Content&lt;/td&gt;
      &lt;td&gt;成功执⾏了⼀个部分或Range（范围）请求。稍后我们会看到，客户端可以通过⼀些特殊的⾸部来获取部分或某个范围内的⽂档——这个状态码就说明范围请求成功了。&lt;br /&gt;206响应中必须包含Content-Range、Date以及ETag或Content-Location⾸部。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;300399-重定向状态码&quot;&gt;300~399 重定向状态码&lt;/h4&gt;

&lt;p&gt;重定向状态码要么告知客户端使⽤替代位置来访问他们所感兴趣的资源，要么就提供⼀个替代的响应⽽不是资源的内容。如果资源已被移动，可发送⼀个重定向状态码和⼀个可选的 Location ⾸部来告知客户端资源已被移⾛，以及现在可以在哪⾥找到它，这样，浏览器就可以在不打扰使⽤者的情况下，透明地转⼊新的位置了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-27-http-message-status/1.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以通过某些重定向状态码对资源的应⽤程序本地副本与源端服务器上资源进⾏验证。⽐如，HTTP 应⽤程序可以查看其资源的本地副本是否仍然是最新的，或者在源端服务器上资源是否被修改过。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2018-04-27-http-message-status/2.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;总之，在对那些包含了重定向状态码的⾮ HEAD 请求进⾏响应时，最好要包含⼀个实体，并在实体中包含描述信息和指向（多个）重定向 URL 的链接。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;状态码&lt;/td&gt;
      &lt;td&gt;原因短语&lt;/td&gt;
      &lt;td&gt;含义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;300&lt;/td&gt;
      &lt;td&gt;Multiple Choices&lt;/td&gt;
      &lt;td&gt;客户端请求⼀个实际指向多个资源的URL时会返回这个状态码，⽐如服务器上有某个HTML⽂档的英语和法语版本。返回这个代码时会带有⼀个选项列表；这样⽤户就可以选择他希望使⽤的那⼀项了。有多个版本可⽤时，客户端需要沟通解决，服务器可以在Location⾸部包含⾸选URL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;301&lt;/td&gt;
      &lt;td&gt;Moved Permanently&lt;/td&gt;
      &lt;td&gt;在请求的URL已被移除时使⽤。响应的Location⾸部中应该包含资源现在所处的URL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;302&lt;/td&gt;
      &lt;td&gt;Found&lt;/td&gt;
      &lt;td&gt;与301状态码类似；但是，客户端应该使⽤Location⾸部给出的URL来临时定位资源。将来的请求仍应使⽤⽼的URL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;303&lt;/td&gt;
      &lt;td&gt;See Other&lt;/td&gt;
      &lt;td&gt;告知客户端应该⽤另⼀个URL来获取资源。新的URL位于响应报⽂的 Location ⾸部。其主要⽬的是允许POST请求的响应将客户端定向到某个资源上去&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;304&lt;/td&gt;
      &lt;td&gt;Not Modified&lt;/td&gt;
      &lt;td&gt;客户端可以通过所包含的请求⾸部，使其请求变成有条件的。如果客户端发起了⼀个条件GET请求，⽽最近资源未被修改的话， 就可以⽤这个状态码来说明资源未被修改。带有这个状态码的响应不应该包含实体的主体部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;305&lt;/td&gt;
      &lt;td&gt;Use Proxy&lt;/td&gt;
      &lt;td&gt;⽤来说明必须通过⼀个代理来访问资源；代理的位置由Location⾸部给出。很重要的⼀点是，客户端是相对某个特定资源来解析这条响应的，不能假定所有请求，甚⾄所有对持有所请求资源的服务器的请求都通过这个代理进⾏。如果客户端错误地让代理介⼊了某条请求，可能会引发破坏性的⾏为，⽽且会造成安全漏洞&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;306&lt;/td&gt;
      &lt;td&gt;（未使⽤）&lt;/td&gt;
      &lt;td&gt;当前未使⽤&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;307&lt;/td&gt;
      &lt;td&gt;Temporary Redirect&lt;/td&gt;
      &lt;td&gt;与301状态码类似；但客户端应该使⽤Location⾸部给出的URL来临时定位资源。将来的请求应该使⽤⽼的URL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;302、303、307区别&lt;/p&gt;

&lt;p&gt;当 HTTP/1.0 客户端发起⼀个 POST 请求，并在响应中收到 302 重定向状态码时，它会接受 Location ⾸部的重定向 URL，并向那个 URL 发起⼀个
GET 请求（⽽不会像原始请求中那样发起 POST 请求）。  &lt;br /&gt;
HTTP/1.0 服务器希望 HTTP/1.0 客户端这么做——如果 HTTP/1.0 服务器收到来⾃ HTTP/1.0 客户端的 POST 请求之后发送了 302 状态码，服务器就期望客户端能够接受重定向 URL，并向重定向的 URL 发送⼀个 GET 请求。  &lt;br /&gt;
问题出在 HTTP/1.1。HTTP/1.1 规范使⽤ 303 状态码来实现同样的⾏为（服务器发送 303 状态码来重定向客户端的 POST 请求，在它后⾯跟上⼀
个 GET 请求）。  &lt;br /&gt;
为了避开这个问题，HTTP/1.1 规范指出，对于 HTTP/1.1 客户端，⽤ 307状态码取代 302 状态码来进⾏临时重定向。这样服务器就可以将 302 状态
码保留起来，为 HTTP/1.0 客户端使⽤了。&lt;/p&gt;

&lt;h4 id=&quot;400499-客户端错误状态码&quot;&gt;400～499 客户端错误状态码&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;状态码&lt;/td&gt;
      &lt;td&gt;原因短语&lt;/td&gt;
      &lt;td&gt;含义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;400&lt;/td&gt;
      &lt;td&gt;Bad Request&lt;/td&gt;
      &lt;td&gt;⽤于告知客户端它发送了⼀个错误的请求&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;401&lt;/td&gt;
      &lt;td&gt;Unauthorized&lt;/td&gt;
      &lt;td&gt;与适当的⾸部⼀同返回，在这些⾸部中请求客户端在获取对资源的访问权之前，对⾃⼰进⾏认证。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;402&lt;/td&gt;
      &lt;td&gt;Payment Required&lt;/td&gt;
      &lt;td&gt;现在这个状态码还未使⽤，但已经被保留，以作未来之⽤&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;403&lt;/td&gt;
      &lt;td&gt;Forbidden&lt;/td&gt;
      &lt;td&gt;⽤于说明请求被服务器拒绝了。如果服务器想说明为什么拒绝请求，可以包含实体的主体部分来对原因进⾏描述。但这个状态码通常是在服务器不想说明拒绝原因的时候使⽤的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;404&lt;/td&gt;
      &lt;td&gt;Not Found&lt;/td&gt;
      &lt;td&gt;⽤于说明服务器⽆法找到所请求的URL。通常会包含⼀个实体，以便客户端应⽤程序显⽰给⽤户看&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;405&lt;/td&gt;
      &lt;td&gt;Method Not Allowed&lt;/td&gt;
      &lt;td&gt;发起的请求中带有所请求的URL不⽀持的⽅法时，使⽤此状态码。应该在响应中包含Allow⾸部，以告知客户端对所请求的资源可以使⽤哪些⽅法。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;406&lt;/td&gt;
      &lt;td&gt;Not Acceptable&lt;/td&gt;
      &lt;td&gt;客户端可以指定参数来说明它们愿意接收什么类型的实体。服务器没有与客户端可接受的URL相匹配的资源时，使⽤此代码。通常，服务器会包含⼀些⾸部，以便客户端弄清楚为什么请求⽆法满⾜。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;407&lt;/td&gt;
      &lt;td&gt;Proxy Authentication Required&lt;/td&gt;
      &lt;td&gt;与401状态码类似，但⽤于要求对资源进⾏认证的代理服务器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;408&lt;/td&gt;
      &lt;td&gt;Request Timeout&lt;/td&gt;
      &lt;td&gt;如果客户端完成请求所花的时间太长，服务器可以回送此状态码，并关闭连接。超时时长随服务器的不同有所不同，但通常对所有的合法请求来说，都是够长的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;409&lt;/td&gt;
      &lt;td&gt;Conflict&lt;/td&gt;
      &lt;td&gt;⽤于说明请求可能在资源上引发的⼀些冲突。服务器担⼼请求会引发冲突时，可以发送此状态码。响应中应该包含描述冲突的主体&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;410&lt;/td&gt;
      &lt;td&gt;Gone&lt;/td&gt;
      &lt;td&gt;与404类似，只是服务器曾经拥有过此资源。主要⽤于Web站点的维护，这样服务器的管理者就可以在资源被移除的情况下通知客户端了&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;411&lt;/td&gt;
      &lt;td&gt;Length Required&lt;/td&gt;
      &lt;td&gt;服务器要求在请求报⽂中包含Content-Length⾸部时使⽤。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;412&lt;/td&gt;
      &lt;td&gt;Precondition Failed&lt;/td&gt;
      &lt;td&gt;客户端发起了条件请求，且其中⼀个条件失败了的时候使⽤。客户端包含了Expect⾸部时发起的就是条件请求。更多有关Expect⾸部的内容请参见附录C中Expect部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;413&lt;/td&gt;
      &lt;td&gt;Request Entity Too Large&lt;/td&gt;
      &lt;td&gt;客户端发送的实体主体部分⽐服务器能够或者希望处理的要⼤时，使⽤此状态码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;414&lt;/td&gt;
      &lt;td&gt;Request URI Too Long&lt;/td&gt;
      &lt;td&gt;客户端所发请求中的请求URL⽐服务器能够或者希望处理的要长时，使⽤此状态码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;415&lt;/td&gt;
      &lt;td&gt;Unsupported Media Type&lt;/td&gt;
      &lt;td&gt;服务器⽆法理解或⽆法⽀持客户端所发实体的内容类型时，使⽤此状态码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;416&lt;/td&gt;
      &lt;td&gt;Requested Range Not Satisfiable&lt;/td&gt;
      &lt;td&gt;请求报⽂所请求的是指定资源的某个范围，⽽此范围⽆效或⽆法满⾜时，使⽤此状态码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;417&lt;/td&gt;
      &lt;td&gt;Expectation Failed&lt;/td&gt;
      &lt;td&gt;请求的Expect请求⾸部包含了⼀个期望，但服务器⽆法满⾜此期望时，使⽤此状态码。如果代理或其他中间应⽤程序有确切证据说明源端服务器会为某请求产⽣⼀个失败的期望，就可以发送这个响应状态码&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;500599-服务器错误状态码&quot;&gt;500～599 服务器错误状态码&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;状态码&lt;/td&gt;
      &lt;td&gt;原因短语&lt;/td&gt;
      &lt;td&gt;含义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;500&lt;/td&gt;
      &lt;td&gt;Internal Server Error&lt;/td&gt;
      &lt;td&gt;服务器遇到⼀个妨碍它为请求提供服务的错误时，使⽤此状态码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;501&lt;/td&gt;
      &lt;td&gt;Not Implemented&lt;/td&gt;
      &lt;td&gt;客户端发起的请求超出服务器的能⼒范围（⽐如，使⽤了服务器不⽀持的请求⽅法）时，使⽤此状态码作为代理或⽹关使⽤的服务器从请求响应链的下⼀条链路上&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;502&lt;/td&gt;
      &lt;td&gt;Bad Gateway&lt;/td&gt;
      &lt;td&gt;收到了⼀条伪响应（⽐如，它⽆法连接到其⽗⽹关）时，使⽤此状态码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;503&lt;/td&gt;
      &lt;td&gt;Service Unavailable&lt;/td&gt;
      &lt;td&gt;⽤来说明服务器现在⽆法为请求提供服务，但将来可以。如果服务器知道什么时候资源会变为可⽤的，可以在响应中包含⼀个Retry-After⾸部。更多有关Retry-After⾸部的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;504&lt;/td&gt;
      &lt;td&gt;Gateway Timeout&lt;/td&gt;
      &lt;td&gt;与状态码408类似，只是这⾥的响应来⾃⼀个⽹关或代理，它们在等待另⼀服务器对其请求进⾏响应时超时了&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;505&lt;/td&gt;
      &lt;td&gt;HTTP Version Not Supported&lt;/td&gt;
      &lt;td&gt;服务器收到的请求使⽤了它⽆法或不愿⽀持的协议版本时，使⽤此状态码。有些服务器应⽤程序会选择不⽀持协议&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
            <pubDate>Fri, 27 Apr 2018 00:00:00 +0800</pubDate>
        </item>
        
    </channel>
</rss>